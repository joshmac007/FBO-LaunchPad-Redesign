"""refactor_fee_category_to_aircraft_classification

Revision ID: 6d14ea77f5a5
Revises: 6e43a849ef92
Create Date: 2025-06-28 23:13:42.622658

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '6d14ea77f5a5'
down_revision = '6e43a849ef92'
branch_labels = None
depends_on = None


def upgrade():
    # Schema-only changes as per task requirements
    # 1. Rename the table: 'fee_categories' to 'aircraft_classifications'
    op.rename_table('fee_categories', 'aircraft_classifications')
    
    # 2. Rename the mapping table: 'aircraft_type_fee_category_mappings' to 'aircraft_classification_mappings'
    op.rename_table('aircraft_type_fee_category_mappings', 'aircraft_classification_mappings')
    
    # 3. Rename the column in the mapping table: 'fee_category_id' to 'classification_id'
    op.alter_column('aircraft_classification_mappings', 'fee_category_id', new_column_name='classification_id')
    
    # 4. Rename the column in the fee rules table: 'applies_to_fee_category_id' to 'applies_to_classification_id'
    op.alter_column('fee_rules', 'applies_to_fee_category_id', new_column_name='applies_to_classification_id')
    
    # 5. Drop the FBO-specific constraint from the newly renamed table
    op.drop_constraint('_fbo_classification_name_uc', 'aircraft_classifications', type_='unique')
    
    # 6. Drop the FBO-specific column
    op.drop_column('aircraft_classifications', 'fbo_location_id')
    
    # 7. Add a new global unique constraint
    op.create_unique_constraint('_classification_name_uc', 'aircraft_classifications', ['name'])
    
    # 8. Add the new foreign key column to aircraft_types (nullable at this stage)
    op.add_column('aircraft_types', sa.Column('classification_id', sa.Integer(), nullable=True))
    
    # 9. Add the foreign key constraint
    op.create_foreign_key('fk_aircraft_types_classification_id', 'aircraft_types', 'aircraft_classifications', ['classification_id'], ['id'])


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('fee_rules', schema=None) as batch_op:
        batch_op.add_column(sa.Column('applies_to_fee_category_id', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('fee_rules_applies_to_fee_category_id_fkey', 'fee_categories', ['applies_to_fee_category_id'], ['id'])
        batch_op.drop_column('applies_to_aircraft_classification_id')

    with op.batch_alter_table('aircraft_types', schema=None) as batch_op:
        batch_op.add_column(sa.Column('default_fee_category_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.drop_column('default_aircraft_classification_id')

    op.create_table('aircraft_type_fee_category_mappings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('fbo_location_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('aircraft_type_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('fee_category_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['aircraft_type_id'], ['aircraft_types.id'], name='aircraft_type_fee_category_mappings_aircraft_type_id_fkey'),
    sa.ForeignKeyConstraint(['fee_category_id'], ['fee_categories.id'], name='aircraft_type_fee_category_mappings_fee_category_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='aircraft_type_fee_category_mappings_pkey'),
    sa.UniqueConstraint('fbo_location_id', 'aircraft_type_id', name='uq_aircraft_type_fbo_mapping', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    with op.batch_alter_table('aircraft_type_fee_category_mappings', schema=None) as batch_op:
        batch_op.create_index('ix_aircraft_type_fee_category_mappings_fbo_location_id', ['fbo_location_id'], unique=False)

    with op.batch_alter_table('aircraft_type_aircraft_classification_mappings', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_aircraft_type_aircraft_classification_mappings_fbo_location_id'))

    op.drop_table('aircraft_type_aircraft_classification_mappings')
    # ### end Alembic commands ###
