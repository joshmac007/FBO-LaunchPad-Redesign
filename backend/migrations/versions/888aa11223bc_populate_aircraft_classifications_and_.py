"""populate_aircraft_classifications_and_types

Revision ID: 888aa11223bc
Revises: 6d14ea77f5a5
Create Date: 2025-06-28 23:27:51.244265

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '888aa11223bc'
down_revision = '6d14ea77f5a5'
branch_labels = None
depends_on = None


def upgrade():
    # Data population and finalization as per task requirements
    conn = op.get_bind()
    
    # Step 1: De-duplicate and Globalize Classifications
    # Create a temporary table with the final global classifications
    op.create_table('temp_global_classifications',
        sa.Column('name', sa.String(100), nullable=False, primary_key=True)
    )
    conn.execute(sa.text("INSERT INTO temp_global_classifications (name) SELECT DISTINCT name FROM aircraft_classifications WHERE name IS NOT NULL"))
    
    # Step 2: Clear the now-de-normalized aircraft_classifications table
    # First, clear dependent tables to avoid foreign key constraint violations
    op.execute("DELETE FROM fee_rule_overrides")
    op.execute("DELETE FROM aircraft_classification_mappings")
    op.execute("DELETE FROM fee_rules")
    op.execute("DELETE FROM aircraft_classifications")
    
    # Step 3: Re-insert the clean, global classification names with timestamps
    op.execute("INSERT INTO aircraft_classifications (name, created_at, updated_at) SELECT name, NOW(), NOW() FROM temp_global_classifications")
    op.drop_table('temp_global_classifications')
    
    # Step 4: Migrate AircraftType Data using "Most Recently Updated" Rule
    # Get the mapping from new global classification names to their IDs
    classifications_map_result = conn.execute(sa.text("SELECT id, name FROM aircraft_classifications"))
    classifications_map = {name: id for id, name in classifications_map_result}
    
    # Find the correct new classification_id for each aircraft type based on the most recent mapping
    migration_query = sa.text("""
        WITH ranked_mappings AS (
            SELECT
                acm.aircraft_type_id,
                ac.name AS classification_name,
                ROW_NUMBER() OVER(PARTITION BY acm.aircraft_type_id ORDER BY acm.updated_at DESC) as rn
            FROM aircraft_classification_mappings acm
            JOIN aircraft_classifications ac ON acm.classification_id = ac.id
        )
        SELECT aircraft_type_id, classification_name FROM ranked_mappings WHERE rn = 1
    """)
    
    # Execute the update for all aircraft types that have legacy mappings
    for aircraft_type_id, classification_name in conn.execute(migration_query):
        new_classification_id = classifications_map.get(classification_name)
        if new_classification_id:
            conn.execute(sa.text("UPDATE aircraft_types SET classification_id = :class_id WHERE id = :ac_id").bindparams(class_id=new_classification_id, ac_id=aircraft_type_id))

    # Handle edge case: aircraft types with no legacy mappings
    unclassified_id = classifications_map.get('Unclassified')
    if not unclassified_id:
        # Create 'Unclassified' if it doesn't exist
        conn.execute(sa.text("INSERT INTO aircraft_classifications (name, created_at, updated_at) VALUES ('Unclassified', NOW(), NOW()) RETURNING id"))
        unclassified_id = conn.execute(sa.text("SELECT id FROM aircraft_classifications WHERE name = 'Unclassified'")).scalar_one()

    op.execute(sa.text("UPDATE aircraft_types SET classification_id = :unclassified_id WHERE classification_id IS NULL").bindparams(unclassified_id=unclassified_id))
    
    # Step 5: Enforce Non-Nullability
    op.alter_column('aircraft_types', 'classification_id', existing_type=sa.INTEGER(), nullable=False)


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('aircraft_types', schema=None) as batch_op:
        batch_op.add_column(sa.Column('default_fee_category_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('classification_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.create_foreign_key('fk_aircraft_types_classification_id', 'aircraft_classifications', ['classification_id'], ['id'])
        batch_op.drop_column('default_aircraft_classification_id')

    with op.batch_alter_table('aircraft_classification_mappings', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_aircraft_classification_mappings_fbo_location_id'))
        batch_op.create_index('ix_aircraft_type_fee_category_mappings_fbo_location_id', ['fbo_location_id'], unique=False)

    # ### end Alembic commands ###
