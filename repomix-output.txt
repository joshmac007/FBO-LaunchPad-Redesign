This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: frontend/app, frontend/components, frontend/hooks, frontend/tailwind.config.ts, frontend/next.config.mjs, backend/src, backend/migrations, backend/DATABASE_SETUP.md, backend/docker-compose.yml, backend/Dockerfile, backend/entrypoint.sh, backend/setup.py, backend/reseed_database.sh
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)


================================================================
Directory Structure
================================================================
backend/
  migrations/
    versions/
      6a7677d82b03_add_migration_tracking_fields_and_.py
      866cf231e9da_add_permission_groups_and_user_.py
      931518a1009f_add_category_column_to_permissions_table.py
      cd7344a46b7f_initial_schema_based_on_current_models_.py
      cfdd930e28a0_add_new_permissions_and_rename_truck_.py
      d8897d7b926b_add_lst_specific_fields_to_users_table.py
    alembic.ini
    env.py
    README
    script.py.mako
  src/
    migration_scripts/
      __init__.py
      permission_migration.py
    models/
      __init__.py
      aircraft.py
      base.py
      customer.py
      fuel_order.py
      fuel_truck.py
      permission_group.py
      permission.py
      role_permission.py
      role.py
      settings.py
      user_permission_group.py
      user_permission.py
      user.py
    routes/
      admin/
        __init__.py
        aircraft_admin_routes.py
        assignment_settings_routes.py
        customer_admin_routes.py
        lst_admin_routes.py
        permission_admin_routes.py
        role_admin_routes.py
        routes.py
        user_admin_routes.py
      __init__.py
      aircraft_routes.py
      auth_routes.py
      auth.py
      customer_routes.py
      enhanced_fuel_order_routes_example.py
      enhanced_fuel_order_routes.py
      enhanced_user_routes.py
      fuel_order_routes.py
      fuel_truck_routes.py
      user_routes.py
    schemas/
      __init__.py
      admin_schemas.py
      aircraft_schemas.py
      auth_schemas.py
      customer_schemas.py
      fuel_order_schemas.py
      fuel_truck_schemas.py
      permission_schemas.py
      role_schemas.py
      user_schemas.py
    services/
      __init__.py
      aircraft_service.py
      auth_service.py
      customer_service.py
      fuel_order_service.py
      fuel_truck_service.py
      permission_service.py
      role_service.py
      user_service.py
    utils/
      __init__.py
      auth.py
      decorators.py
      enhanced_auth_decorators.py
      rate_limiting.py
      README.md
    __init__.py
    app.py
    cli.py
    config.py
    extensions.py
    seeds.py
  DATABASE_SETUP.md
  docker-compose.yml
  Dockerfile
  entrypoint.sh
  reseed_database.sh
  setup.py
frontend/
  app/
    about/
      page.tsx
    actions/
      send-email.ts
    admin/
      customers/
        page.tsx
      dashboard/
        page.tsx
      fuel-trucks/
        loading.tsx
        page.tsx
      lst-management/
        loading.tsx
        page.tsx
      permissions/
        loading.tsx
        page.tsx
      users/
        loading.tsx
        page.tsx
        page.tsx.backup
        page.tsx.tmp
      layout.tsx
    components/
      access-denied.tsx
      aircraft-lookup.tsx
      customer-selector.tsx
      fee-calculator.tsx
      permission-action-button.tsx
      permission-aware.tsx
      permission-debug.tsx
      protected-route.tsx
    contexts/
      permission-context.tsx
    csr/
      dashboard/
        loading.tsx
        page.tsx
      export/
        loading.tsx
        page.tsx
      fuel-orders/
        [id]/
          loading.tsx
          page.tsx
        new/
          loading.tsx
          page.tsx
        loading.tsx
        page.tsx
      receipts/
        [id]/
          loading.tsx
          page.tsx
        loading.tsx
        page.tsx
      layout.tsx
    csr-login/
      loading.tsx
      page.tsx
    faq/
      loading.tsx
      page.tsx
    fueler/
      completed/
        page.tsx
      dashboard/
        loading.tsx
        page.tsx
      in-progress/
        page.tsx
      pending-orders/
        page.tsx
      receipts/
        [id]/
          loading.tsx
          page.tsx
      layout.tsx
    fueler-login/
      loading.tsx
      page.tsx
    login/
      page.tsx
    member/
      dashboard/
        loading.tsx
        page.tsx
    models/
      permission.ts
    privacy/
      page.tsx
    request-demo/
      page.tsx
    services/
      aircraft-service.ts
      api-config.ts
      auth-service.ts
      customer-service.ts
      fee-service.ts
      fuel-order-service.ts
      fuel-truck-service.ts
      lst-service.ts
      permission-service.ts
      receipt-service.ts
      user-service.ts
      utils.ts
      write_service.py
    styles/
      design-tokens.ts
    terms/
      page.tsx
    globals.css
    layout.tsx
    page.tsx
  components/
    dashboard/
      activity-card.tsx
      data-table.tsx
      stat-card.tsx
    layout/
      app-layout.tsx
      app-sidebar.tsx
      header.tsx
      sidebar.tsx
    ui/
      accordion.tsx
      alert-dialog.tsx
      alert.tsx
      aspect-ratio.tsx
      avatar.tsx
      badge.tsx
      breadcrumb.tsx
      button.tsx
      calendar.tsx
      card.tsx
      carousel.tsx
      chart.tsx
      checkbox.tsx
      collapsible.tsx
      command.tsx
      context-menu.tsx
      dialog.tsx
      drawer.tsx
      dropdown-menu.tsx
      form.tsx
      hover-card.tsx
      input-otp.tsx
      input.tsx
      label.tsx
      menubar.tsx
      navigation-menu.tsx
      pagination.tsx
      popover.tsx
      progress.tsx
      radio-group.tsx
      resizable.tsx
      scroll-area.tsx
      select.tsx
      separator.tsx
      sheet.tsx
      sidebar.tsx
      skeleton.tsx
      slider.tsx
      sonner.tsx
      switch.tsx
      table.tsx
      tabs.tsx
      textarea.tsx
      toast.tsx
      toaster.tsx
      toggle-group.tsx
      toggle.tsx
      tooltip.tsx
      use-mobile.tsx
      use-toast.ts
    analytics.tsx
    footer.tsx
    header.tsx
    page-transition.tsx
    stagewise-toolbar.tsx
    theme-provider.tsx
    theme-toggle.tsx
  hooks/
    use-mobile.tsx
    use-toast.ts
    usePermissions.ts
  next.config.mjs
  tailwind.config.ts

================================================================
Files
================================================================

================
File: backend/migrations/versions/6a7677d82b03_add_migration_tracking_fields_and_.py
================
"""Add migration tracking fields and enhanced user permission group assignments

Revision ID: 6a7677d82b03
Revises: 866cf231e9da
Create Date: 2025-05-29 23:46:31.021306

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '6a7677d82b03'
down_revision = '866cf231e9da'
branch_labels = None
depends_on = None


def upgrade():
    # Add created_by_migration field to permission_groups table
    op.add_column('permission_groups', sa.Column('created_by_migration', sa.Boolean(), nullable=False, server_default='false'))
    
    # Create enhanced user_permission_group_assignments table
    op.create_table('user_permission_group_assignments',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('permission_group_id', sa.Integer(), nullable=False),
        sa.Column('assigned_at', sa.DateTime(), nullable=False),
        sa.Column('assigned_by_user_id', sa.Integer(), nullable=True),
        sa.Column('assigned_by_migration', sa.Boolean(), nullable=False, server_default='false'),
        sa.Column('assignment_reason', sa.String(length=255), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=False, server_default='true'),
        sa.Column('expires_at', sa.DateTime(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['assigned_by_user_id'], ['users.id'], ),
        sa.ForeignKeyConstraint(['permission_group_id'], ['permission_groups.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('user_id', 'permission_group_id', name='unique_user_permission_group')
    )


def downgrade():
    # Drop enhanced user_permission_group_assignments table
    op.drop_table('user_permission_group_assignments')
    
    # Remove created_by_migration field from permission_groups table
    op.drop_column('permission_groups', 'created_by_migration')

================
File: backend/migrations/versions/866cf231e9da_add_permission_groups_and_user_.py
================
"""Add permission groups and user permissions for granular permission system

Revision ID: 866cf231e9da
Revises: d8897d7b926b
Create Date: 2025-05-26 22:54:21.172917

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '866cf231e9da'
down_revision = 'd8897d7b926b'
branch_labels = None
depends_on = None


def upgrade():
    # Add new columns to permissions table for resource-specific permissions
    op.add_column('permissions', sa.Column('resource_type', sa.String(length=50), nullable=True))
    op.add_column('permissions', sa.Column('action', sa.String(length=50), nullable=True))
    op.add_column('permissions', sa.Column('scope', sa.String(length=50), nullable=True))
    op.add_column('permissions', sa.Column('is_system_permission', sa.Boolean(), nullable=False, server_default='false'))
    op.add_column('permissions', sa.Column('is_active', sa.Boolean(), nullable=False, server_default='true'))
    op.add_column('permissions', sa.Column('requires_resource_context', sa.Boolean(), nullable=False, server_default='false'))

    # Create permission_groups table
    op.create_table('permission_groups',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('category', sa.String(length=50), nullable=True, default='custom'),
        sa.Column('parent_group_id', sa.Integer(), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=False, server_default='true'),
        sa.Column('is_system_group', sa.Boolean(), nullable=False, server_default='false'),
        sa.Column('sort_order', sa.Integer(), nullable=False, server_default='0'),
        sa.Column('created_by_user_id', sa.Integer(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], ),
        sa.ForeignKeyConstraint(['parent_group_id'], ['permission_groups.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_permission_groups_name'), 'permission_groups', ['name'], unique=True)

    # Create permission_group_permissions junction table
    op.create_table('permission_group_permissions',
        sa.Column('permission_group_id', sa.Integer(), nullable=False),
        sa.Column('permission_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['permission_group_id'], ['permission_groups.id'], ),
        sa.ForeignKeyConstraint(['permission_id'], ['permissions.id'], ),
        sa.PrimaryKeyConstraint('permission_group_id', 'permission_id')
    )

    # Create user_permission_groups junction table
    op.create_table('user_permission_groups',
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('permission_group_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['permission_group_id'], ['permission_groups.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('user_id', 'permission_group_id')
    )

    # Create user_permissions table for direct user-permission assignments
    op.create_table('user_permissions',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('permission_id', sa.Integer(), nullable=False),
        sa.Column('granted_by_user_id', sa.Integer(), nullable=True),
        sa.Column('granted_at', sa.DateTime(), nullable=False),
        sa.Column('resource_type', sa.String(length=50), nullable=True),
        sa.Column('resource_id', sa.String(length=100), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=False, server_default='true'),
        sa.Column('expires_at', sa.DateTime(), nullable=True),
        sa.Column('reason', sa.Text(), nullable=True),
        sa.Column('revoked_at', sa.DateTime(), nullable=True),
        sa.Column('revoked_by_user_id', sa.Integer(), nullable=True),
        sa.Column('revoked_reason', sa.Text(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['granted_by_user_id'], ['users.id'], ),
        sa.ForeignKeyConstraint(['permission_id'], ['permissions.id'], ),
        sa.ForeignKeyConstraint(['revoked_by_user_id'], ['users.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('user_id', 'permission_id', 'resource_type', 'resource_id', name='unique_user_permission_resource')
    )
    op.create_index(op.f('ix_user_permissions_permission_id'), 'user_permissions', ['permission_id'])
    op.create_index(op.f('ix_user_permissions_user_id'), 'user_permissions', ['user_id'])


def downgrade():
    # Drop user_permissions table
    op.drop_index(op.f('ix_user_permissions_user_id'), table_name='user_permissions')
    op.drop_index(op.f('ix_user_permissions_permission_id'), table_name='user_permissions')
    op.drop_table('user_permissions')
    
    # Drop junction tables
    op.drop_table('user_permission_groups')
    op.drop_table('permission_group_permissions')
    
    # Drop permission_groups table
    op.drop_index(op.f('ix_permission_groups_name'), table_name='permission_groups')
    op.drop_table('permission_groups')
    
    # Remove new columns from permissions table
    op.drop_column('permissions', 'requires_resource_context')
    op.drop_column('permissions', 'is_active')
    op.drop_column('permissions', 'is_system_permission')
    op.drop_column('permissions', 'scope')
    op.drop_column('permissions', 'action')
    op.drop_column('permissions', 'resource_type')

================
File: backend/migrations/versions/cfdd930e28a0_add_new_permissions_and_rename_truck_.py
================
"""add_new_permissions_and_rename_truck_permissions

Revision ID: cfdd930e28a0
Revises: 6a7677d82b03
Create Date: 2025-05-31 05:18:45.710370

"""
from alembic import op
import sqlalchemy as sa
from datetime import datetime


# revision identifiers, used by Alembic.
revision = 'cfdd930e28a0'
down_revision = '6a7677d82b03'
branch_labels = None
depends_on = None


def upgrade():
    # Get current timestamp for consistency
    now = datetime.utcnow()
    
    # Add new dashboard access permissions
    op.execute(f"""
        INSERT INTO permissions (name, description, category, created_at, updated_at) VALUES
        ('ACCESS_ADMIN_DASHBOARD', 'Allows access to admin dashboard', 'dashboard_access', '{now}', '{now}'),
        ('ACCESS_CSR_DASHBOARD', 'Allows access to CSR dashboard', 'dashboard_access', '{now}', '{now}'),
        ('ACCESS_FUELER_DASHBOARD', 'Allows access to fueler dashboard', 'dashboard_access', '{now}', '{now}'),
        ('ACCESS_MEMBER_DASHBOARD', 'Allows access to member dashboard', 'dashboard_access', '{now}', '{now}')
    """)
    
    # Add new operational permission
    op.execute(f"""
        INSERT INTO permissions (name, description, category, created_at, updated_at) VALUES
        ('PERFORM_FUELING_TASK', 'Allows performing fueling operations and task management', 'fuel_orders', '{now}', '{now}')
    """)
    
    # Add new billing/fees permissions
    op.execute(f"""
        INSERT INTO permissions (name, description, category, created_at, updated_at) VALUES
        ('VIEW_BILLING_INFO', 'Allows viewing billing information and fee calculations', 'billing', '{now}', '{now}'),
        ('CALCULATE_FEES', 'Allows calculating fees and charges', 'billing', '{now}', '{now}')
    """)
    
    # Add new fuel receipt system permissions
    op.execute(f"""
        INSERT INTO permissions (name, description, category, created_at, updated_at) VALUES
        ('VIEW_ALL_RECEIPTS', 'Allows viewing all fuel receipts', 'receipts', '{now}', '{now}'),
        ('VIEW_OWN_RECEIPTS', 'Allows viewing own fuel receipts', 'receipts', '{now}', '{now}'),
        ('MANAGE_RECEIPTS', 'Allows creating, editing, and managing fuel receipts', 'receipts', '{now}', '{now}'),
        ('EXPORT_RECEIPTS_CSV', 'Allows exporting receipt data to CSV', 'receipts', '{now}', '{now}')
    """)
    
    # Rename existing truck permissions for consistency
    op.execute(f"""
        UPDATE permissions 
        SET name = 'VIEW_FUEL_TRUCKS', description = 'Allows viewing fuel truck list', updated_at = '{now}'
        WHERE name = 'VIEW_TRUCKS'
    """)
    
    op.execute(f"""
        UPDATE permissions 
        SET name = 'MANAGE_FUEL_TRUCKS', description = 'Allows creating, updating, deleting fuel trucks', updated_at = '{now}'
        WHERE name = 'MANAGE_TRUCKS'
    """)


def downgrade():
    # Revert truck permission name changes
    now = datetime.utcnow()
    
    op.execute(f"""
        UPDATE permissions 
        SET name = 'VIEW_TRUCKS', description = 'Allows viewing fuel truck list', updated_at = '{now}'
        WHERE name = 'VIEW_FUEL_TRUCKS'
    """)
    
    op.execute(f"""
        UPDATE permissions 
        SET name = 'MANAGE_TRUCKS', description = 'Allows creating, updating, deleting fuel trucks', updated_at = '{now}'
        WHERE name = 'MANAGE_FUEL_TRUCKS'
    """)
    
    # Remove new permissions (in reverse order)
    op.execute("DELETE FROM permissions WHERE name IN ('EXPORT_RECEIPTS_CSV', 'MANAGE_RECEIPTS', 'VIEW_OWN_RECEIPTS', 'VIEW_ALL_RECEIPTS')")
    op.execute("DELETE FROM permissions WHERE name IN ('CALCULATE_FEES', 'VIEW_BILLING_INFO')")
    op.execute("DELETE FROM permissions WHERE name = 'PERFORM_FUELING_TASK'")
    op.execute("DELETE FROM permissions WHERE name IN ('ACCESS_MEMBER_DASHBOARD', 'ACCESS_FUELER_DASHBOARD', 'ACCESS_CSR_DASHBOARD', 'ACCESS_ADMIN_DASHBOARD')")

================
File: backend/src/migration_scripts/__init__.py
================
# Migration Scripts Package
"""
Migration scripts for transitioning from role-based to permission-based system.
"""

================
File: backend/src/migration_scripts/permission_migration.py
================
"""
Permission System Migration Script
Migrates from role-based to permission-based system while maintaining backward compatibility.
"""

from datetime import datetime
from sqlalchemy import text
from sqlalchemy.orm import sessionmaker
from src.extensions import db
from src.models import User, Role, Permission, PermissionGroup, UserPermission
from src.models.user_permission_group import UserPermissionGroup
from src.models.permission_group import permission_group_permissions
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class PermissionMigration:
    """Handles migration from role-based to permission-based system."""
    
    def __init__(self):
        self.session = db.session
        self.migration_log = []
        
    def log_action(self, action, details=None):
        """Log migration actions for audit trail."""
        log_entry = {
            'timestamp': datetime.utcnow(),
            'action': action,
            'details': details or {}
        }
        self.migration_log.append(log_entry)
        logger.info(f"Migration: {action} - {details}")
    
    def create_default_permission_groups(self):
        """Create default permission groups based on existing roles."""
        self.log_action("Starting permission group creation")
        
        # Define default permission groups with their permissions
        default_groups = [
            {
                'name': 'Administrator_Default_Permissions',
                'description': 'Full administrative access with all permissions',
                'category': 'admin',
                'permissions': [
                    'access_admin_panel', 'manage_permission_groups', 'assign_direct_permissions', 'view_audit_trail',
                    'view_user_list', 'view_user_profile', 'create_user', 'edit_user_profile', 'deactivate_user', 'assign_permissions',
                    'view_fuel_orders', 'create_fuel_order', 'edit_any_order', 'delete_fuel_order', 'review_orders',
                    'access_csr_module', 'export_order_data', 'view_order_statistics',
                    'access_fueler_module', 'start_fueling_task', 'update_fueling_status', 'complete_own_order',
                    'manage_fuel_trucks', 'manage_aircraft_data', 'manage_customer_data'
                ]
            },
            {
                'name': 'CSR_Default_Permissions',
                'description': 'Customer Service Representative permissions for order management',
                'category': 'csr',
                'permissions': [
                    'access_csr_module', 'view_fuel_orders', 'create_fuel_order', 'edit_own_order',
                    'export_order_data', 'view_order_statistics', 'review_orders'
                ]
            },
            {
                'name': 'LST_Default_Permissions',
                'description': 'Line Service Technician permissions for fueling operations',
                'category': 'fueler',
                'permissions': [
                    'access_fueler_module', 'view_fuel_orders', 'start_fueling_task',
                    'update_fueling_status', 'complete_own_order'
                ]
            },
            {
                'name': 'Member_Default_Permissions',
                'description': 'Basic member permissions for viewing own orders',
                'category': 'member',
                'permissions': [
                    'view_fuel_orders', 'create_fuel_order', 'edit_own_order'
                ]
            }
        ]
        
        created_groups = []
        
        for group_data in default_groups:
            # Check if group already exists
            existing_group = PermissionGroup.query.filter_by(name=group_data['name']).first()
            if existing_group:
                self.log_action(f"Permission group already exists: {group_data['name']}")
                continue
            
            # Create new permission group
            new_group = PermissionGroup(
                name=group_data['name'],
                description=group_data['description'],
                category=group_data['category'],
                is_system_group=True,
                created_by_migration=True
            )
            
            self.session.add(new_group)
            self.session.flush()  # Get the ID
            
            # Add permissions to the group
            for perm_name in group_data['permissions']:
                permission = Permission.query.filter_by(name=perm_name).first()
                if permission:
                    # Check if association already exists
                    existing_assoc = self.session.query(permission_group_permissions).filter_by(
                        permission_group_id=new_group.id,
                        permission_id=permission.id
                    ).first()
                    
                    if not existing_assoc:
                        # Create association
                        stmt = permission_group_permissions.insert().values(
                            permission_group_id=new_group.id,
                            permission_id=permission.id
                        )
                        self.session.execute(stmt)
                else:
                    self.log_action(f"Warning: Permission '{perm_name}' not found for group '{group_data['name']}'")
            
            created_groups.append(new_group)
            self.log_action(f"Created permission group: {group_data['name']}")
        
        self.session.commit()
        self.log_action(f"Created {len(created_groups)} permission groups")
        return created_groups
    
    def migrate_user_permissions(self):
        """Migrate users from roles to permission groups and direct permissions."""
        self.log_action("Starting user permission migration")
        
        # Get all users with roles
        users_with_roles = User.query.join(User.roles).all()
        migrated_users = 0
        
        # Role to permission group mapping
        role_to_group_mapping = {
            'System Administrator': 'Administrator_Default_Permissions',
            'Customer Service Representative': 'CSR_Default_Permissions',
            'Line Service Technician': 'LST_Default_Permissions',
            'Member': 'Member_Default_Permissions'
        }
        
        for user in users_with_roles:
            user_roles = list(user.roles)
            self.log_action(f"Migrating user: {user.username}", {
                'user_id': user.id,
                'current_roles': [role.name for role in user_roles]
            })
            
            # Assign permission groups based on roles
            for role in user_roles:
                group_name = role_to_group_mapping.get(role.name)
                if group_name:
                    permission_group = PermissionGroup.query.filter_by(name=group_name).first()
                    if permission_group:
                        # Check if user is already in this group
                        existing_assignment = UserPermissionGroup.query.filter_by(
                            user_id=user.id,
                            permission_group_id=permission_group.id
                        ).first()
                        
                        if not existing_assignment:
                            user_group_assignment = UserPermissionGroup(
                                user_id=user.id,
                                permission_group_id=permission_group.id,
                                assigned_by_migration=True,
                                assigned_at=datetime.utcnow()
                            )
                            self.session.add(user_group_assignment)
                            
                            self.log_action(f"Assigned user to permission group", {
                                'user_id': user.id,
                                'group_name': group_name,
                                'original_role': role.name
                            })
                        else:
                            self.log_action(f"User already in permission group: {group_name}")
                else:
                    self.log_action(f"Warning: No permission group mapping for role: {role.name}")
            
            migrated_users += 1
        
        self.session.commit()
        self.log_action(f"Migrated {migrated_users} users to permission groups")
        return migrated_users
    
    def create_enhanced_permissions(self):
        """Create enhanced granular permissions for the new system."""
        self.log_action("Creating enhanced granular permissions")
        
        enhanced_permissions = [
            # Enhanced Fuel Order Permissions
            {'name': 'view_own_orders', 'description': 'View own fuel orders only', 'category': 'fuel_orders', 'resource_type': 'fuel_order', 'action': 'read', 'scope': 'own'},
            {'name': 'view_all_orders', 'description': 'View all fuel orders', 'category': 'fuel_orders', 'resource_type': 'fuel_order', 'action': 'read', 'scope': 'any'},
            {'name': 'create_fuel_order', 'description': 'Create new fuel orders', 'category': 'fuel_orders', 'resource_type': 'fuel_order', 'action': 'create', 'scope': 'any'},
            {'name': 'edit_own_orders', 'description': 'Edit own fuel orders', 'category': 'fuel_orders', 'resource_type': 'fuel_order', 'action': 'update', 'scope': 'own'},
            {'name': 'edit_any_order', 'description': 'Edit any fuel order', 'category': 'fuel_orders', 'resource_type': 'fuel_order', 'action': 'update', 'scope': 'any'},
            {'name': 'delete_fuel_order', 'description': 'Delete fuel orders', 'category': 'fuel_orders', 'resource_type': 'fuel_order', 'action': 'delete', 'scope': 'any'},
            {'name': 'complete_own_order', 'description': 'Complete own assigned orders', 'category': 'fuel_orders', 'resource_type': 'fuel_order', 'action': 'complete', 'scope': 'own'},
            {'name': 'review_orders', 'description': 'Review and approve orders', 'category': 'fuel_orders', 'resource_type': 'fuel_order', 'action': 'review', 'scope': 'any'},
            
            # Enhanced User Management Permissions
            {'name': 'view_user_list', 'description': 'View list of users', 'category': 'users', 'resource_type': 'user', 'action': 'read', 'scope': 'any'},
            {'name': 'view_user_profile', 'description': 'View user profile details', 'category': 'users', 'resource_type': 'user', 'action': 'read', 'scope': 'any'},
            {'name': 'create_user', 'description': 'Create new users', 'category': 'users', 'resource_type': 'user', 'action': 'create', 'scope': 'any'},
            {'name': 'edit_user_profile', 'description': 'Edit user profile information', 'category': 'users', 'resource_type': 'user', 'action': 'update', 'scope': 'any'},
            {'name': 'deactivate_user', 'description': 'Deactivate user accounts', 'category': 'users', 'resource_type': 'user', 'action': 'deactivate', 'scope': 'any'},
            {'name': 'assign_permissions', 'description': 'Assign permissions to users', 'category': 'users', 'resource_type': 'user', 'action': 'manage_permissions', 'scope': 'any'},
            
            # Enhanced Admin Permissions
            {'name': 'access_admin_panel', 'description': 'Access administrative interface', 'category': 'admin', 'resource_type': 'global', 'action': 'access', 'scope': 'any'},
            {'name': 'manage_permission_groups', 'description': 'Create and manage permission groups', 'category': 'admin', 'resource_type': 'permission_group', 'action': 'manage', 'scope': 'any'},
            {'name': 'assign_direct_permissions', 'description': 'Assign direct permissions to users', 'category': 'admin', 'resource_type': 'user_permission', 'action': 'manage', 'scope': 'any'},
            {'name': 'view_audit_trail', 'description': 'View permission audit trail', 'category': 'admin', 'resource_type': 'audit', 'action': 'read', 'scope': 'any'},
            
            # Enhanced CSR Permissions
            {'name': 'access_csr_module', 'description': 'Access CSR dashboard and functions', 'category': 'csr', 'resource_type': 'global', 'action': 'access', 'scope': 'any'},
            {'name': 'export_order_data', 'description': 'Export order data to CSV/Excel', 'category': 'csr', 'resource_type': 'fuel_order', 'action': 'export', 'scope': 'any'},
            {'name': 'view_order_statistics', 'description': 'View order statistics and reports', 'category': 'csr', 'resource_type': 'fuel_order', 'action': 'view_stats', 'scope': 'any'},
            
            # Enhanced Fueler Permissions
            {'name': 'access_fueler_module', 'description': 'Access fueler dashboard and functions', 'category': 'fueler', 'resource_type': 'global', 'action': 'access', 'scope': 'any'},
            {'name': 'start_fueling_task', 'description': 'Start assigned fueling tasks', 'category': 'fueler', 'resource_type': 'fuel_order', 'action': 'start', 'scope': 'own'},
            {'name': 'update_fueling_status', 'description': 'Update status of fueling tasks', 'category': 'fueler', 'resource_type': 'fuel_order', 'action': 'update_status', 'scope': 'own'},
            
            # Resource Management Permissions
            {'name': 'manage_fuel_trucks', 'description': 'Manage fuel truck inventory', 'category': 'resources', 'resource_type': 'fuel_truck', 'action': 'manage', 'scope': 'any'},
            {'name': 'manage_aircraft_data', 'description': 'Manage aircraft information', 'category': 'resources', 'resource_type': 'aircraft', 'action': 'manage', 'scope': 'any'},
            {'name': 'manage_customer_data', 'description': 'Manage customer information', 'category': 'resources', 'resource_type': 'customer', 'action': 'manage', 'scope': 'any'},
        ]
        
        created_permissions = []
        
        for perm_data in enhanced_permissions:
            # Check if permission already exists
            existing_perm = Permission.query.filter_by(name=perm_data['name']).first()
            if existing_perm:
                self.log_action(f"Enhanced permission already exists: {perm_data['name']}")
                continue
            
            # Create new enhanced permission
            new_permission = Permission(
                name=perm_data['name'],
                description=perm_data['description'],
                category=perm_data['category'],
                resource_type=perm_data.get('resource_type'),
                action=perm_data.get('action'),
                scope=perm_data.get('scope'),
                is_system_permission=True,
                requires_resource_context=perm_data.get('scope') == 'own'
            )
            
            self.session.add(new_permission)
            created_permissions.append(new_permission)
            
            self.log_action(f"Created enhanced permission: {perm_data['name']}")
        
        self.session.commit()
        self.log_action(f"Created {len(created_permissions)} enhanced permissions")
        return created_permissions
    
    def validate_migration(self):
        """Validate the migration integrity."""
        self.log_action("Starting migration validation")
        
        validation_results = {
            'users_with_groups': 0,
            'users_without_groups': 0,
            'permission_groups_created': 0,
            'enhanced_permissions_created': 0,
            'validation_errors': []
        }
        
        # Check users have permission groups
        all_users = User.query.all()
        for user in all_users:
            user_groups = UserPermissionGroup.query.filter_by(user_id=user.id).count()
            if user_groups > 0:
                validation_results['users_with_groups'] += 1
            else:
                validation_results['users_without_groups'] += 1
                validation_results['validation_errors'].append(f"User {user.username} has no permission groups")
        
        # Count permission groups
        validation_results['permission_groups_created'] = PermissionGroup.query.filter_by(created_by_migration=True).count()
        
        # Count enhanced permissions
        validation_results['enhanced_permissions_created'] = Permission.query.filter_by(is_system_permission=True).count()
        
        self.log_action("Migration validation completed", validation_results)
        return validation_results
    
    def run_full_migration(self):
        """Run the complete migration process."""
        self.log_action("Starting full permission system migration")
        
        try:
            # Step 1: Create enhanced permissions
            enhanced_permissions = self.create_enhanced_permissions()
            
            # Step 2: Create default permission groups
            permission_groups = self.create_default_permission_groups()
            
            # Step 3: Migrate user permissions
            migrated_users = self.migrate_user_permissions()
            
            # Step 4: Validate migration
            validation_results = self.validate_migration()
            
            self.log_action("Migration completed successfully", {
                'enhanced_permissions': len(enhanced_permissions),
                'permission_groups': len(permission_groups),
                'migrated_users': migrated_users,
                'validation': validation_results
            })
            
            return {
                'success': True,
                'migration_log': self.migration_log,
                'validation_results': validation_results
            }
            
        except Exception as e:
            self.log_action(f"Migration failed: {str(e)}")
            self.session.rollback()
            return {
                'success': False,
                'error': str(e),
                'migration_log': self.migration_log
            }
    
    def generate_migration_report(self):
        """Generate a detailed migration report."""
        report = {
            'migration_timestamp': datetime.utcnow().isoformat(),
            'total_actions': len(self.migration_log),
            'actions': self.migration_log,
            'summary': {
                'permission_groups': PermissionGroup.query.filter_by(created_by_migration=True).count(),
                'enhanced_permissions': Permission.query.filter_by(is_system_permission=True).count(),
                'users_migrated': UserPermissionGroup.query.filter_by(assigned_by_migration=True).count()
            }
        }
        return report


def run_migration():
    """Main function to run the permission migration."""
    migration = PermissionMigration()
    result = migration.run_full_migration()
    
    if result['success']:
        print("✅ Migration completed successfully!")
        report = migration.generate_migration_report()
        print(f"📊 Migration Report:")
        print(f"   - Permission Groups Created: {report['summary']['permission_groups']}")
        print(f"   - Enhanced Permissions Created: {report['summary']['enhanced_permissions']}")
        print(f"   - Users Migrated: {report['summary']['users_migrated']}")
    else:
        print(f"❌ Migration failed: {result['error']}")
    
    return result


if __name__ == "__main__":
    run_migration()

================
File: backend/src/models/permission_group.py
================
from datetime import datetime
from sqlalchemy import Integer, String, Text, DateTime, Boolean, ForeignKey
from ..extensions import db

# Junction table for permission group to permission relationships
permission_group_permissions = db.Table('permission_group_permissions',
    db.Column('permission_group_id', Integer, ForeignKey('permission_groups.id'), primary_key=True),
    db.Column('permission_id', Integer, ForeignKey('permissions.id'), primary_key=True)
)

# Junction table for user to permission group relationships
user_permission_groups = db.Table('user_permission_groups',
    db.Column('user_id', Integer, ForeignKey('users.id'), primary_key=True),
    db.Column('permission_group_id', Integer, ForeignKey('permission_groups.id'), primary_key=True)
)

class PermissionGroup(db.Model):
    """
    Permission groups provide template functionality for organizing permissions.
    They replace the rigid role system with flexible, composable permission sets.
    """
    __tablename__ = 'permission_groups'

    id = db.Column(Integer, primary_key=True)
    name = db.Column(String(100), unique=True, nullable=False, index=True)
    description = db.Column(Text, nullable=True)
    
    # Group categorization and hierarchy
    category = db.Column(String(50), nullable=True, default='custom')  # e.g., 'system', 'department', 'custom'
    parent_group_id = db.Column(Integer, ForeignKey('permission_groups.id'), nullable=True)
    
    # Group status and metadata
    is_active = db.Column(Boolean, default=True, nullable=False)
    is_system_group = db.Column(Boolean, default=False, nullable=False)  # System groups cannot be deleted
    sort_order = db.Column(Integer, default=0, nullable=False)  # For UI ordering
    created_by_migration = db.Column(Boolean, default=False, nullable=False)  # Track migration-created groups
    
    # Audit fields
    created_by_user_id = db.Column(Integer, ForeignKey('users.id'), nullable=True)
    created_at = db.Column(DateTime, default=datetime.utcnow, nullable=False)
    updated_at = db.Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)

    # Relationships
    permissions = db.relationship(
        'Permission',
        secondary=permission_group_permissions,
        backref=db.backref('permission_groups', lazy='dynamic'),
        lazy='dynamic'
    )
    
    users = db.relationship(
        'User',
        secondary=user_permission_groups,
        backref=db.backref('permission_groups', lazy='dynamic'),
        lazy='dynamic'
    )
    
    # Self-referential relationship for hierarchy
    parent_group = db.relationship('PermissionGroup', remote_side=[id], backref='child_groups')
    created_by = db.relationship('User', foreign_keys=[created_by_user_id])

    def get_all_permissions(self, include_inherited=True):
        """
        Get all permissions for this group, optionally including inherited permissions.
        
        Args:
            include_inherited (bool): Whether to include permissions from parent groups
            
        Returns:
            list: List of Permission objects
        """
        permissions = list(self.permissions.all())
        
        if include_inherited and self.parent_group:
            parent_permissions = self.parent_group.get_all_permissions(include_inherited=True)
            # Combine and deduplicate
            permission_ids = {p.id for p in permissions}
            for perm in parent_permissions:
                if perm.id not in permission_ids:
                    permissions.append(perm)
                    permission_ids.add(perm.id)
        
        return permissions

    def has_permission(self, permission_name, include_inherited=True):
        """
        Check if this group has a specific permission.
        
        Args:
            permission_name (str): Name of the permission to check
            include_inherited (bool): Whether to check parent groups
            
        Returns:
            bool: True if the group has the permission
        """
        # Check direct permissions
        if self.permissions.filter_by(name=permission_name).first():
            return True
        
        # Check inherited permissions
        if include_inherited and self.parent_group:
            return self.parent_group.has_permission(permission_name, include_inherited=True)
        
        return False

    def add_permission(self, permission):
        """Add a permission to this group."""
        if not self.permissions.filter_by(id=permission.id).first():
            self.permissions.append(permission)

    def remove_permission(self, permission):
        """Remove a permission from this group."""
        if self.permissions.filter_by(id=permission.id).first():
            self.permissions.remove(permission)

    def get_user_count(self):
        """Get the number of users assigned to this group."""
        return self.users.count()

    def to_dict(self, include_permissions=False, include_users=False):
        """Convert to dictionary for API responses."""
        result = {
            'id': self.id,
            'name': self.name,
            'description': self.description,
            'category': self.category,
            'parent_group_id': self.parent_group_id,
            'is_active': self.is_active,
            'is_system_group': self.is_system_group,
            'sort_order': self.sort_order,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'user_count': self.get_user_count()
        }
        
        if include_permissions:
            result['permissions'] = [
                {
                    'id': p.id,
                    'name': p.name,
                    'description': p.description,
                    'category': p.category
                }
                for p in self.get_all_permissions()
            ]
            result['direct_permissions'] = [
                {
                    'id': p.id,
                    'name': p.name,
                    'description': p.description,
                    'category': p.category
                }
                for p in self.permissions.all()
            ]
        
        if include_users:
            result['users'] = [
                {
                    'id': u.id,
                    'username': u.username,
                    'email': u.email,
                    'name': u.name
                }
                for u in self.users.all()
            ]
        
        return result

    def __repr__(self):
        return f'<PermissionGroup {self.name}>'

================
File: backend/src/models/user_permission_group.py
================
from datetime import datetime
from sqlalchemy import Integer, ForeignKey, DateTime, Boolean, String
from ..extensions import db

class UserPermissionGroup(db.Model):
    """
    Enhanced junction table for user to permission group relationships.
    Provides additional metadata for tracking assignments and migrations.
    """
    __tablename__ = 'user_permission_group_assignments'

    id = db.Column(Integer, primary_key=True)
    user_id = db.Column(Integer, ForeignKey('users.id'), nullable=False)
    permission_group_id = db.Column(Integer, ForeignKey('permission_groups.id'), nullable=False)
    
    # Assignment metadata
    assigned_at = db.Column(DateTime, default=datetime.utcnow, nullable=False)
    assigned_by_user_id = db.Column(Integer, ForeignKey('users.id'), nullable=True)
    assigned_by_migration = db.Column(Boolean, default=False, nullable=False)
    
    # Assignment context
    assignment_reason = db.Column(String(255), nullable=True)  # e.g., "Role migration", "Manual assignment"
    is_active = db.Column(Boolean, default=True, nullable=False)
    
    # Expiration support (optional)
    expires_at = db.Column(DateTime, nullable=True)
    
    # Audit trail
    created_at = db.Column(DateTime, default=datetime.utcnow, nullable=False)
    updated_at = db.Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)

    # Relationships with explicit foreign_keys to resolve ambiguity
    user = db.relationship('User', foreign_keys=[user_id], backref='permission_group_assignments')
    permission_group = db.relationship('PermissionGroup', backref='user_assignments')
    assigned_by = db.relationship('User', foreign_keys=[assigned_by_user_id])

    # Unique constraint to prevent duplicate assignments
    __table_args__ = (
        db.UniqueConstraint('user_id', 'permission_group_id', name='unique_user_permission_group'),
    )

    def is_expired(self):
        """Check if this assignment has expired."""
        if self.expires_at is None:
            return False
        return datetime.utcnow() > self.expires_at

    def to_dict(self):
        """Convert to dictionary for API responses."""
        return {
            'id': self.id,
            'user_id': self.user_id,
            'permission_group_id': self.permission_group_id,
            'assigned_at': self.assigned_at.isoformat() if self.assigned_at else None,
            'assigned_by_user_id': self.assigned_by_user_id,
            'assigned_by_migration': self.assigned_by_migration,
            'assignment_reason': self.assignment_reason,
            'is_active': self.is_active,
            'expires_at': self.expires_at.isoformat() if self.expires_at else None,
            'is_expired': self.is_expired()
        }

    def __repr__(self):
        return f'<UserPermissionGroup user_id={self.user_id} group_id={self.permission_group_id}>'

================
File: backend/src/models/user_permission.py
================
from datetime import datetime
from sqlalchemy import Integer, String, ForeignKey, DateTime, Boolean, Text
from ..extensions import db

class UserPermission(db.Model):
    """
    Direct user-to-permission assignments for granular permission control.
    This allows users to have permissions beyond their role-based permissions.
    """
    __tablename__ = 'user_permissions'

    id = db.Column(Integer, primary_key=True)
    user_id = db.Column(Integer, ForeignKey('users.id'), nullable=False, index=True)
    permission_id = db.Column(Integer, ForeignKey('permissions.id'), nullable=False, index=True)
    
    # Permission source tracking
    granted_by_user_id = db.Column(Integer, ForeignKey('users.id'), nullable=True)
    granted_at = db.Column(DateTime, default=datetime.utcnow, nullable=False)
    
    # Permission scope and context
    resource_type = db.Column(String(50), nullable=True)  # e.g., 'fuel_order', 'user', 'aircraft'
    resource_id = db.Column(String(100), nullable=True)   # specific resource ID or 'own' for user's own resources
    
    # Permission status
    is_active = db.Column(Boolean, default=True, nullable=False)
    expires_at = db.Column(DateTime, nullable=True)  # Optional expiration for temporary permissions
    
    # Audit trail
    reason = db.Column(Text, nullable=True)  # Reason for granting this permission
    revoked_at = db.Column(DateTime, nullable=True)
    revoked_by_user_id = db.Column(Integer, ForeignKey('users.id'), nullable=True)
    revoked_reason = db.Column(Text, nullable=True)
    
    created_at = db.Column(DateTime, default=datetime.utcnow, nullable=False)
    updated_at = db.Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)

    # Relationships
    user = db.relationship('User', foreign_keys=[user_id], backref='direct_permissions')
    permission = db.relationship('Permission', backref='user_assignments')
    granted_by = db.relationship('User', foreign_keys=[granted_by_user_id])
    revoked_by = db.relationship('User', foreign_keys=[revoked_by_user_id])

    # Unique constraint to prevent duplicate assignments
    __table_args__ = (
        db.UniqueConstraint('user_id', 'permission_id', 'resource_type', 'resource_id', 
                          name='unique_user_permission_resource'),
    )

    def is_valid(self):
        """Check if this permission assignment is currently valid."""
        if not self.is_active:
            return False
        if self.revoked_at:
            return False
        if self.expires_at and self.expires_at < datetime.utcnow():
            return False
        return True

    def revoke(self, revoked_by_user_id, reason=None):
        """Revoke this permission assignment."""
        self.is_active = False
        self.revoked_at = datetime.utcnow()
        self.revoked_by_user_id = revoked_by_user_id
        self.revoked_reason = reason

    def to_dict(self):
        """Convert to dictionary for API responses."""
        return {
            'id': self.id,
            'user_id': self.user_id,
            'permission_id': self.permission_id,
            'permission_name': self.permission.name if self.permission else None,
            'resource_type': self.resource_type,
            'resource_id': self.resource_id,
            'is_active': self.is_active,
            'granted_at': self.granted_at.isoformat() if self.granted_at else None,
            'expires_at': self.expires_at.isoformat() if self.expires_at else None,
            'granted_by_user_id': self.granted_by_user_id,
            'reason': self.reason,
            'is_valid': self.is_valid()
        }

    def __repr__(self):
        return f'<UserPermission user_id={self.user_id} permission={self.permission.name if self.permission else self.permission_id}>'

================
File: backend/src/routes/auth.py
================
from flask import g, jsonify
from flask_jwt_extended import jwt_required
from flask_restful import Resource
from flask import current_app

@auth_bp.route('/me/permissions', methods=['GET'])
@token_required
def get_current_user_permissions():
    """
    Get effective permissions for the current authenticated user.
    Used by frontend PermissionContext to load user permissions.
    """
    try:
        user_id = g.current_user.id
        
        # Import here to avoid circular imports
        from ..services.permission_service import PermissionService
        
        # Get effective permissions with resource context
        effective_permissions = PermissionService.get_user_effective_permissions(
            user_id, include_resource_context=True
        )
        
        # Get permission summary for UI display
        summary = PermissionService.get_permission_summary(user_id)
        
        # Create a simplified list for frontend consumption
        permission_list = list(effective_permissions.keys())
        
        return jsonify({
            'user_id': user_id,
            'username': g.current_user.username,
            'permissions': permission_list,
            'effective_permissions': effective_permissions,
            'summary': summary,
            'total_permissions': len(effective_permissions)
        }), 200
        
    except Exception as e:
        current_app.logger.error(f"Error retrieving user permissions: {str(e)}")
        return jsonify({'error': 'Failed to retrieve user permissions'}), 500

================
File: backend/src/routes/enhanced_fuel_order_routes_example.py
================
"""
Example implementation showing how to update fuel order routes 
to use the enhanced permission system with resource-specific checking.

This file demonstrates the migration from simple permission decorators
to the new granular permission system.
"""

from flask import Blueprint, request, jsonify, g, current_app
from ..utils.enhanced_auth_decorators import (
    require_permission, 
    require_any_permission, 
    require_permission_or_ownership,
    get_permission_context,
    csr_required,
    fueler_required
)
from ..services.fuel_order_service import FuelOrderService

# Create the blueprint for enhanced fuel order routes
enhanced_fuel_order_bp = Blueprint('enhanced_fuel_order_bp', __name__)

# Example 1: Global permission for viewing order statistics
@enhanced_fuel_order_bp.route('/stats/status-counts', methods=['GET'])
@require_permission('view_order_statistics')
def get_status_counts():
    """
    Get fuel order status counts.
    Requires global 'view_order_statistics' permission.
    """
    try:
        counts, message, status_code = FuelOrderService.get_status_counts()
        if counts is not None:
            return jsonify({"message": message, "counts": counts}), status_code
        else:
            return jsonify({"error": message}), status_code
    except Exception as e:
        current_app.logger.error(f"Error in get_status_counts: {str(e)}")
        return jsonify({"error": "Internal server error"}), 500

# Example 2: Creating fuel orders with granular permissions
@enhanced_fuel_order_bp.route('', methods=['POST'])
@require_permission('create_fuel_order')
def create_fuel_order():
    """
    Create a new fuel order.
    Requires 'create_fuel_order' permission.
    """
    data = request.get_json()
    
    # Get permission context for additional checks
    perm_ctx = get_permission_context()
    
    # Example: Check if user can assign specific LST users
    if data.get('assigned_lst_user_id') and perm_ctx:
        if not perm_ctx.has_permission('assign_lst_to_orders'):
            # User can only assign themselves if they're an LST
            if not perm_ctx.has_permission('perform_fueling'):
                return jsonify({
                    'error': 'You can only assign yourself to fuel orders'
                }), 403
            # Force assignment to current user
            data['assigned_lst_user_id'] = g.permission_context['user_id']
    
    try:
        order, message, status_code = FuelOrderService.create_fuel_order(data)
        if order:
            return jsonify({
                "message": message, 
                "fuel_order": order.to_dict()
            }), status_code
        else:
            return jsonify({"error": message}), status_code
    except Exception as e:
        current_app.logger.error(f"Error creating fuel order: {str(e)}")
        return jsonify({"error": "Failed to create fuel order"}), 500

# Example 3: Viewing specific fuel orders with resource-specific permissions
@enhanced_fuel_order_bp.route('/<int:order_id>', methods=['GET'])
@require_permission_or_ownership('view_any_fuel_order', 'fuel_order', 'order_id')
def get_fuel_order(order_id):
    """
    Get a specific fuel order.
    Allows access if user has 'view_any_fuel_order' permission OR owns the order.
    """
    try:
        order, message, status_code = FuelOrderService.get_fuel_order_by_id(order_id)
        if order:
            # Add access reason to response for debugging
            access_reason = getattr(g, 'access_reason', 'unknown')
            response_data = {
                "fuel_order": order.to_dict(),
                "access_granted_by": access_reason
            }
            return jsonify(response_data), status_code
        else:
            return jsonify({"error": message}), status_code
    except Exception as e:
        current_app.logger.error(f"Error retrieving fuel order {order_id}: {str(e)}")
        return jsonify({"error": "Failed to retrieve fuel order"}), 500

# Example 4: Updating fuel order status with multiple permission options
@enhanced_fuel_order_bp.route('/<int:order_id>/status', methods=['PATCH'])
@require_any_permission('update_fuel_order_status', 'manage_fuel_orders', 'perform_fueling')
def update_fuel_order_status(order_id):
    """
    Update fuel order status.
    Allows access with any of: update_fuel_order_status, manage_fuel_orders, or perform_fueling.
    """
    data = request.get_json()
    new_status = data.get('status')
    
    # Get permission context for granular checks
    perm_ctx = get_permission_context()
    granted_permission = getattr(g, 'granted_permission', None)
    
    # Apply business rules based on which permission was granted
    if granted_permission == 'perform_fueling':
        # Fuelers can only update to specific statuses
        allowed_statuses = ['in_progress', 'completed']
        if new_status not in allowed_statuses:
            return jsonify({
                'error': f'Fuelers can only set status to: {", ".join(allowed_statuses)}'
            }), 403
        
        # Fuelers can only update orders assigned to them
        order, _, _ = FuelOrderService.get_fuel_order_by_id(order_id)
        if order and order.assigned_lst_user_id != g.permission_context['user_id']:
            return jsonify({
                'error': 'You can only update orders assigned to you'
            }), 403
    
    try:
        order, message, status_code = FuelOrderService.update_fuel_order_status(
            order_id, new_status
        )
        if order:
            return jsonify({
                "message": message, 
                "fuel_order": order.to_dict(),
                "updated_by_permission": granted_permission
            }), status_code
        else:
            return jsonify({"error": message}), status_code
    except Exception as e:
        current_app.logger.error(f"Error updating fuel order status: {str(e)}")
        return jsonify({"error": "Failed to update fuel order status"}), 500

# Example 5: Resource-specific permission with resource context
@enhanced_fuel_order_bp.route('/<int:order_id>/complete', methods=['PUT'])
@require_permission('complete_fuel_order', 'fuel_order', 'order_id')
def complete_fuel_order(order_id):
    """
    Complete a fuel order with fuel data submission.
    Requires 'complete_fuel_order' permission for the specific fuel order.
    """
    data = request.get_json()
    
    try:
        order, message, status_code = FuelOrderService.complete_fuel_order(
            order_id, data
        )
        if order:
            return jsonify({
                "message": message, 
                "fuel_order": order.to_dict()
            }), status_code
        else:
            return jsonify({"error": message}), status_code
    except Exception as e:
        current_app.logger.error(f"Error completing fuel order: {str(e)}")
        return jsonify({"error": "Failed to complete fuel order"}), 500

# Example 6: CSR-specific route using convenience decorator
@enhanced_fuel_order_bp.route('/<int:order_id>/review', methods=['PATCH'])
@csr_required()
def review_fuel_order(order_id):
    """
    Review a fuel order (CSR only).
    Uses convenience decorator that checks for CSR-level permissions.
    """
    data = request.get_json()
    
    try:
        order, message, status_code = FuelOrderService.review_fuel_order(
            order_id, data
        )
        if order:
            return jsonify({
                "message": message, 
                "fuel_order": order.to_dict()
            }), status_code
        else:
            return jsonify({"error": message}), status_code
    except Exception as e:
        current_app.logger.error(f"Error reviewing fuel order: {str(e)}")
        return jsonify({"error": "Failed to review fuel order"}), 500

# Example 7: Export functionality with data filtering based on permissions
@enhanced_fuel_order_bp.route('/export', methods=['GET'])
@require_any_permission('export_all_orders', 'export_own_orders')
def export_fuel_orders():
    """
    Export fuel orders to CSV.
    Data filtering based on user's permission level.
    """
    perm_ctx = get_permission_context()
    granted_permission = getattr(g, 'granted_permission', None)
    
    # Determine data scope based on permission
    if granted_permission == 'export_own_orders':
        # Filter to only user's own orders
        filters = {'created_by_user_id': g.permission_context['user_id']}
    else:
        # User has export_all_orders permission
        filters = {}
    
    try:
        csv_data, message, status_code = FuelOrderService.export_to_csv(filters)
        if csv_data:
            return csv_data, status_code, {
                'Content-Type': 'text/csv',
                'Content-Disposition': 'attachment; filename=fuel_orders.csv'
            }
        else:
            return jsonify({"error": message}), status_code
    except Exception as e:
        current_app.logger.error(f"Error exporting fuel orders: {str(e)}")
        return jsonify({"error": "Failed to export fuel orders"}), 500

# Example 8: Dynamic permission checking within route
@enhanced_fuel_order_bp.route('/<int:order_id>/actions', methods=['GET'])
@require_permission('view_fuel_order', 'fuel_order', 'order_id')
def get_available_actions(order_id):
    """
    Get available actions for a fuel order based on user's permissions.
    Demonstrates dynamic permission checking within the route.
    """
    perm_ctx = get_permission_context()
    
    if not perm_ctx:
        return jsonify({"error": "Permission context not available"}), 500
    
    # Get the fuel order
    order, message, status_code = FuelOrderService.get_fuel_order_by_id(order_id)
    if not order:
        return jsonify({"error": message}), status_code
    
    # Determine available actions based on permissions
    available_actions = []
    
    if perm_ctx.can_edit_resource('fuel_order', str(order_id)):
        available_actions.append('edit')
    
    if perm_ctx.has_permission('delete_fuel_order', 'fuel_order', str(order_id)):
        available_actions.append('delete')
    
    if perm_ctx.has_permission('complete_fuel_order', 'fuel_order', str(order_id)):
        available_actions.append('complete')
    
    if perm_ctx.has_permission('review_fuel_order'):
        available_actions.append('review')
    
    if perm_ctx.has_permission('assign_lst_to_orders'):
        available_actions.append('reassign_lst')
    
    return jsonify({
        "order_id": order_id,
        "available_actions": available_actions,
        "user_permissions_summary": {
            "total_permissions": len(perm_ctx.get_permissions()),
            "can_edit": perm_ctx.can_edit_resource('fuel_order', str(order_id)),
            "can_view": perm_ctx.can_view_resource('fuel_order', str(order_id))
        }
    }), 200

"""
Key Changes from Legacy System:

1. **Granular Permissions**: Instead of broad permissions like 'CREATE_ORDER', 
   we use specific permissions like 'create_fuel_order', 'view_any_fuel_order'.

2. **Resource-Specific Checking**: The @require_permission decorator can now 
   check permissions for specific resources using resource_type and resource_id.

3. **Multiple Permission Options**: @require_any_permission allows routes to 
   accept multiple valid permissions, enabling flexible access control.

4. **Ownership-Based Access**: @require_permission_or_ownership allows access 
   based on either permission or resource ownership.

5. **Dynamic Permission Checking**: Routes can use get_permission_context() 
   to perform additional permission checks within the route logic.

6. **Business Rule Enforcement**: Permission-based business rules can be 
   applied within routes based on which permission granted access.

7. **Convenience Decorators**: Role-like decorators (csr_required, fueler_required) 
   provide backward compatibility while using the new permission system.

Migration Strategy:
1. Update route decorators to use new enhanced decorators
2. Replace broad permissions with granular ones
3. Add resource-specific permission checking where appropriate
4. Implement dynamic permission checking for complex business rules
5. Test thoroughly to ensure no security regressions
"""

================
File: backend/src/routes/enhanced_fuel_order_routes.py
================
"""
Enhanced Fuel Order Routes with Granular Permission System

This module demonstrates how existing routes can be enhanced with the new permission system:
- Resource-specific permission checking
- Ownership-based access control
- Permission-based filtering for list endpoints
- Fine-grained permission requirements

This is an example of how to migrate existing routes to the new system.
"""

from flask import Blueprint, request, jsonify, g, Response, current_app
from decimal import Decimal
from datetime import datetime
from typing import Dict, List, Optional

from ..utils.enhanced_auth_decorators import (
    require_permission, 
    require_any_permission,
    require_permission_or_ownership,
    get_permission_context,
    csr_required,
    fueler_required
)
from ..models.user import UserRole
from ..models.fuel_order import FuelOrder, FuelOrderStatus
from ..services.fuel_order_service import FuelOrderService
from ..services.permission_service import PermissionService
from ..models.fuel_truck import FuelTruck
from ..schemas import OrderStatusCountsResponseSchema, ErrorResponseSchema
from ..extensions import db
from ..models.aircraft import Aircraft
from ..services.aircraft_service import AircraftService

# Create the blueprint for enhanced fuel order routes
enhanced_fuel_order_bp = Blueprint('enhanced_fuel_order_bp', __name__)

# Special values for auto-assignment
AUTO_ASSIGN_LST_ID = -1
AUTO_ASSIGN_TRUCK_ID = -1


@enhanced_fuel_order_bp.route('/stats/status-counts', methods=['GET', 'OPTIONS'])
@require_permission('view_order_statistics')
def get_status_counts():
    """
    Get fuel order status counts with granular permission checking.
    
    Enhanced features:
    - Uses granular permission 'view_order_statistics' instead of broad 'VIEW_ORDER_STATS'
    - Permission context available for additional filtering
    """
    if request.method == 'OPTIONS':
        return jsonify({'message': 'OPTIONS request successful'}), 200
    
    try:
        # Get permission context for advanced filtering
        perm_context = get_permission_context()
        
        # Get counts with potential filtering based on permissions
        counts, message, status_code = FuelOrderService.get_status_counts(
            current_user=g.current_user,
            permission_context=perm_context
        )
        
        if counts is not None:
            return jsonify({
                "message": message, 
                "counts": counts,
                "access_reason": getattr(g, 'access_reason', 'permission')
            }), status_code
        else:
            return jsonify({"error": message}), status_code
    except Exception as e:
        current_app.logger.error(f"Unhandled exception in enhanced get_status_counts: {str(e)}")
        return jsonify({"error": "Internal server error in get_status_counts.", "details": str(e)}), 500


@enhanced_fuel_order_bp.route('', methods=['POST', 'OPTIONS'])
@enhanced_fuel_order_bp.route('/', methods=['POST', 'OPTIONS'])
@require_permission('create_fuel_order')
def create_fuel_order():
    """
    Create a new fuel order with enhanced permission checking.
    
    Enhanced features:
    - Uses granular permission 'create_fuel_order'
    - Permission context available for validation
    - Could include customer-specific restrictions
    """
    if request.method == 'OPTIONS':
        return jsonify({'message': 'OPTIONS request successful'}), 200
    
    current_app.logger.info(f"Enhanced create_fuel_order - User: {g.current_user.id}")
    
    data = request.get_json()
    
    # Check if data exists and is a dictionary
    if not data or not isinstance(data, dict):
        return jsonify({"error": "Invalid request data"}), 400
    
    # Get permission context for additional validation
    perm_context = get_permission_context()
    
    # Enhanced validation: Check if user can create orders for specific customers
    if 'customer_id' in data:
        customer_id = data['customer_id']
        if not perm_context.has_permission('create_fuel_order', 'customer', str(customer_id)):
            if not perm_context.has_permission('create_fuel_order_any_customer'):
                return jsonify({
                    "error": "Insufficient permissions to create orders for this customer",
                    "required_permission": "create_fuel_order for customer or create_fuel_order_any_customer"
                }), 403
    
    # Standard validation would continue here...
    # (Implementation details omitted for brevity - would be similar to original)
    
    try:
        # Create the fuel order using existing service logic
        # The service layer should be enhanced to respect permission context
        fuel_order, message, status_code = FuelOrderService.create_fuel_order(
            data, 
            current_user=g.current_user,
            permission_context=perm_context
        )
        
        if fuel_order:
            return jsonify({
                "message": message,
                "fuel_order": {
                    "id": fuel_order.id,
                    "status": fuel_order.status.value,
                    "tail_number": fuel_order.tail_number
                },
                "access_reason": getattr(g, 'access_reason', 'permission')
            }), status_code
        else:
            return jsonify({"error": message}), status_code
            
    except Exception as e:
        current_app.logger.error(f"Error in enhanced create_fuel_order: {str(e)}")
        return jsonify({"error": "Internal server error"}), 500


@enhanced_fuel_order_bp.route('', methods=['GET', 'OPTIONS'])
@enhanced_fuel_order_bp.route('/', methods=['GET', 'OPTIONS'])
@require_any_permission('view_fuel_orders', 'view_own_fuel_orders', 'manage_fuel_orders')
def get_fuel_orders():
    """
    Get fuel orders with permission-based filtering.
    
    Enhanced features:
    - Multiple permission options (any of: view_fuel_orders, view_own_fuel_orders, manage_fuel_orders)
    - Automatic filtering based on user permissions
    - Only shows orders user has permission to view
    """
    if request.method == 'OPTIONS':
        return jsonify({'message': 'OPTIONS request successful'}), 200
    
    try:
        # Get permission context
        perm_context = get_permission_context()
        user = g.current_user
        
        # Determine what orders the user can see based on their permissions
        filters = {}
        granted_permission = getattr(g, 'granted_permission', '')
        
        if granted_permission == 'view_fuel_orders' or perm_context.has_permission('manage_fuel_orders'):
            # User can see all orders
            pass
        elif granted_permission == 'view_own_fuel_orders':
            # User can only see orders they created or are assigned to
            filters['accessible_by_user'] = user.id
        else:
            # Additional permission-based filtering
            accessible_orders = []
            
            # Check for customer-specific permissions
            if perm_context.has_permission('view_fuel_orders_customer'):
                # Get customer IDs user can access
                accessible_customers = PermissionService.get_accessible_resources(
                    user.id, 'view_fuel_orders', 'customer'
                )
                if accessible_customers:
                    filters['customer_ids'] = accessible_customers
            
            # Check for location-specific permissions
            if perm_context.has_permission('view_fuel_orders_location'):
                accessible_locations = PermissionService.get_accessible_resources(
                    user.id, 'view_fuel_orders', 'location'
                )
                if accessible_locations:
                    filters['location_ids'] = accessible_locations
        
        # Get fuel orders with permission-based filtering
        fuel_orders, message, status_code = FuelOrderService.get_fuel_orders(
            filters=filters,
            current_user=user,
            permission_context=perm_context
        )
        
        if fuel_orders is not None:
            return jsonify({
                "message": message,
                "fuel_orders": [order.to_dict() for order in fuel_orders],
                "access_reason": getattr(g, 'access_reason', 'permission'),
                "granted_permission": granted_permission,
                "filtered_by": list(filters.keys()) if filters else []
            }), status_code
        else:
            return jsonify({"error": message}), status_code
            
    except Exception as e:
        current_app.logger.error(f"Error in enhanced get_fuel_orders: {str(e)}")
        return jsonify({"error": "Internal server error"}), 500


@enhanced_fuel_order_bp.route('/<int:order_id>', methods=['GET'])
@require_permission_or_ownership('view_any_fuel_order', 'fuel_order', 'order_id')
def get_fuel_order(order_id):
    """
    Get specific fuel order with ownership checking.
    
    Enhanced features:
    - Uses require_permission_or_ownership decorator
    - Allows access if user has 'view_any_fuel_order' permission OR owns the order
    - Provides detailed access reason in response
    """
    try:
        # Get the fuel order
        fuel_order, message, status_code = FuelOrderService.get_fuel_order_by_id(
            order_id,
            current_user=g.current_user,
            permission_context=get_permission_context()
        )
        
        if fuel_order:
            return jsonify({
                "message": message,
                "fuel_order": fuel_order.to_dict(),
                "access_reason": getattr(g, 'access_reason', 'permission')
            }), status_code
        else:
            return jsonify({"error": message}), status_code
            
    except Exception as e:
        current_app.logger.error(f"Error in enhanced get_fuel_order: {str(e)}")
        return jsonify({"error": "Internal server error"}), 500


@enhanced_fuel_order_bp.route('/<int:order_id>/status', methods=['PATCH'])
@fueler_required()
def update_fuel_order_status(order_id):
    """
    Update fuel order status with role-based convenience decorator.
    
    Enhanced features:
    - Uses convenience decorator @fueler_required()
    - Automatically checks for fueler-level permissions
    - Could be enhanced with resource-specific checking
    """
    try:
        data = request.get_json()
        if not data or 'status' not in data:
            return jsonify({"error": "Status is required"}), 400
        
        # Update with permission context
        result, message, status_code = FuelOrderService.update_fuel_order_status(
            order_id,
            data['status'],
            current_user=g.current_user,
            permission_context=get_permission_context()
        )
        
        if result:
            return jsonify({
                "message": message,
                "access_reason": getattr(g, 'access_reason', 'permission')
            }), status_code
        else:
            return jsonify({"error": message}), status_code
            
    except Exception as e:
        current_app.logger.error(f"Error in enhanced update_fuel_order_status: {str(e)}")
        return jsonify({"error": "Internal server error"}), 500


@enhanced_fuel_order_bp.route('/<int:order_id>/submit-data', methods=['PUT'])
@require_permission('complete_fuel_order', 'fuel_order', 'order_id')
def submit_fuel_data(order_id):
    """
    Submit fuel data with resource-specific permission checking.
    
    Enhanced features:
    - Resource-specific permission checking for the specific fuel order
    - Permission context available for additional validation
    """
    try:
        data = request.get_json()
        if not data:
            return jsonify({"error": "Request data is required"}), 400
        
        # Submit fuel data with permission context
        result, message, status_code = FuelOrderService.submit_fuel_data(
            order_id,
            data,
            current_user=g.current_user,
            permission_context=get_permission_context()
        )
        
        if result:
            return jsonify({
                "message": message,
                "access_reason": getattr(g, 'access_reason', 'permission')
            }), status_code
        else:
            return jsonify({"error": message}), status_code
            
    except Exception as e:
        current_app.logger.error(f"Error in enhanced submit_fuel_data: {str(e)}")
        return jsonify({"error": "Internal server error"}), 500


@enhanced_fuel_order_bp.route('/<int:order_id>/review', methods=['PATCH'])
@require_permission('review_fuel_order', 'fuel_order', 'order_id')
def review_fuel_order(order_id):
    """
    Review fuel order with resource-specific permission.
    
    Enhanced features:
    - Resource-specific permission for the specific fuel order
    - Could include customer or location-based restrictions
    """
    try:
        data = request.get_json()
        if not data:
            return jsonify({"error": "Review data is required"}), 400
        
        # Review with permission context
        result, message, status_code = FuelOrderService.review_fuel_order(
            order_id,
            data,
            current_user=g.current_user,
            permission_context=get_permission_context()
        )
        
        if result:
            return jsonify({
                "message": message,
                "access_reason": getattr(g, 'access_reason', 'permission')
            }), status_code
        else:
            return jsonify({"error": message}), status_code
            
    except Exception as e:
        current_app.logger.error(f"Error in enhanced review_fuel_order: {str(e)}")
        return jsonify({"error": "Internal server error"}), 500


@enhanced_fuel_order_bp.route('/export', methods=['GET'])
@require_any_permission('export_fuel_orders', 'export_own_fuel_orders', 'manage_fuel_orders')
def export_fuel_orders_csv():
    """
    Export fuel orders with permission-based filtering.
    
    Enhanced features:
    - Multiple permission options for different levels of access
    - Automatic filtering based on what user can export
    - Respects data privacy boundaries
    """
    try:
        # Get permission context
        perm_context = get_permission_context()
        user = g.current_user
        granted_permission = getattr(g, 'granted_permission', '')
        
        # Determine export scope based on permissions
        export_filters = {}
        
        if granted_permission == 'export_fuel_orders' or perm_context.has_permission('manage_fuel_orders'):
            # User can export all orders
            pass
        elif granted_permission == 'export_own_fuel_orders':
            # User can only export orders they have access to
            export_filters['accessible_by_user'] = user.id
        
        # Export with permission-based filtering
        csv_data, filename, message, status_code = FuelOrderService.export_fuel_orders_csv(
            filters=export_filters,
            current_user=user,
            permission_context=perm_context
        )
        
        if csv_data:
            response = Response(
                csv_data,
                mimetype='text/csv',
                headers={
                    'Content-Disposition': f'attachment; filename={filename}',
                    'Access-Reason': getattr(g, 'access_reason', 'permission'),
                    'Granted-Permission': granted_permission
                }
            )
            return response
        else:
            return jsonify({"error": message}), status_code
            
    except Exception as e:
        current_app.logger.error(f"Error in enhanced export_fuel_orders_csv: {str(e)}")
        return jsonify({"error": "Internal server error"}), 500


# Additional enhanced endpoints for demonstration

@enhanced_fuel_order_bp.route('/my-orders', methods=['GET'])
@require_permission('view_own_fuel_orders')
def get_my_fuel_orders():
    """
    Get orders accessible to the current user.
    
    Enhanced features:
    - Dedicated endpoint for user's own orders
    - Automatic filtering to user's accessible orders
    """
    try:
        user = g.current_user
        
        # Get orders accessible to the current user
        fuel_orders, message, status_code = FuelOrderService.get_user_accessible_orders(
            user.id,
            permission_context=get_permission_context()
        )
        
        if fuel_orders is not None:
            return jsonify({
                "message": message,
                "fuel_orders": [order.to_dict() for order in fuel_orders],
                "user_id": user.id
            }), status_code
        else:
            return jsonify({"error": message}), status_code
            
    except Exception as e:
        current_app.logger.error(f"Error in get_my_fuel_orders: {str(e)}")
        return jsonify({"error": "Internal server error"}), 500


@enhanced_fuel_order_bp.route('/permissions-info', methods=['GET'])
@require_any_permission('view_fuel_orders', 'view_own_fuel_orders')
def get_permission_info():
    """
    Get information about user's fuel order permissions.
    
    Enhanced features:
    - Provides transparency about user's permissions
    - Helps frontend adapt UI based on capabilities
    """
    try:
        perm_context = get_permission_context()
        user = g.current_user
        
        # Gather permission information
        permissions_info = {
            "user_id": user.id,
            "username": user.username,
            "fuel_order_permissions": {
                "can_view_all_orders": perm_context.has_permission('view_fuel_orders'),
                "can_view_own_orders": perm_context.has_permission('view_own_fuel_orders'),
                "can_create_orders": perm_context.has_permission('create_fuel_order'),
                "can_manage_orders": perm_context.has_permission('manage_fuel_orders'),
                "can_export_all": perm_context.has_permission('export_fuel_orders'),
                "can_export_own": perm_context.has_permission('export_own_fuel_orders'),
                "can_complete_orders": perm_context.has_permission('complete_fuel_order'),
                "can_review_orders": perm_context.has_permission('review_fuel_order')
            },
            "resource_specific_permissions": {
                "customer_restrictions": PermissionService.get_accessible_resources(
                    user.id, 'view_fuel_orders', 'customer'
                ),
                "location_restrictions": PermissionService.get_accessible_resources(
                    user.id, 'view_fuel_orders', 'location'
                )
            }
        }
        
        return jsonify({
            "permissions_info": permissions_info,
            "effective_permissions": perm_context.get_permissions()
        }), 200
        
    except Exception as e:
        current_app.logger.error(f"Error in get_permission_info: {str(e)}")
        return jsonify({"error": "Internal server error"}), 500


"""
ENHANCED ROUTE MIGRATION EXAMPLES

This module demonstrates how to migrate existing routes to the new granular permission system:

1. **Basic Permission Upgrade**:
   - Old: @require_permission('VIEW_ORDER_STATS')
   - New: @require_permission('view_order_statistics')

2. **Resource-Specific Checking**: The @require_permission decorator can now
   include resource type and ID parameter:
   - @require_permission('view_fuel_order', 'fuel_order', 'order_id')

3. **Multiple Permission Options**: Allow access with any of several permissions:
   - @require_any_permission('view_fuel_orders', 'view_own_fuel_orders', 'manage_fuel_orders')

4. **Ownership-Based Access**: @require_permission_or_ownership allows access
   if user has global permission OR owns the specific resource:
   - @require_permission_or_ownership('view_any_fuel_order', 'fuel_order', 'order_id')

5. **Convenience Decorators**: Role-based decorators for common patterns:
   - @csr_required(), @fueler_required(), @admin_required()

6. **Permission Context**: Access to PermissionContext within routes:
   - perm_context = get_permission_context()
   - perm_context.has_permission('specific_permission')

7. **Permission-Based Filtering**: Automatically filter data based on permissions:
   - Only show orders user has permission to view
   - Respect customer/location/resource boundaries

8. **Transparency**: Include access reason and granted permissions in responses
   to help with debugging and auditing.

MIGRATION STEPS:
1. Update decorator imports to use enhanced_auth_decorators
2. Replace broad permissions with granular ones
3. Add resource-specific checking where appropriate
4. Implement permission-based filtering for list endpoints
5. Add permission context usage for advanced validation
6. Update service layer to respect permission context
7. Test all permission scenarios thoroughly
"""

================
File: backend/src/routes/enhanced_user_routes.py
================
"""
Enhanced User Management API Routes for Granular Permission System

This module provides API endpoints for managing users with the new permission system:
- Direct permission assignment/revocation
- Permission group assignment
- Effective permissions calculation
- Permission audit trails
"""

from flask import Blueprint, request, jsonify, current_app
from datetime import datetime
from typing import Dict, List, Optional

from ..utils.enhanced_auth_decorators import (
    require_permission, 
    require_any_permission,
    admin_required,
    get_permission_context
)
from ..services.permission_service import PermissionService
from ..services.user_service import UserService
from ..models.user import User
from ..models.permission import Permission
from ..models.permission_group import PermissionGroup
from ..models.user_permission import UserPermission
from ..extensions import db

# Create the blueprint for enhanced user routes
enhanced_user_bp = Blueprint('enhanced_user_bp', __name__)

# =============================================================================
# DIRECT PERMISSION ASSIGNMENT ENDPOINTS
# =============================================================================

@enhanced_user_bp.route('/<int:user_id>/permissions', methods=['GET'])
@require_permission('view_user_permissions', 'user', 'user_id')
def get_user_permissions(user_id):
    """
    Get all effective permissions for a specific user.
    Shows permissions from all sources: direct, groups, and roles.
    """
    try:
        # Check if user exists
        user = User.query.get(user_id)
        if not user:
            return jsonify({'error': 'User not found'}), 404
        
        # Get effective permissions with full context
        effective_permissions = PermissionService.get_user_effective_permissions(
            user_id, include_resource_context=True
        )
        
        # Get permission summary
        summary = PermissionService.get_permission_summary(user_id)
        
        return jsonify({
            'user_id': user_id,
            'username': user.username,
            'effective_permissions': effective_permissions,
            'summary': summary,
            'total_permissions': len(effective_permissions)
        }), 200
        
    except Exception as e:
        current_app.logger.error(f"Error retrieving user permissions: {str(e)}")
        return jsonify({'error': 'Failed to retrieve user permissions'}), 500

@enhanced_user_bp.route('/<int:user_id>/permissions/direct', methods=['POST'])
@require_permission('assign_direct_permissions')
def grant_direct_permission(user_id):
    """
    Grant a direct permission to a user.
    Supports resource-specific permissions and expiration.
    """
    data = request.get_json()
    
    # Validate required fields
    if not data or 'permission_id' not in data:
        return jsonify({'error': 'permission_id is required'}), 400
    
    try:
        permission_id = int(data['permission_id'])
    except (ValueError, TypeError):
        return jsonify({'error': 'permission_id must be a valid integer'}), 400
    
    # Check if user exists
    user = User.query.get(user_id)
    if not user:
        return jsonify({'error': 'User not found'}), 404
    
    # Check if permission exists
    permission = Permission.query.get(permission_id)
    if not permission:
        return jsonify({'error': 'Permission not found'}), 404
    
    # Get current user ID for audit trail
    perm_ctx = get_permission_context()
    granted_by_user_id = perm_ctx.user_id if perm_ctx else None
    
    # Optional fields
    resource_type = data.get('resource_type')
    resource_id = data.get('resource_id')
    reason = data.get('reason')
    expires_at = None
    
    if data.get('expires_at'):
        try:
            expires_at = datetime.fromisoformat(data['expires_at'])
        except ValueError:
            return jsonify({'error': 'expires_at must be a valid ISO datetime string'}), 400
    
    try:
        success, message = PermissionService.grant_direct_permission(
            user_id=user_id,
            permission_id=permission_id,
            granted_by_user_id=granted_by_user_id,
            resource_type=resource_type,
            resource_id=resource_id,
            reason=reason,
            expires_at=expires_at
        )
        
        if success:
            return jsonify({
                'message': message,
                'permission_granted': {
                    'user_id': user_id,
                    'permission_id': permission_id,
                    'permission_name': permission.name,
                    'resource_type': resource_type,
                    'resource_id': resource_id,
                    'expires_at': expires_at.isoformat() if expires_at else None
                }
            }), 201
        else:
            return jsonify({'error': message}), 400
            
    except Exception as e:
        current_app.logger.error(f"Error granting permission: {str(e)}")
        return jsonify({'error': 'Failed to grant permission'}), 500

@enhanced_user_bp.route('/<int:user_id>/permissions/direct', methods=['DELETE'])
@require_permission('revoke_direct_permissions')
def revoke_direct_permission(user_id):
    """
    Revoke a direct permission from a user.
    """
    data = request.get_json()
    
    # Validate required fields
    if not data or 'permission_id' not in data:
        return jsonify({'error': 'permission_id is required'}), 400
    
    try:
        permission_id = int(data['permission_id'])
    except (ValueError, TypeError):
        return jsonify({'error': 'permission_id must be a valid integer'}), 400
    
    # Check if user exists
    user = User.query.get(user_id)
    if not user:
        return jsonify({'error': 'User not found'}), 404
    
    # Get current user ID for audit trail
    perm_ctx = get_permission_context()
    revoked_by_user_id = perm_ctx.user_id if perm_ctx else None
    
    # Optional fields
    resource_type = data.get('resource_type')
    resource_id = data.get('resource_id')
    reason = data.get('reason')
    
    try:
        success, message = PermissionService.revoke_direct_permission(
            user_id=user_id,
            permission_id=permission_id,
            revoked_by_user_id=revoked_by_user_id,
            resource_type=resource_type,
            resource_id=resource_id,
            reason=reason
        )
        
        if success:
            return jsonify({
                'message': message,
                'permission_revoked': {
                    'user_id': user_id,
                    'permission_id': permission_id,
                    'resource_type': resource_type,
                    'resource_id': resource_id
                }
            }), 200
        else:
            return jsonify({'error': message}), 400
            
    except Exception as e:
        current_app.logger.error(f"Error revoking permission: {str(e)}")
        return jsonify({'error': 'Failed to revoke permission'}), 500

# =============================================================================
# PERMISSION GROUP MANAGEMENT ENDPOINTS
# =============================================================================

@enhanced_user_bp.route('/permission-groups', methods=['GET'])
@require_permission('view_permission_groups')
def get_permission_groups():
    """
    Get all permission groups with optional filtering.
    """
    try:
        # Get query parameters
        category = request.args.get('category')
        is_active = request.args.get('is_active')
        include_permissions = request.args.get('include_permissions', '').lower() == 'true'
        
        # Build query
        query = PermissionGroup.query
        
        if category:
            query = query.filter(PermissionGroup.category == category)
        
        if is_active is not None:
            active_bool = is_active.lower() == 'true'
            query = query.filter(PermissionGroup.is_active == active_bool)
        
        # Order by sort_order, then name
        groups = query.order_by(PermissionGroup.sort_order, PermissionGroup.name).all()
        
        # Convert to dictionaries
        result = [group.to_dict(include_permissions=include_permissions) for group in groups]
        
        return jsonify({
            'permission_groups': result,
            'total': len(result)
        }), 200
        
    except Exception as e:
        current_app.logger.error(f"Error retrieving permission groups: {str(e)}")
        return jsonify({'error': 'Failed to retrieve permission groups'}), 500

@enhanced_user_bp.route('/permission-groups', methods=['POST'])
@require_permission('create_permission_groups')
def create_permission_group():
    """
    Create a new permission group.
    """
    data = request.get_json()
    
    # Validate required fields
    if not data or 'name' not in data:
        return jsonify({'error': 'name is required'}), 400
    
    # Get current user ID for audit trail
    perm_ctx = get_permission_context()
    created_by_user_id = perm_ctx.user_id if perm_ctx else None
    
    try:
        # Create new permission group
        group = PermissionGroup(
            name=data['name'],
            description=data.get('description'),
            category=data.get('category', 'custom'),
            parent_group_id=data.get('parent_group_id'),
            sort_order=data.get('sort_order', 0),
            created_by_user_id=created_by_user_id
        )
        
        # Add permissions if provided
        if 'permission_ids' in data and isinstance(data['permission_ids'], list):
            permissions = Permission.query.filter(
                Permission.id.in_(data['permission_ids'])
            ).all()
            
            if len(permissions) != len(data['permission_ids']):
                found_ids = {p.id for p in permissions}
                missing_ids = set(data['permission_ids']) - found_ids
                return jsonify({
                    'error': f'Some permissions not found: {list(missing_ids)}'
                }), 400
            
            for permission in permissions:
                group.add_permission(permission)
        
        db.session.add(group)
        db.session.commit()
        
        return jsonify({
            'message': 'Permission group created successfully',
            'permission_group': group.to_dict(include_permissions=True)
        }), 201
        
    except Exception as e:
        db.session.rollback()
        current_app.logger.error(f"Error creating permission group: {str(e)}")
        return jsonify({'error': 'Failed to create permission group'}), 500

@enhanced_user_bp.route('/permission-groups/<int:group_id>', methods=['PUT'])
@require_permission('edit_permission_groups')
def update_permission_group(group_id):
    """
    Update an existing permission group.
    """
    group = PermissionGroup.query.get(group_id)
    if not group:
        return jsonify({'error': 'Permission group not found'}), 404
    
    # Check if it's a system group
    if group.is_system_group:
        return jsonify({'error': 'Cannot modify system permission groups'}), 403
    
    data = request.get_json()
    if not data:
        return jsonify({'error': 'No data provided'}), 400
    
    try:
        # Update basic fields
        if 'name' in data:
            group.name = data['name']
        if 'description' in data:
            group.description = data['description']
        if 'category' in data:
            group.category = data['category']
        if 'sort_order' in data:
            group.sort_order = data['sort_order']
        if 'is_active' in data:
            group.is_active = data['is_active']
        
        # Update permissions if provided
        if 'permission_ids' in data and isinstance(data['permission_ids'], list):
            # Clear existing permissions
            group.permissions = []
            
            # Add new permissions
            if data['permission_ids']:
                permissions = Permission.query.filter(
                    Permission.id.in_(data['permission_ids'])
                ).all()
                
                if len(permissions) != len(data['permission_ids']):
                    found_ids = {p.id for p in permissions}
                    missing_ids = set(data['permission_ids']) - found_ids
                    return jsonify({
                        'error': f'Some permissions not found: {list(missing_ids)}'
                    }), 400
                
                for permission in permissions:
                    group.add_permission(permission)
        
        db.session.commit()
        
        return jsonify({
            'message': 'Permission group updated successfully',
            'permission_group': group.to_dict(include_permissions=True)
        }), 200
        
    except Exception as e:
        db.session.rollback()
        current_app.logger.error(f"Error updating permission group: {str(e)}")
        return jsonify({'error': 'Failed to update permission group'}), 500

@enhanced_user_bp.route('/permission-groups/<int:group_id>', methods=['DELETE'])
@require_permission('delete_permission_groups')
def delete_permission_group(group_id):
    """
    Delete a permission group.
    """
    group = PermissionGroup.query.get(group_id)
    if not group:
        return jsonify({'error': 'Permission group not found'}), 404
    
    # Check if it's a system group
    if group.is_system_group:
        return jsonify({'error': 'Cannot delete system permission groups'}), 403
    
    # Check if group has users assigned
    if group.get_user_count() > 0:
        return jsonify({
            'error': 'Cannot delete permission group: users are currently assigned to this group'
        }), 409
    
    try:
        # Clear permissions before deletion
        group.permissions = []
        db.session.delete(group)
        db.session.commit()
        
        return jsonify({
            'message': 'Permission group deleted successfully'
        }), 200
        
    except Exception as e:
        db.session.rollback()
        current_app.logger.error(f"Error deleting permission group: {str(e)}")
        return jsonify({'error': 'Failed to delete permission group'}), 500

@enhanced_user_bp.route('/<int:user_id>/permission-groups', methods=['GET'])
@require_permission('view_user_permissions', 'user', 'user_id')
def get_user_permission_groups(user_id):
    """
    Get permission groups assigned to a specific user.
    """
    user = User.query.get(user_id)
    if not user:
        return jsonify({'error': 'User not found'}), 404
    
    try:
        groups = user.permission_groups.all()
        result = [group.to_dict(include_permissions=True) for group in groups]
        
        return jsonify({
            'user_id': user_id,
            'username': user.username,
            'permission_groups': result,
            'total': len(result)
        }), 200
        
    except Exception as e:
        current_app.logger.error(f"Error retrieving user permission groups: {str(e)}")
        return jsonify({'error': 'Failed to retrieve user permission groups'}), 500

@enhanced_user_bp.route('/<int:user_id>/permission-groups', methods=['PUT'])
@require_permission('assign_permission_groups')
def assign_permission_groups(user_id):
    """
    Assign permission groups to a user.
    Replaces existing group assignments.
    """
    user = User.query.get(user_id)
    if not user:
        return jsonify({'error': 'User not found'}), 404
    
    data = request.get_json()
    if not data or 'group_ids' not in data:
        return jsonify({'error': 'group_ids is required'}), 400
    
    group_ids = data['group_ids']
    if not isinstance(group_ids, list):
        return jsonify({'error': 'group_ids must be a list'}), 400
    
    try:
        # Get the groups
        if group_ids:
            groups = PermissionGroup.query.filter(
                PermissionGroup.id.in_(group_ids),
                PermissionGroup.is_active == True
            ).all()
            
            if len(groups) != len(group_ids):
                found_ids = {g.id for g in groups}
                missing_ids = set(group_ids) - found_ids
                return jsonify({
                    'error': f'Some permission groups not found or inactive: {list(missing_ids)}'
                }), 400
        else:
            groups = []
        
        # Replace existing assignments
        user.permission_groups = groups
        db.session.commit()
        
        # Clear permission cache for this user
        PermissionService._clear_user_cache(user_id)
        
        return jsonify({
            'message': 'Permission groups assigned successfully',
            'user_id': user_id,
            'assigned_groups': [g.to_dict() for g in groups]
        }), 200
        
    except Exception as e:
        db.session.rollback()
        current_app.logger.error(f"Error assigning permission groups: {str(e)}")
        return jsonify({'error': 'Failed to assign permission groups'}), 500

# =============================================================================
# PERMISSION AUDIT TRAIL ENDPOINTS
# =============================================================================

@enhanced_user_bp.route('/<int:user_id>/permissions/audit', methods=['GET'])
@require_permission('view_permission_audit')
def get_user_permission_audit(user_id):
    """
    Get audit trail for user's direct permission assignments.
    """
    user = User.query.get(user_id)
    if not user:
        return jsonify({'error': 'User not found'}), 404
    
    try:
        # Get all user permissions (including revoked ones)
        user_permissions = UserPermission.query.filter_by(user_id=user_id).all()
        
        audit_trail = []
        for user_perm in user_permissions:
            audit_entry = {
                'id': user_perm.id,
                'permission_name': user_perm.permission.name if user_perm.permission else None,
                'permission_id': user_perm.permission_id,
                'resource_type': user_perm.resource_type,
                'resource_id': user_perm.resource_id,
                'is_active': user_perm.is_active,
                'granted_at': user_perm.granted_at.isoformat() if user_perm.granted_at else None,
                'granted_by_user_id': user_perm.granted_by_user_id,
                'expires_at': user_perm.expires_at.isoformat() if user_perm.expires_at else None,
                'reason': user_perm.reason,
                'revoked_at': user_perm.revoked_at.isoformat() if user_perm.revoked_at else None,
                'revoked_by_user_id': user_perm.revoked_by_user_id,
                'revoked_reason': user_perm.revoked_reason,
                'is_valid': user_perm.is_valid()
            }
            audit_trail.append(audit_entry)
        
        # Sort by granted_at (most recent first)
        audit_trail.sort(key=lambda x: x['granted_at'] or '', reverse=True)
        
        return jsonify({
            'user_id': user_id,
            'username': user.username,
            'audit_trail': audit_trail,
            'total_entries': len(audit_trail)
        }), 200
        
    except Exception as e:
        current_app.logger.error(f"Error retrieving permission audit: {str(e)}")
        return jsonify({'error': 'Failed to retrieve permission audit trail'}), 500

# =============================================================================
# UTILITY ENDPOINTS
# =============================================================================

@enhanced_user_bp.route('/permissions/available', methods=['GET'])
@require_permission('view_available_permissions')
def get_available_permissions():
    """
    Get all available permissions that can be assigned.
    """
    try:
        # Get query parameters
        category = request.args.get('category')
        resource_type = request.args.get('resource_type')
        is_active = request.args.get('is_active', 'true').lower() == 'true'
        
        # Build query
        query = Permission.query.filter(Permission.is_active == is_active)
        
        if category:
            query = query.filter(Permission.category == category)
        
        if resource_type:
            query = query.filter(Permission.resource_type == resource_type)
        
        permissions = query.order_by(Permission.category, Permission.name).all()
        
        # Group by category
        grouped_permissions = {}
        for perm in permissions:
            cat = perm.category or 'uncategorized'
            if cat not in grouped_permissions:
                grouped_permissions[cat] = []
            grouped_permissions[cat].append(perm.to_dict())
        
        return jsonify({
            'permissions': grouped_permissions,
            'total': len(permissions),
            'categories': list(grouped_permissions.keys())
        }), 200
        
    except Exception as e:
        current_app.logger.error(f"Error retrieving available permissions: {str(e)}")
        return jsonify({'error': 'Failed to retrieve available permissions'}), 500

@enhanced_user_bp.route('/<int:user_id>/permissions/summary', methods=['GET'])
@require_permission('view_user_permissions', 'user', 'user_id')
def get_user_permission_summary(user_id):
    """
    Get a concise summary of user's permissions by source.
    """
    user = User.query.get(user_id)
    if not user:
        return jsonify({'error': 'User not found'}), 404
    
    try:
        summary = PermissionService.get_permission_summary(user_id)
        
        return jsonify({
            'user_id': user_id,
            'username': user.username,
            'permission_summary': summary
        }), 200
        
    except Exception as e:
        current_app.logger.error(f"Error retrieving permission summary: {str(e)}")
        return jsonify({'error': 'Failed to retrieve permission summary'}), 500

================
File: backend/src/utils/enhanced_auth_decorators.py
================
"""
Enhanced Authentication Decorators for Granular Permission System

This module provides advanced authentication decorators that support:
- Resource-specific permission checking
- Multiple permission options
- Ownership-based access control
- Dynamic permission checking within routes
"""

from functools import wraps
from typing import Optional, List, Union
from flask import g, request, jsonify, current_app

from ..utils.decorators import token_required


class PermissionContext:
    """
    Context class for dynamic permission checking within routes.
    Provides utilities for checking permissions and resource access.
    """
    
    def __init__(self, user_id: int, user_permissions: dict):
        self.user_id = user_id
        self.user_permissions = user_permissions
    
    def has_permission(self, permission_name: str, resource_type: str = None, resource_id: str = None) -> bool:
        """Check if the user has a specific permission."""
        try:
            from ..services.permission_service import PermissionService
            return PermissionService.user_has_permission(
                user_id=self.user_id,
                permission_name=permission_name,
                resource_type=resource_type,
                resource_id=resource_id
            )
        except ImportError:
            # Fallback to basic permission checking
            return permission_name in self.user_permissions
    
    def can_view_resource(self, resource_type: str, resource_id: str) -> bool:
        """Check if user can view a specific resource."""
        return (
            self.has_permission(f'view_{resource_type}', resource_type, resource_id) or
            self.has_permission(f'view_any_{resource_type}') or
            self.has_permission(f'manage_{resource_type}')
        )
    
    def can_edit_resource(self, resource_type: str, resource_id: str) -> bool:
        """Check if user can edit a specific resource."""
        return (
            self.has_permission(f'edit_{resource_type}', resource_type, resource_id) or
            self.has_permission(f'edit_any_{resource_type}') or
            self.has_permission(f'manage_{resource_type}')
        )
    
    def can_delete_resource(self, resource_type: str, resource_id: str) -> bool:
        """Check if user can delete a specific resource."""
        return (
            self.has_permission(f'delete_{resource_type}', resource_type, resource_id) or
            self.has_permission(f'delete_any_{resource_type}') or
            self.has_permission(f'manage_{resource_type}')
        )
    
    def get_permissions(self) -> dict:
        """Get all user permissions."""
        return self.user_permissions


def require_permission(permission_name: str, resource_type: str = None, resource_id_param: str = None):
    """
    Enhanced permission decorator with resource-specific checking.
    
    Args:
        permission_name (str): Permission name to check
        resource_type (str): Optional resource type (e.g., 'fuel_order')
        resource_id_param (str): Optional parameter name containing resource ID
        
    Usage:
        @require_permission('view_fuel_order', 'fuel_order', 'order_id')
        @require_permission('manage_users')
    """
    def decorator(f):
        @wraps(f)
        @token_required
        def decorated_function(*args, **kwargs):
            user = g.current_user
            
            # Get resource ID from route parameters if specified
            resource_id = None
            if resource_id_param and resource_id_param in kwargs:
                resource_id = str(kwargs[resource_id_param])
            
            # Check permission using enhanced service
            try:
                from ..services.permission_service import PermissionService
                has_perm = PermissionService.user_has_permission(
                    user_id=user.id,
                    permission_name=permission_name,
                    resource_type=resource_type,
                    resource_id=resource_id
                )
            except ImportError:
                # Fallback to basic permission checking
                has_perm = user.has_permission(permission_name)
            
            if not has_perm:
                return jsonify({
                    'error': 'Insufficient permissions',
                    'required_permission': permission_name,
                    'resource_type': resource_type,
                    'resource_id': resource_id
                }), 403
            
            # Create permission context for use within the route
            try:
                from ..services.permission_service import PermissionService
                user_permissions = PermissionService.get_user_effective_permissions(user.id)
            except ImportError:
                user_permissions = {}
            
            g.permission_context = PermissionContext(user.id, user_permissions)
            g.access_reason = 'permission'
            
            return f(*args, **kwargs)
        return decorated_function
    return decorator


def require_any_permission(*permission_names: str):
    """
    Decorator that allows access if user has ANY of the specified permissions.
    
    Args:
        *permission_names: Variable number of permission names
        
    Usage:
        @require_any_permission('manage_orders', 'view_all_orders', 'perform_fueling')
    """
    def decorator(f):
        @wraps(f)
        @token_required
        def decorated_function(*args, **kwargs):
            user = g.current_user
            
            # Check if user has any of the required permissions
            has_any_permission = False
            granted_permission = None
            
            try:
                from ..services.permission_service import PermissionService
                for permission_name in permission_names:
                    if PermissionService.user_has_permission(user.id, permission_name):
                        has_any_permission = True
                        granted_permission = permission_name
                        break
            except ImportError:
                # Fallback to basic permission checking
                for permission_name in permission_names:
                    if user.has_permission(permission_name):
                        has_any_permission = True
                        granted_permission = permission_name
                        break
            
            if not has_any_permission:
                return jsonify({
                    'error': 'Insufficient permissions',
                    'required_any_of': list(permission_names)
                }), 403
            
            # Store which permission granted access
            g.granted_permission = granted_permission
            
            # Create permission context
            try:
                from ..services.permission_service import PermissionService
                user_permissions = PermissionService.get_user_effective_permissions(user.id)
            except ImportError:
                user_permissions = {}
            
            g.permission_context = PermissionContext(user.id, user_permissions)
            
            return f(*args, **kwargs)
        return decorated_function
    return decorator


def require_all_permissions(*permission_names: str):
    """
    Decorator that requires user to have ALL of the specified permissions.
    
    Args:
        *permission_names: Variable number of permission names
        
    Usage:
        @require_all_permissions('view_orders', 'export_data')
    """
    def decorator(f):
        @wraps(f)
        @token_required
        def decorated_function(*args, **kwargs):
            user = g.current_user
            
            # Check if user has all required permissions
            missing_permissions = []
            
            try:
                from ..services.permission_service import PermissionService
                for permission_name in permission_names:
                    if not PermissionService.user_has_permission(user.id, permission_name):
                        missing_permissions.append(permission_name)
            except ImportError:
                # Fallback to basic permission checking
                for permission_name in permission_names:
                    if not user.has_permission(permission_name):
                        missing_permissions.append(permission_name)
            
            if missing_permissions:
                return jsonify({
                    'error': 'Insufficient permissions',
                    'missing_permissions': missing_permissions,
                    'required_all_of': list(permission_names)
                }), 403
            
            # Create permission context
            try:
                from ..services.permission_service import PermissionService
                user_permissions = PermissionService.get_user_effective_permissions(user.id)
            except ImportError:
                user_permissions = {}
            
            g.permission_context = PermissionContext(user.id, user_permissions)
            
            return f(*args, **kwargs)
        return decorated_function
    return decorator


def require_permission_or_ownership(permission_name: str, resource_type: str, resource_id_param: str):
    """
    Decorator that allows access if user has permission OR owns the resource.
    
    Args:
        permission_name (str): Permission name to check
        resource_type (str): Resource type (e.g., 'fuel_order')
        resource_id_param (str): Parameter name containing resource ID
        
    Usage:
        @require_permission_or_ownership('view_any_fuel_order', 'fuel_order', 'order_id')
    """
    def decorator(f):
        @wraps(f)
        @token_required
        def decorated_function(*args, **kwargs):
            user = g.current_user
            
            # Get resource ID from route parameters
            if resource_id_param not in kwargs:
                return jsonify({
                    'error': f'Resource ID parameter {resource_id_param} not found'
                }), 400
            
            resource_id = str(kwargs[resource_id_param])
            
            # Check permission first
            has_permission = False
            access_reason = None
            
            try:
                from ..services.permission_service import PermissionService
                
                # Check global permission
                if PermissionService.user_has_permission(user.id, permission_name):
                    has_permission = True
                    access_reason = 'permission'
                # Check ownership if no global permission
                elif PermissionService.user_has_permission(
                    user.id, permission_name.replace('_any_', '_own_'), resource_type, resource_id
                ):
                    has_permission = True
                    access_reason = 'ownership'
                
            except ImportError:
                # Fallback to basic permission checking
                if user.has_permission(permission_name):
                    has_permission = True
                    access_reason = 'permission'
            
            if not has_permission:
                return jsonify({
                    'error': 'Insufficient permissions',
                    'required_permission_or_ownership': permission_name,
                    'resource_type': resource_type,
                    'resource_id': resource_id
                }), 403
            
            # Store access reason for debugging
            g.access_reason = access_reason
            
            # Create permission context
            try:
                from ..services.permission_service import PermissionService
                user_permissions = PermissionService.get_user_effective_permissions(user.id)
            except ImportError:
                user_permissions = {}
            
            g.permission_context = PermissionContext(user.id, user_permissions)
            
            return f(*args, **kwargs)
        return decorated_function
    return decorator


def get_permission_context() -> Optional[PermissionContext]:
    """
    Get the current permission context from the request.
    
    Returns:
        PermissionContext or None if not available
    """
    return getattr(g, 'permission_context', None)


# Convenience decorators for backward compatibility and ease of use
def admin_required():
    """Convenience decorator for admin-level permissions."""
    return require_any_permission('admin_access', 'manage_users', 'manage_system')


def csr_required():
    """Convenience decorator for CSR-level permissions."""
    return require_any_permission('csr_access', 'manage_orders', 'create_fuel_order')


def fueler_required():
    """Convenience decorator for fueler-level permissions."""
    return require_any_permission('fueler_access', 'perform_fueling', 'update_fuel_order_status')


def manager_required():
    """Convenience decorator for manager-level permissions."""
    return require_any_permission('manager_access', 'view_reports', 'manage_operations')

================
File: frontend/app/components/customer-selector.tsx
================
"use client"

import { useState, useEffect, useCallback } from "react"
import { Search, Loader2, AlertCircle, User, Check } from "lucide-react"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from "@/components/ui/command"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { Badge } from "@/components/ui/badge"
import { cn } from "@/lib/utils"
import { getAllAdminCustomers, type Customer } from "../services/customer-service"

interface CustomerSelectorProps {
  onCustomerSelected?: (customer: Customer) => void
  onCustomerCleared?: () => void
  initialCustomerId?: number
  className?: string
  required?: boolean
}

export default function CustomerSelector({
  onCustomerSelected,
  onCustomerCleared,
  initialCustomerId,
  className = "",
  required = false,
}: CustomerSelectorProps) {
  const [customers, setCustomers] = useState<Customer[]>([])
  const [filteredCustomers, setFilteredCustomers] = useState<Customer[]>([])
  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null)
  const [searchQuery, setSearchQuery] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const [isOpen, setIsOpen] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [hasLoadedCustomers, setHasLoadedCustomers] = useState(false)

  // Load customers from API
  const loadCustomers = useCallback(async () => {
    if (hasLoadedCustomers) return // Only load once
    
    setIsLoading(true)
    setError(null)
    
    try {
      const customerList = await getAllAdminCustomers()
      setCustomers(customerList)
      setFilteredCustomers(customerList)
      setHasLoadedCustomers(true)
      
      // If initialCustomerId is provided, find and select that customer
      if (initialCustomerId) {
        const initialCustomer = customerList.find(c => c.id === initialCustomerId)
        if (initialCustomer) {
          setSelectedCustomer(initialCustomer)
          if (onCustomerSelected) {
            onCustomerSelected(initialCustomer)
          }
        }
      }
    } catch (err) {
      console.error("Error loading customers:", err)
      setError("Failed to load customers. Please try again.")
    } finally {
      setIsLoading(false)
    }
  }, [hasLoadedCustomers, initialCustomerId, onCustomerSelected])

  // Load customers when component mounts or when popover opens
  useEffect(() => {
    if (isOpen && !hasLoadedCustomers) {
      loadCustomers()
    }
  }, [isOpen, hasLoadedCustomers, loadCustomers])

  // Filter customers based on search query
  useEffect(() => {
    if (!searchQuery.trim()) {
      setFilteredCustomers(customers)
      return
    }

    const query = searchQuery.toLowerCase()
    const filtered = customers.filter(customer => 
      customer.name.toLowerCase().includes(query) ||
      customer.email.toLowerCase().includes(query) ||
      customer.id.toString().includes(query)
    )
    setFilteredCustomers(filtered)
  }, [searchQuery, customers])

  const handleCustomerSelect = (customer: Customer) => {
    setSelectedCustomer(customer)
    setIsOpen(false)
    setSearchQuery("")
    
    if (onCustomerSelected) {
      onCustomerSelected(customer)
    }
  }

  const handleClearSelection = () => {
    setSelectedCustomer(null)
    setSearchQuery("")
    
    if (onCustomerCleared) {
      onCustomerCleared()
    }
  }

  const handlePopoverOpen = (open: boolean) => {
    setIsOpen(open)
    if (open && !hasLoadedCustomers) {
      loadCustomers()
    }
    if (!open) {
      setSearchQuery("")
    }
  }

  return (
    <div className={className}>
      <div className="space-y-2">
        <Label htmlFor="customer-selector">
          Customer {required && <span className="text-red-500">*</span>}
        </Label>
        
        <Popover open={isOpen} onOpenChange={handlePopoverOpen}>
          <PopoverTrigger asChild>
            <Button
              id="customer-selector"
              variant="outline"
              role="combobox"
              aria-expanded={isOpen}
              className="w-full justify-between text-left font-normal"
            >
              {selectedCustomer ? (
                <div className="flex items-center gap-2">
                  <User className="h-4 w-4 text-gray-500" />
                  <span className="truncate">{selectedCustomer.name}</span>
                  <Badge variant="secondary" className="text-xs">
                    ID: {selectedCustomer.id}
                  </Badge>
                </div>
              ) : (
                <div className="flex items-center gap-2 text-gray-500">
                  <User className="h-4 w-4" />
                  <span>Search customers...</span>
                </div>
              )}
              <Search className="ml-2 h-4 w-4 shrink-0 opacity-50" />
            </Button>
          </PopoverTrigger>
          
          <PopoverContent className="w-[400px] p-0" align="start">
            <Command>
              <div className="flex items-center border-b px-3">
                <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
                <Input
                  placeholder="Search by name, email, or ID..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="border-0 focus:ring-0 focus:outline-none bg-transparent"
                />
                {isLoading && (
                  <Loader2 className="ml-2 h-4 w-4 shrink-0 animate-spin opacity-50" />
                )}
              </div>
              
              <CommandList className="max-h-[300px]">
                {error ? (
                  <div className="p-4 text-sm text-red-500 flex items-center gap-2">
                    <AlertCircle className="h-4 w-4" />
                    {error}
                    <Button 
                      variant="ghost" 
                      size="sm" 
                      onClick={loadCustomers}
                      className="ml-auto"
                    >
                      Retry
                    </Button>
                  </div>
                ) : !hasLoadedCustomers && isLoading ? (
                  <div className="p-4 text-sm text-gray-500 flex items-center gap-2">
                    <Loader2 className="h-4 w-4 animate-spin" />
                    Loading customers...
                  </div>
                ) : filteredCustomers.length === 0 && searchQuery ? (
                  <CommandEmpty>
                    No customers found matching "{searchQuery}"
                  </CommandEmpty>
                ) : filteredCustomers.length === 0 ? (
                  <CommandEmpty>
                    No customers available
                  </CommandEmpty>
                ) : (
                  <CommandGroup>
                    {filteredCustomers.map((customer) => (
                      <CommandItem
                        key={customer.id}
                        value={`${customer.name} ${customer.email} ${customer.id}`}
                        onSelect={() => handleCustomerSelect(customer)}
                        className="cursor-pointer"
                      >
                        <div className="flex items-center gap-3 w-full">
                          <User className="h-4 w-4 text-gray-500" />
                          <div className="flex-1 min-w-0">
                            <div className="font-medium truncate">{customer.name}</div>
                            <div className="text-sm text-gray-500 truncate">{customer.email}</div>
                          </div>
                          <Badge variant="outline" className="text-xs">
                            ID: {customer.id}
                          </Badge>
                          {selectedCustomer?.id === customer.id && (
                            <Check className="ml-2 h-4 w-4 text-green-600" />
                          )}
                        </div>
                      </CommandItem>
                    ))}
                  </CommandGroup>
                )}
              </CommandList>
            </Command>
          </PopoverContent>
        </Popover>

        {selectedCustomer && (
          <Card className="bg-blue-50 border-blue-200">
            <CardHeader className="pb-2">
              <div className="flex items-center justify-between">
                <CardTitle className="text-sm font-medium text-blue-800">
                  Selected Customer
                </CardTitle>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={handleClearSelection}
                  className="text-blue-600 hover:text-blue-800 h-6 w-6 p-0"
                >
                  <AlertCircle className="h-4 w-4" />
                </Button>
              </div>
            </CardHeader>
            <CardContent className="pt-0">
              <div className="space-y-1 text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-600">Name:</span>
                  <span className="font-medium text-blue-800">{selectedCustomer.name}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Email:</span>
                  <span className="text-blue-700">{selectedCustomer.email}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Customer ID:</span>
                  <span className="font-mono text-blue-700">{selectedCustomer.id}</span>
                </div>
                {selectedCustomer.phone && (
                  <div className="flex justify-between">
                    <span className="text-gray-600">Phone:</span>
                    <span className="text-blue-700">{selectedCustomer.phone}</span>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        )}

        {/* Fallback: Direct ID input for backwards compatibility */}
        {!selectedCustomer && (
          <div className="pt-2 border-t">
            <Label htmlFor="customer-id-fallback" className="text-sm text-gray-600">
              Or enter Customer ID directly:
            </Label>
            <Input
              id="customer-id-fallback"
              type="number"
              placeholder="Enter customer ID"
              className="mt-1"
              onChange={(e) => {
                const id = parseInt(e.target.value)
                if (id && customers.length > 0) {
                  const customer = customers.find(c => c.id === id)
                  if (customer) {
                    handleCustomerSelect(customer)
                  }
                }
              }}
            />
          </div>
        )}
      </div>
    </div>
  )
}

================
File: frontend/app/components/permission-action-button.tsx
================
"use client"

import React from "react"
import { Button } from "@/components/ui/button"
import { usePermissions } from "@/hooks/usePermissions"
import { cn } from "@/lib/utils"

interface PermissionActionButtonProps {
  // Button props
  children: React.ReactNode
  className?: string
  variant?: "default" | "destructive" | "outline" | "secondary" | "ghost" | "link"
  size?: "default" | "sm" | "lg" | "icon"
  disabled?: boolean
  onClick?: () => void
  type?: "button" | "submit" | "reset"
  
  // Permission requirements
  requiredPermission?: string
  requiredPermissions?: string[]
  anyOfPermissions?: string[]
  resourceType?: string
  resourceId?: string | number
  
  // Fallback behavior
  hideIfNoAccess?: boolean // If true, hide button completely. If false, show disabled button
  fallbackComponent?: React.ReactNode
  loadingText?: string
}

const PermissionActionButton: React.FC<PermissionActionButtonProps> = ({
  children,
  className,
  variant = "default",
  size = "default",
  disabled = false,
  onClick,
  type = "button",
  requiredPermission,
  requiredPermissions,
  anyOfPermissions,
  resourceType,
  resourceId,
  hideIfNoAccess = false,
  fallbackComponent,
  loadingText = "Loading...",
}) => {
  const { 
    loading, 
    can, 
    canAll, 
    canAny, 
    hasResourcePermission 
  } = usePermissions()

  // Show loading state while permissions are being checked
  if (loading) {
    if (hideIfNoAccess) {
      return null
    }
    return (
      <Button 
        variant={variant} 
        size={size} 
        disabled={true}
        className={cn(className)}
      >
        {loadingText}
      </Button>
    )
  }

  // Check permissions
  let hasAccess = true

  if (requiredPermission) {
    if (resourceType && resourceId) {
      hasAccess = hasResourcePermission(requiredPermission, resourceType, String(resourceId))
    } else {
      hasAccess = can(requiredPermission)
    }
  } else if (requiredPermissions && requiredPermissions.length > 0) {
    hasAccess = canAll(requiredPermissions)
  } else if (anyOfPermissions && anyOfPermissions.length > 0) {
    hasAccess = canAny(anyOfPermissions)
  }

  // Handle no access cases
  if (!hasAccess) {
    if (hideIfNoAccess) {
      return fallbackComponent || null
    }
    
    // Show disabled button
    return (
      <Button 
        variant={variant} 
        size={size} 
        disabled={true}
        className={cn("opacity-50 cursor-not-allowed", className)}
        title="You don't have permission to perform this action"
      >
        {children}
      </Button>
    )
  }

  // Render the button with access
  return (
    <Button
      variant={variant}
      size={size}
      disabled={disabled}
      onClick={onClick}
      type={type}
      className={cn(className)}
    >
      {children}
    </Button>
  )
}

export default PermissionActionButton

// Convenience components for common patterns
export const AdminActionButton: React.FC<Omit<PermissionActionButtonProps, 'anyOfPermissions'>> = (props) => (
  <PermissionActionButton 
    {...props} 
    anyOfPermissions={['ACCESS_ADMIN_DASHBOARD', 'MANAGE_SETTINGS']}
  />
)

export const CSRActionButton: React.FC<Omit<PermissionActionButtonProps, 'anyOfPermissions'>> = (props) => (
  <PermissionActionButton 
    {...props} 
    anyOfPermissions={['ACCESS_CSR_DASHBOARD', 'VIEW_ALL_ORDERS']}
  />
)

export const FuelerActionButton: React.FC<Omit<PermissionActionButtonProps, 'anyOfPermissions'>> = (props) => (
  <PermissionActionButton 
    {...props} 
    anyOfPermissions={['ACCESS_FUELER_DASHBOARD', 'PERFORM_FUELING_TASK']}
  />
)

export const CreateOrderButton: React.FC<Omit<PermissionActionButtonProps, 'anyOfPermissions'>> = (props) => (
  <PermissionActionButton 
    {...props} 
    anyOfPermissions={['CREATE_ORDER', 'EDIT_FUEL_ORDER']}
  />
)

export const ManageUsersButton: React.FC<Omit<PermissionActionButtonProps, 'anyOfPermissions'>> = (props) => (
  <PermissionActionButton 
    {...props} 
    anyOfPermissions={['MANAGE_USERS', 'VIEW_USERS']}
  />
)

================
File: frontend/app/components/permission-debug.tsx
================
"use client"

import { useState } from "react"
import { usePermissions } from "@/hooks/usePermissions"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible"
import { ChevronDown, ChevronRight, RefreshCw, Bug, User, Shield, Eye, EyeOff } from "lucide-react"
import { cn } from "@/lib/utils"

export default function PermissionDebug() {
  const [isOpen, setIsOpen] = useState(false)
  const [isVisible, setIsVisible] = useState(false)
  const {
    user,
    userPermissions,
    loading,
    isAdmin,
    isCSR,
    isFueler,
    isMember,
    can,
    canAny,
    refresh,
    permissionSummary,
    effectivePermissions
  } = usePermissions()

  const handleRefresh = async () => {
    try {
      await refresh()
    } catch (error) {
      console.error("Failed to refresh permissions:", error)
    }
  }

  // Test specific CSR permissions - using actual database permission names
  const csrPermissions = [
    // Actual permission names from the seeded database
    'CREATE_ORDER',           // Allows creating new fuel orders
    'VIEW_ALL_ORDERS',        // Allows viewing all fuel orders  
    'REVIEW_ORDERS',          // Allows CSR/Admin to mark orders as reviewed
    'EXPORT_ORDERS_CSV',      // Allows exporting order data to CSV
    'VIEW_ORDER_STATS',       // Allows viewing order statistics
    'EDIT_FUEL_ORDER',        // Allows editing fuel order details
    'VIEW_CUSTOMERS',         // Allows viewing customer list
    'MANAGE_CUSTOMERS',       // Allows creating, updating, deleting customers
    
    // Legacy granular permission names (in case they exist)
    'csr_access',
    'access_csr_module',
    'manage_orders',
    'create_fuel_order',
    'view_fuel_orders',
    'edit_own_order',
    'export_order_data',
    'view_order_statistics',
    'review_orders'
  ]

  const adminPermissions = [
    // Actual permission names from the seeded database
    'MANAGE_USERS',           // Allows managing user accounts
    'MANAGE_SYSTEM',          // Allows system administration
    'VIEW_ADMIN_PANEL',       // Allows access to admin panel
    'MANAGE_ROLES',           // Allows managing roles and permissions
    
    // Legacy granular permission names (in case they exist)
    'admin_access',
    'access_admin_panel',
    'manage_system',
    'manage_users',
    'manage_permission_groups'
  ]

  const fuelerPermissions = [
    // Actual permission names from the seeded database
    'PERFORM_FUELING',        // Allows performing fueling operations
    'UPDATE_ORDER_STATUS',    // Allows updating order status
    'COMPLETE_ORDERS',        // Allows completing orders
    'VIEW_ASSIGNED_ORDERS',   // Allows viewing assigned orders
    
    // Legacy granular permission names (in case they exist)
    'fueler_access',
    'access_fueler_module',
    'perform_fueling',
    'start_fueling_task',
    'update_fueling_status',
    'complete_own_order'
  ]

  if (!isVisible) {
    return (
      <div className="fixed bottom-4 right-4 z-50">
        <Button
          onClick={() => setIsVisible(true)}
          variant="outline"
          size="sm"
          className="bg-background/80 backdrop-blur-sm"
        >
          <Bug className="h-4 w-4 mr-2" />
          Debug Permissions
        </Button>
      </div>
    )
  }

  return (
    <div className="fixed bottom-4 right-4 z-50 w-96 max-h-[80vh] overflow-auto">
      <Card className="bg-background/95 backdrop-blur-sm border-2">
        <CardHeader className="pb-2">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Bug className="h-4 w-4" />
              <CardTitle className="text-sm">Permission Debug</CardTitle>
            </div>
            <div className="flex items-center gap-1">
              <Button
                onClick={handleRefresh}
                variant="ghost"
                size="sm"
                disabled={loading}
              >
                <RefreshCw className={cn("h-3 w-3", loading && "animate-spin")} />
              </Button>
              <Button
                onClick={() => setIsVisible(false)}
                variant="ghost"
                size="sm"
              >
                <EyeOff className="h-3 w-3" />
              </Button>
            </div>
          </div>
          <CardDescription className="text-xs">
            {loading ? "Loading..." : `${userPermissions.length} permissions loaded`}
          </CardDescription>
        </CardHeader>

        <CardContent className="space-y-3 text-xs">
          {/* User Info */}
          <div className="space-y-1">
            <div className="flex items-center gap-1">
              <User className="h-3 w-3" />
              <span className="font-medium">User Info</span>
            </div>
            <div className="pl-4 space-y-1">
              <div>Email: {user?.email || "Not logged in"}</div>
              <div>Name: {user?.name || "N/A"}</div>
              <div>Active: {user?.is_active ? "Yes" : "No"}</div>
              <div>Logged In: {user?.isLoggedIn ? "Yes" : "No"}</div>
              <div>Roles: {user?.roles?.join(", ") || "None"}</div>
            </div>
          </div>

          {/* Role Checks */}
          <div className="space-y-1">
            <div className="flex items-center gap-1">
              <Shield className="h-3 w-3" />
              <span className="font-medium">Role Checks</span>
            </div>
            <div className="pl-4 flex flex-wrap gap-1">
              <Badge variant={isAdmin ? "default" : "secondary"} className="text-xs">
                Admin: {isAdmin ? "✓" : "✗"}
              </Badge>
              <Badge variant={isCSR ? "default" : "secondary"} className="text-xs">
                CSR: {isCSR ? "✓" : "✗"}
              </Badge>
              <Badge variant={isFueler ? "default" : "secondary"} className="text-xs">
                Fueler: {isFueler ? "✓" : "✗"}
              </Badge>
              <Badge variant={isMember ? "default" : "secondary"} className="text-xs">
                Member: {isMember ? "✓" : "✗"}
              </Badge>
            </div>
          </div>

          {/* CSR Permission Tests */}
          <Collapsible>
            <CollapsibleTrigger className="flex items-center gap-1 hover:bg-muted/50 p-1 rounded">
              <ChevronRight className="h-3 w-3" />
              <span className="font-medium">CSR Permissions ({csrPermissions.filter(p => can(p)).length}/{csrPermissions.length})</span>
            </CollapsibleTrigger>
            <CollapsibleContent className="pl-4 space-y-1 mt-1">
              {csrPermissions.map(permission => (
                <div key={permission} className="flex items-center justify-between">
                  <span className="text-xs">{permission}</span>
                  <Badge variant={can(permission) ? "default" : "secondary"} className="text-xs">
                    {can(permission) ? "✓" : "✗"}
                  </Badge>
                </div>
              ))}
              <div className="mt-2 p-2 bg-muted/50 rounded text-xs">
                <div>canAny(csrPermissions): {canAny(csrPermissions) ? "✓" : "✗"}</div>
                <div>isCSR hook result: {isCSR ? "✓" : "✗"}</div>
              </div>
            </CollapsibleContent>
          </Collapsible>

          {/* Admin Permission Tests */}
          <Collapsible>
            <CollapsibleTrigger className="flex items-center gap-1 hover:bg-muted/50 p-1 rounded">
              <ChevronRight className="h-3 w-3" />
              <span className="font-medium">Admin Permissions ({adminPermissions.filter(p => can(p)).length}/{adminPermissions.length})</span>
            </CollapsibleTrigger>
            <CollapsibleContent className="pl-4 space-y-1 mt-1">
              {adminPermissions.map(permission => (
                <div key={permission} className="flex items-center justify-between">
                  <span className="text-xs">{permission}</span>
                  <Badge variant={can(permission) ? "default" : "secondary"} className="text-xs">
                    {can(permission) ? "✓" : "✗"}
                  </Badge>
                </div>
              ))}
            </CollapsibleContent>
          </Collapsible>

          {/* Fueler Permission Tests */}
          <Collapsible>
            <CollapsibleTrigger className="flex items-center gap-1 hover:bg-muted/50 p-1 rounded">
              <ChevronRight className="h-3 w-3" />
              <span className="font-medium">Fueler Permissions ({fuelerPermissions.filter(p => can(p)).length}/{fuelerPermissions.length})</span>
            </CollapsibleTrigger>
            <CollapsibleContent className="pl-4 space-y-1 mt-1">
              {fuelerPermissions.map(permission => (
                <div key={permission} className="flex items-center justify-between">
                  <span className="text-xs">{permission}</span>
                  <Badge variant={can(permission) ? "default" : "secondary"} className="text-xs">
                    {can(permission) ? "✓" : "✗"}
                  </Badge>
                </div>
              ))}
            </CollapsibleContent>
          </Collapsible>

          {/* All Permissions */}
          <Collapsible open={isOpen} onOpenChange={setIsOpen}>
            <CollapsibleTrigger className="flex items-center gap-1 hover:bg-muted/50 p-1 rounded">
              {isOpen ? <ChevronDown className="h-3 w-3" /> : <ChevronRight className="h-3 w-3" />}
              <span className="font-medium">All Permissions ({userPermissions.length})</span>
            </CollapsibleTrigger>
            <CollapsibleContent className="pl-4 space-y-1 mt-1 max-h-32 overflow-auto">
              {userPermissions.length > 0 ? (
                userPermissions.map(permission => (
                  <div key={permission} className="text-xs p-1 bg-muted/30 rounded">
                    {permission}
                  </div>
                ))
              ) : (
                <div className="text-xs text-muted-foreground">No permissions found</div>
              )}
            </CollapsibleContent>
          </Collapsible>

          {/* Permission Summary */}
          {permissionSummary && (
            <Collapsible>
              <CollapsibleTrigger className="flex items-center gap-1 hover:bg-muted/50 p-1 rounded">
                <ChevronRight className="h-3 w-3" />
                <span className="font-medium">Permission Summary</span>
              </CollapsibleTrigger>
              <CollapsibleContent className="pl-4 space-y-1 mt-1">
                <div className="text-xs space-y-1">
                  <div>Total: {permissionSummary.total_permissions}</div>
                  <div>Direct: {permissionSummary.by_source.direct.length}</div>
                  <div>Groups: {permissionSummary.by_source.groups.length}</div>
                  <div>Roles: {permissionSummary.by_source.roles.length}</div>
                </div>
              </CollapsibleContent>
            </Collapsible>
          )}

          {/* Raw Data */}
          <Collapsible>
            <CollapsibleTrigger className="flex items-center gap-1 hover:bg-muted/50 p-1 rounded">
              <ChevronRight className="h-3 w-3" />
              <span className="font-medium">Raw Data</span>
            </CollapsibleTrigger>
            <CollapsibleContent className="pl-4 mt-1">
              <pre className="text-xs bg-muted/50 p-2 rounded overflow-auto max-h-32">
                {JSON.stringify({
                  user: user ? {
                    id: user.id,
                    email: user.email,
                    name: user.name,
                    roles: user.roles,
                    is_active: user.is_active,
                    isLoggedIn: user.isLoggedIn,
                    permissions_loaded_at: user.permissions_loaded_at
                  } : null,
                  permissions: userPermissions,
                  loading,
                  roleChecks: { isAdmin, isCSR, isFueler, isMember }
                }, null, 2)}
              </pre>
            </CollapsibleContent>
          </Collapsible>
        </CardContent>
      </Card>
    </div>
  )
}

================
File: frontend/hooks/usePermissions.ts
================
import { usePermissions as usePermissionContext } from "@/app/contexts/permission-context"
import { useMemo, useCallback } from "react"

/**
 * Enhanced permission hook that provides utility functions for common permission patterns
 */
export const usePermissions = () => {
  const context = usePermissionContext()
  
  // Memoized permission checker functions for performance
  const can = useCallback((permission: string) => {
    return context.hasPermission(permission)
  }, [context])

  const canAny = useCallback((permissions: string[]) => {
    return context.hasAnyPermission(permissions)
  }, [context])

  const canAll = useCallback((permissions: string[]) => {
    return context.hasAllPermissions(permissions)
  }, [context])

  const canAccess = useCallback((permission: string, resourceType?: string, resourceId?: string) => {
    return context.hasResourcePermission(permission, resourceType, resourceId)
  }, [context])

  const canPerform = useCallback((action: string, resourceType: string, resourceId?: string) => {
    return context.canPerformAction(action, resourceType, resourceId)
  }, [context])

  // Common role-based checks - Updated to use backend permissions
  const isAdmin = useMemo(() => {
    return canAny(['ACCESS_ADMIN_DASHBOARD', 'MANAGE_SETTINGS', 'MANAGE_USERS', 'MANAGE_ROLES'])
  }, [canAny])

  const isCSR = useMemo(() => {
    return canAny(['ACCESS_CSR_DASHBOARD', 'VIEW_ALL_ORDERS', 'CREATE_ORDER', 'REVIEW_ORDERS'])
  }, [canAny])

  const isFueler = useMemo(() => {
    return canAny(['ACCESS_FUELER_DASHBOARD', 'PERFORM_FUELING_TASK', 'UPDATE_OWN_ORDER_STATUS', 'VIEW_ASSIGNED_ORDERS'])
  }, [canAny])

  const isMember = useMemo(() => {
    return canAny(['ACCESS_MEMBER_DASHBOARD']) || (context.user?.is_active ?? false)
  }, [canAny, context.user])

  // Permission metadata
  const getSource = useCallback((permission: string) => {
    return context.getPermissionSource(permission)
  }, [context])

  const isFromGroup = useCallback((permission: string) => {
    return context.isPermissionFromGroup(permission)
  }, [context])

  const isFromRole = useCallback((permission: string) => {
    return context.isPermissionFromRole(permission)
  }, [context])

  const isDirect = useCallback((permission: string) => {
    return context.isDirectPermission(permission)
  }, [context])

  // Utility functions
  const getAccessibleResources = useCallback((permission: string, resourceType: string) => {
    return context.getAccessibleResources(permission, resourceType)
  }, [context])

  const refresh = useCallback(async () => {
    return await context.refreshPermissions()
  }, [context])

  // Permission summary helpers
  const permissionCount = useMemo(() => {
    return context.userPermissions.length
  }, [context.userPermissions])

  const directPermissionCount = useMemo(() => {
    return context.permissionSummary?.by_source.direct.length ?? 0
  }, [context.permissionSummary])

  const groupPermissionCount = useMemo(() => {
    return context.permissionSummary?.by_source.groups.length ?? 0
  }, [context.permissionSummary])

  const rolePermissionCount = useMemo(() => {
    return context.permissionSummary?.by_source.roles.length ?? 0
  }, [context.permissionSummary])

  return {
    // Core context
    ...context,
    
    // Simplified permission checking
    can,
    canAny,
    canAll,
    canAccess,
    canPerform,
    
    // Role-based checks
    isAdmin,
    isCSR,
    isFueler,
    isMember,
    
    // Permission metadata
    getSource,
    isFromGroup,
    isFromRole,
    isDirect,
    
    // Utilities
    getAccessibleResources,
    refresh,
    
    // Summary statistics
    permissionCount,
    directPermissionCount,
    groupPermissionCount,
    rolePermissionCount,
  }
}

/**
 * Hook for checking a specific permission with automatic re-evaluation
 */
export const usePermission = (permission: string) => {
  const { can, loading } = usePermissions()
  
  return useMemo(() => ({
    hasPermission: can(permission),
    loading
  }), [can, permission, loading])
}

/**
 * Hook for checking multiple permissions
 */
export const useMultiplePermissions = (permissions: string[]) => {
  const { canAny, canAll, loading, userPermissions } = usePermissions()
  
  return useMemo(() => {
    const hasAny = canAny(permissions)
    const hasAll = canAll(permissions)
    const missing = permissions.filter(p => !userPermissions.includes(p))
    const granted = permissions.filter(p => userPermissions.includes(p))
    
    return {
      hasAny,
      hasAll,
      missing,
      granted,
      loading
    }
  }, [canAny, canAll, permissions, userPermissions, loading])
}

/**
 * Hook for resource-specific permission checking
 */
export const useResourcePermission = (
  permission: string, 
  resourceType: string, 
  resourceId?: string
) => {
  const { canAccess, loading } = usePermissions()
  
  return useMemo(() => ({
    hasPermission: canAccess(permission, resourceType, resourceId),
    loading
  }), [canAccess, permission, resourceType, resourceId, loading])
}

/**
 * Hook for action-based permission checking
 */
export const useActionPermission = (
  action: string, 
  resourceType: string, 
  resourceId?: string
) => {
  const { canPerform, loading } = usePermissions()
  
  return useMemo(() => ({
    canPerform: canPerform(action, resourceType, resourceId),
    loading
  }), [canPerform, action, resourceType, resourceId, loading])
}

export default usePermissions

================
File: backend/migrations/versions/931518a1009f_add_category_column_to_permissions_table.py
================
"""Add category column to permissions table

Revision ID: 931518a1009f
Revises: cd7344a46b7f
Create Date: 2025-05-25 04:41:10.212989

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '931518a1009f'
down_revision = 'cd7344a46b7f'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('permissions', schema=None) as batch_op:
        batch_op.add_column(sa.Column('category', sa.String(length=50), nullable=True))

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('permissions', schema=None) as batch_op:
        batch_op.drop_column('category')

    # ### end Alembic commands ###

================
File: backend/migrations/versions/cd7344a46b7f_initial_schema_based_on_current_models_.py
================
"""Initial schema based on current models including PBAC and user name column

Revision ID: cd7344a46b7f
Revises: 
Create Date: 2025-05-04 23:03:17.714843

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'cd7344a46b7f'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('aircraft',
    sa.Column('tail_number', sa.String(length=20), nullable=False),
    sa.Column('aircraft_type', sa.String(length=50), nullable=False),
    sa.Column('fuel_type', sa.String(length=20), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('tail_number')
    )
    op.create_table('customers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=False),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('customers', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_customers_email'), ['email'], unique=True)

    op.create_table('fuel_trucks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('truck_number', sa.String(length=20), nullable=False),
    sa.Column('fuel_type', sa.String(length=50), nullable=False),
    sa.Column('capacity', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('current_meter_reading', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('truck_number')
    )
    op.create_table('permissions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('permissions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_permissions_name'), ['name'], unique=True)

    op.create_table('roles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=80), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('roles', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_roles_name'), ['name'], unique=True)

    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=64), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=True),
    sa.Column('password_hash', sa.String(length=128), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_username'), ['username'], unique=True)

    op.create_table('fuel_orders',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('DISPATCHED', 'ACKNOWLEDGED', 'EN_ROUTE', 'FUELING', 'COMPLETED', 'REVIEWED', 'CANCELLED', name='fuelorderstatus'), nullable=False),
    sa.Column('tail_number', sa.String(length=20), nullable=False),
    sa.Column('customer_id', sa.Integer(), nullable=True),
    sa.Column('fuel_type', sa.String(length=50), nullable=False),
    sa.Column('additive_requested', sa.Boolean(), nullable=True),
    sa.Column('requested_amount', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('assigned_lst_user_id', sa.Integer(), nullable=True),
    sa.Column('assigned_truck_id', sa.Integer(), nullable=True),
    sa.Column('location_on_ramp', sa.String(length=100), nullable=True),
    sa.Column('csr_notes', sa.Text(), nullable=True),
    sa.Column('lst_notes', sa.Text(), nullable=True),
    sa.Column('start_meter_reading', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('end_meter_reading', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('dispatch_timestamp', sa.DateTime(), nullable=True),
    sa.Column('acknowledge_timestamp', sa.DateTime(), nullable=True),
    sa.Column('en_route_timestamp', sa.DateTime(), nullable=True),
    sa.Column('fueling_start_timestamp', sa.DateTime(), nullable=True),
    sa.Column('completion_timestamp', sa.DateTime(), nullable=True),
    sa.Column('reviewed_timestamp', sa.DateTime(), nullable=True),
    sa.Column('reviewed_by_csr_user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['assigned_lst_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['assigned_truck_id'], ['fuel_trucks.id'], ),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ),
    sa.ForeignKeyConstraint(['reviewed_by_csr_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['tail_number'], ['aircraft.tail_number'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('fuel_orders', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_fuel_orders_assigned_lst_user_id'), ['assigned_lst_user_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_fuel_orders_assigned_truck_id'), ['assigned_truck_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_fuel_orders_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('ix_fuel_orders_tail_number'), ['tail_number'], unique=False)

    op.create_table('role_permissions',
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('permission_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['permission_id'], ['permissions.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.PrimaryKeyConstraint('role_id', 'permission_id')
    )
    op.create_table('user_roles',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'role_id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_roles')
    op.drop_table('role_permissions')
    with op.batch_alter_table('fuel_orders', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_fuel_orders_tail_number'))
        batch_op.drop_index(batch_op.f('ix_fuel_orders_status'))
        batch_op.drop_index(batch_op.f('ix_fuel_orders_assigned_truck_id'))
        batch_op.drop_index(batch_op.f('ix_fuel_orders_assigned_lst_user_id'))

    op.drop_table('fuel_orders')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_username'))
        batch_op.drop_index(batch_op.f('ix_users_email'))

    op.drop_table('users')
    with op.batch_alter_table('roles', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_roles_name'))

    op.drop_table('roles')
    with op.batch_alter_table('permissions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_permissions_name'))

    op.drop_table('permissions')
    op.drop_table('fuel_trucks')
    with op.batch_alter_table('customers', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_customers_email'))

    op.drop_table('customers')
    op.drop_table('aircraft')
    # ### end Alembic commands ###

================
File: backend/migrations/versions/d8897d7b926b_add_lst_specific_fields_to_users_table.py
================
"""Add LST specific fields to users table

Revision ID: d8897d7b926b
Revises: 931518a1009f
Create Date: 2025-05-25 12:39:12.796903

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'd8897d7b926b'
down_revision = '931518a1009f'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('employee_id', sa.String(length=20), nullable=True))
        batch_op.add_column(sa.Column('status', sa.String(length=20), nullable=True, default='active'))
        batch_op.add_column(sa.Column('shift', sa.String(length=20), nullable=True))
        batch_op.add_column(sa.Column('certifications', sa.JSON(), nullable=True))
        batch_op.add_column(sa.Column('performance_rating', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('orders_completed', sa.Integer(), nullable=True, default=0))
        batch_op.add_column(sa.Column('average_time', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('last_active', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('hire_date', sa.DateTime(), nullable=True))
        batch_op.create_index(batch_op.f('ix_users_employee_id'), ['employee_id'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_status'), ['status'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_status'))
        batch_op.drop_index(batch_op.f('ix_users_employee_id'))
        batch_op.drop_column('hire_date')
        batch_op.drop_column('last_active')
        batch_op.drop_column('average_time')
        batch_op.drop_column('orders_completed')
        batch_op.drop_column('performance_rating')
        batch_op.drop_column('certifications')
        batch_op.drop_column('shift')
        batch_op.drop_column('status')
        batch_op.drop_column('employee_id')
    # ### end Alembic commands ###

================
File: backend/migrations/alembic.ini
================
# A generic, single database configuration.

[alembic]
# template used to generate migration files
# file_template = %%(rev)s_%%(slug)s

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false


# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic,flask_migrate

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[logger_flask_migrate]
level = INFO
handlers =
qualname = flask_migrate

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S

================
File: backend/migrations/env.py
================
import logging
from logging.config import fileConfig
import os

from flask import current_app

from alembic import context

# Import all models here for Alembic to detect them
from src.models.user import User
from src.models.role import Role
from src.models.permission import Permission
from src.models.aircraft import Aircraft
from src.models.customer import Customer
from src.models.fuel_truck import FuelTruck
from src.models.fuel_order import FuelOrder

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
fileConfig(config.config_file_name)
logger = logging.getLogger('alembic.env')


def get_engine():
    try:
        # this works with Flask-SQLAlchemy<3 and Alchemical
        return current_app.extensions['migrate'].db.get_engine()
    except (TypeError, AttributeError):
        # this works with Flask-SQLAlchemy>=3
        return current_app.extensions['migrate'].db.engine


def get_engine_url():
    try:
        return current_app.config['SQLALCHEMY_DATABASE_URI']
    except RuntimeError:
        return os.environ.get('SQLALCHEMY_DATABASE_URI') or \
            'postgresql://fbo_user:fbo_password@db:5432/fbo_launchpad_test'


# add your model's MetaData object here
# for 'autogenerate' support
# from myapp import mymodel
# target_metadata = mymodel.Base.metadata
config.set_main_option('sqlalchemy.url', get_engine_url())
target_db = current_app.extensions['migrate'].db

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.


def get_metadata():
    if hasattr(target_db, 'metadatas'):
        return target_db.metadatas[None]
    return target_db.metadata


def run_migrations_offline():
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    url = get_engine_url()
    context.configure(
        url=url,
        target_metadata=get_metadata(),
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online():
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """

    # this callback is used to prevent an auto-migration from being generated
    # when there are no changes to the schema
    # reference: http://alembic.zzzcomputing.com/en/latest/cookbook.html
    def process_revision_directives(context, revision, directives):
        if getattr(config.cmd_opts, 'autogenerate', False):
            script = directives[0]
            if script.upgrade_ops.is_empty():
                directives[:] = []
                logger.info('No changes in schema detected.')

    conf_args = current_app.extensions['migrate'].configure_args
    if conf_args.get("process_revision_directives") is None:
        conf_args["process_revision_directives"] = process_revision_directives

    connectable = get_engine()

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=get_metadata(),
            **conf_args
        )

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()

================
File: backend/migrations/README
================
Single-database configuration for Flask.

================
File: backend/migrations/script.py.mako
================
"""${message}

Revision ID: ${up_revision}
Revises: ${down_revision | comma,n}
Create Date: ${create_date}

"""
from alembic import op
import sqlalchemy as sa
${imports if imports else ""}

# revision identifiers, used by Alembic.
revision = ${repr(up_revision)}
down_revision = ${repr(down_revision)}
branch_labels = ${repr(branch_labels)}
depends_on = ${repr(depends_on)}


def upgrade():
    ${upgrades if upgrades else "pass"}


def downgrade():
    ${downgrades if downgrades else "pass"}

================
File: backend/src/models/__init__.py
================
from .base import Base
from .permission import Permission
from .role import Role
from .role_permission import role_permissions, user_roles
from .user import User
from .user_permission import UserPermission
from .permission_group import PermissionGroup
from .user_permission_group import UserPermissionGroup
from .aircraft import Aircraft
from .customer import Customer
from .fuel_truck import FuelTruck
from .fuel_order import FuelOrder, FuelOrderStatus

__all__ = [
    'Base',
    'Permission',
    'Role',
    'role_permissions',
    'user_roles',
    'User',
    'UserPermission',
    'PermissionGroup',
    'UserPermissionGroup',
    'Aircraft',
    'Customer',
    'FuelTruck',
    'FuelOrder',
    'FuelOrderStatus'
]

================
File: backend/src/models/aircraft.py
================
from datetime import datetime
from ..extensions import db

class Aircraft(db.Model):
    """Aircraft model representing an aircraft in the system."""
    __tablename__ = 'aircraft'

    # Primary key - using tail number as per MVP requirements
    tail_number = db.Column(db.String(20), primary_key=True)
    
    # New column for aircraft type
    aircraft_type = db.Column(db.String(50), nullable=False)

    # New column for fuel type
    fuel_type = db.Column(db.String(20), nullable=False)

    # Timestamps
    created_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow, onupdate=datetime.utcnow)

    def to_dict(self):
        return {
            'tail_number': self.tail_number,
            'aircraft_type': self.aircraft_type,
            'fuel_type': self.fuel_type,
            'created_at': self.created_at.isoformat(),
            'updated_at': self.updated_at.isoformat()
        }

    def __repr__(self):
        """Return string representation of the aircraft."""
        return f'<Aircraft {self.tail_number}>'

================
File: backend/src/models/base.py
================
from src.extensions import db

Base = db.Model

================
File: backend/src/models/customer.py
================
from datetime import datetime
from ..extensions import db


class Customer(db.Model):
    """Model representing a customer in the system (MVP version).
    Note: This is a simplified version for MVP and will be expanded significantly in the CRM module."""
    
    __tablename__ = 'customers'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False, index=True)
    phone = db.Column(db.String(20))
    created_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow, onupdate=datetime.utcnow)

    def to_dict(self):
        return {
            'id': self.id,
            'name': self.name,
            'email': self.email,
            'phone': self.phone,
            'created_at': self.created_at.isoformat(),
            'updated_at': self.updated_at.isoformat()
        }

    def __repr__(self):
        return f'<Customer {self.name}>'

================
File: backend/src/models/fuel_order.py
================
import enum
from datetime import datetime
from sqlalchemy import Integer, String, Boolean, DateTime, Enum, Text, Numeric, ForeignKey
from sqlalchemy.ext.hybrid import hybrid_property
from ..extensions import db

class FuelOrderStatus(enum.Enum):
    DISPATCHED = 'Dispatched'
    ACKNOWLEDGED = 'Acknowledged'
    EN_ROUTE = 'En Route'
    FUELING = 'Fueling'
    COMPLETED = 'Completed'
    REVIEWED = 'Reviewed'
    CANCELLED = 'Cancelled'

class FuelOrder(db.Model):
    __tablename__ = 'fuel_orders'

    # Primary Key
    id = db.Column(db.Integer, primary_key=True)

    # Status and Core Fields
    status = db.Column(db.Enum(FuelOrderStatus), nullable=False, default=FuelOrderStatus.DISPATCHED, index=True)
    tail_number = db.Column(db.String(20), db.ForeignKey('aircraft.tail_number'), nullable=False, index=True)
    customer_id = db.Column(db.Integer, db.ForeignKey('customers.id'), nullable=True)
    fuel_type = db.Column(db.String(50), nullable=False)
    additive_requested = db.Column(db.Boolean, default=False)
    requested_amount = db.Column(db.Numeric(10, 2), nullable=True)

    # Assignment Fields
    assigned_lst_user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=True, index=True)
    assigned_truck_id = db.Column(db.Integer, db.ForeignKey('fuel_trucks.id'), nullable=True, index=True)
    location_on_ramp = db.Column(db.String(100), nullable=True)
    
    # Notes Fields
    csr_notes = db.Column(db.Text, nullable=True)
    lst_notes = db.Column(db.Text, nullable=True)

    # Metering Fields
    start_meter_reading = db.Column(db.Numeric(12, 2), nullable=True)
    end_meter_reading = db.Column(db.Numeric(12, 2), nullable=True)

    # Timestamps
    created_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow, onupdate=datetime.utcnow)
    dispatch_timestamp = db.Column(db.DateTime, nullable=True)
    acknowledge_timestamp = db.Column(db.DateTime, nullable=True)
    en_route_timestamp = db.Column(db.DateTime, nullable=True)
    fueling_start_timestamp = db.Column(db.DateTime, nullable=True)
    completion_timestamp = db.Column(db.DateTime, nullable=True)
    reviewed_timestamp = db.Column(db.DateTime, nullable=True)
    
    # Review Fields
    reviewed_by_csr_user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=True)

    # Relationships
    aircraft = db.relationship('Aircraft', backref=db.backref('fuel_orders', lazy='dynamic'))
    customer = db.relationship('Customer', backref=db.backref('fuel_orders', lazy='dynamic'))
    assigned_lst = db.relationship('User', foreign_keys=[assigned_lst_user_id], 
                                 backref=db.backref('assigned_fuel_orders', lazy='dynamic'))
    assigned_truck = db.relationship('FuelTruck', backref=db.backref('fuel_orders', lazy='dynamic'))
    reviewed_by_csr = db.relationship('User', foreign_keys=[reviewed_by_csr_user_id], 
                                    backref=db.backref('reviewed_fuel_orders', lazy='dynamic'))

    @hybrid_property
    def calculated_gallons_dispensed(self):
        if self.start_meter_reading is not None and self.end_meter_reading is not None:
            return float(self.end_meter_reading - self.start_meter_reading)
        return None

    def __repr__(self):
        return f'<FuelOrder {self.id} - {self.tail_number}>'

================
File: backend/src/models/fuel_truck.py
================
from datetime import datetime
from ..extensions import db


class FuelTruck(db.Model):
    """Model representing a fuel truck in the system."""
    
    __tablename__ = 'fuel_trucks'

    id = db.Column(db.Integer, primary_key=True)
    truck_number = db.Column(db.String(20), unique=True, nullable=False)
    fuel_type = db.Column(db.String(50), nullable=False)
    capacity = db.Column(db.Numeric(10, 2), nullable=False)
    current_meter_reading = db.Column(db.Numeric(12, 2), nullable=False, default=0)
    is_active = db.Column(db.Boolean, nullable=False, default=True)
    created_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow, onupdate=datetime.utcnow)

    def to_dict(self):
        return {
            'id': self.id,
            'truck_number': self.truck_number,
            'fuel_type': self.fuel_type,
            'capacity': float(self.capacity),
            'current_meter_reading': float(self.current_meter_reading),
            'is_active': self.is_active,
            'created_at': self.created_at.isoformat(),
            'updated_at': self.updated_at.isoformat()
        }

    def __repr__(self):
        return f'<FuelTruck {self.truck_number}>'

================
File: backend/src/models/role_permission.py
================
from src.extensions import db
from sqlalchemy import Integer, ForeignKey

role_permissions = db.Table('role_permissions',
    db.Column('role_id', Integer, ForeignKey('roles.id'), primary_key=True),
    db.Column('permission_id', Integer, ForeignKey('permissions.id'), primary_key=True)
)

user_roles = db.Table('user_roles',
    db.Column('user_id', Integer, ForeignKey('users.id'), primary_key=True),
    db.Column('role_id', Integer, ForeignKey('roles.id'), primary_key=True)
)

================
File: backend/src/models/role.py
================
from datetime import datetime
from sqlalchemy import Integer, String, Text, DateTime
from ..extensions import db
from .role_permission import role_permissions

class Role(db.Model):
    __tablename__ = 'roles'

    id = db.Column(Integer, primary_key=True)
    name = db.Column(String(80), unique=True, nullable=False, index=True)
    description = db.Column(Text, nullable=True)
    created_at = db.Column(DateTime, default=datetime.utcnow, nullable=False)
    updated_at = db.Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)

    permissions = db.relationship(
        'Permission',
        secondary=role_permissions,
        backref=db.backref('roles', lazy='dynamic'),
        lazy='dynamic'
    )

    def __repr__(self):
        return f'<Role {self.name}>'

================
File: backend/src/models/settings.py
================
# settings.py
# Deprecated: The Setting model and settings table are no longer used. All code removed as of April 2025.

================
File: backend/src/routes/admin/__init__.py
================
from .routes import admin_bp

__all__ = ['admin_bp']

================
File: backend/src/routes/admin/aircraft_admin_routes.py
================
from flask import request, jsonify
from ...services.aircraft_service import AircraftService
from ...services.customer_service import CustomerService
from src.utils.decorators import token_required, require_permission
from ...models.user import UserRole
from ...schemas.admin_schemas import AdminAircraftSchema, AdminAircraftListResponseSchema, ErrorResponseSchema
from src.extensions import apispec
from .routes import admin_bp

@admin_bp.route('/aircraft', methods=['GET', 'OPTIONS'])
@token_required
@require_permission('MANAGE_AIRCRAFT')
def list_aircraft():
    """
    ---
    get:
      summary: List all aircraft (admin, MANAGE_AIRCRAFT permission required)
      tags:
        - Admin - Aircraft
      responses:
        200:
          description: List of aircraft
          content:
            application/json:
              schema: AdminAircraftListResponseSchema
        401:
          description: Unauthorized
        403:
          description: Forbidden (missing permission)
    """
    if request.method == 'OPTIONS':
        return jsonify({'message': 'OPTIONS request successful'}), 200
    aircraft_list, msg, status = AircraftService.get_all_aircraft(request.args)
    schema = AdminAircraftSchema(many=True)
    return jsonify({"aircraft": schema.dump(aircraft_list)}), status

@admin_bp.route('/aircraft', methods=['POST', 'OPTIONS'])
@token_required
@require_permission('MANAGE_AIRCRAFT')
def create_aircraft():
    """
    ---
    post:
      summary: Create a new aircraft (admin, MANAGE_AIRCRAFT permission required)
      tags:
        - Admin - Aircraft
      requestBody:
        required: true
        content:
          application/json:
            schema: AdminAircraftSchema
      responses:
        201:
          description: Aircraft created
          content:
            application/json:
              schema: AdminAircraftSchema
        400:
          description: Bad request
        409:
          description: Conflict
    """
    if request.method == 'OPTIONS':
        return jsonify({'message': 'OPTIONS request successful'}), 200
    data = request.get_json()
    aircraft, msg, status = AircraftService.create_aircraft(data)
    if not aircraft:
        return jsonify({"error": msg}), status
    schema = AdminAircraftSchema()
    return jsonify(schema.dump(aircraft)), status

@admin_bp.route('/aircraft/<string:tail_number>', methods=['GET'])
@token_required
@require_permission('MANAGE_AIRCRAFT')
def get_aircraft(tail_number):
    """
    ---
    get:
      summary: Get an aircraft by tail number (admin, MANAGE_AIRCRAFT permission required)
      tags:
        - Admin - Aircraft
      parameters:
        - in: path
          name: tail_number
          schema:
            type: string
          required: true
      responses:
        200:
          description: Aircraft details
          content:
            application/json:
              schema: AdminAircraftSchema
        404:
          description: Not found
    """
    aircraft, msg, status = AircraftService.get_aircraft_by_tail(tail_number)
    if not aircraft:
        return jsonify({"error": msg}), status
    schema = AdminAircraftSchema()
    return jsonify(schema.dump(aircraft)), status

@admin_bp.route('/aircraft/<string:tail_number>', methods=['PATCH'])
@token_required
@require_permission('MANAGE_AIRCRAFT')
def update_aircraft(tail_number):
    """
    ---
    patch:
      summary: Update an aircraft by tail number (admin, MANAGE_AIRCRAFT permission required)
      tags:
        - Admin - Aircraft
      parameters:
        - in: path
          name: tail_number
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema: AdminAircraftSchema
      responses:
        200:
          description: Aircraft updated
          content:
            application/json:
              schema: AdminAircraftSchema
        400:
          description: Bad request
        404:
          description: Not found
    """
    data = request.get_json()
    aircraft, msg, status = AircraftService.update_aircraft(tail_number, data)
    if not aircraft:
        return jsonify({"error": msg}), status
    schema = AdminAircraftSchema()
    return jsonify(schema.dump(aircraft)), status

@admin_bp.route('/aircraft/<string:tail_number>', methods=['DELETE'])
@token_required
@require_permission('MANAGE_AIRCRAFT')
def delete_aircraft(tail_number):
    """
    ---
    delete:
      summary: Delete an aircraft by tail number (admin, MANAGE_AIRCRAFT permission required)
      tags:
        - Admin - Aircraft
      parameters:
        - in: path
          name: tail_number
          schema:
            type: string
          required: true
      responses:
        204:
          description: Aircraft deleted
        404:
          description: Not found
        409:
          description: Conflict (referenced by other records)
    """
    deleted, msg, status = AircraftService.delete_aircraft(tail_number)
    if not deleted:
        return jsonify({"error": msg}), status
    return '', 204

================
File: backend/src/routes/admin/assignment_settings_routes.py
================
# assignment_settings_routes.py
# Deprecated: Global auto-assign setting is no longer used. All logic removed as of April 2025.

from flask import Blueprint, jsonify
from ..utils.decorators import token_required, require_permission
from . import admin_bp

@admin_bp.route('/assignment-settings', methods=['GET'])
@token_required
@require_permission('ADMIN')
def get_assignment_settings():
    """Get assignment settings.
    This endpoint is deprecated as of April 2025. Global auto-assign setting is no longer used.
    ---
    tags:
      - Admin
    security:
      - bearerAuth: []
    responses:
      404:
        description: Feature deprecated
    """
    return jsonify({
        "error": "This feature has been deprecated. Global auto-assign setting is no longer used.",
        "code": "FEATURE_DEPRECATED"
    }), 404

================
File: backend/src/routes/admin/customer_admin_routes.py
================
from flask import request, jsonify
from ...services.customer_service import CustomerService
from src.utils.decorators import token_required, require_permission
from ...models.user import UserRole
from ...schemas.admin_schemas import AdminCustomerSchema, AdminCustomerListResponseSchema, ErrorResponseSchema
from src.extensions import apispec
from .routes import admin_bp

@admin_bp.route('/customers', methods=['GET', 'OPTIONS'])
@token_required
@require_permission('MANAGE_CUSTOMERS')
def list_customers():
    """
    ---
    get:
      summary: List all customers (admin, MANAGE_CUSTOMERS permission required)
      tags:
        - Admin - Customers
      responses:
        200:
          description: List of customers
          content:
            application/json:
              schema: AdminCustomerListResponseSchema
        401:
          description: Unauthorized
        403:
          description: Forbidden (missing permission)
    """
    if request.method == 'OPTIONS':
        return jsonify({'message': 'OPTIONS request successful'}), 200
    customers, msg, status = CustomerService.get_all_customers(request.args)
    schema = AdminCustomerSchema(many=True)
    return jsonify({"customers": schema.dump(customers)}), status

@admin_bp.route('/customers', methods=['POST', 'OPTIONS'])
@token_required
@require_permission('MANAGE_CUSTOMERS')
def create_customer():
    """
    ---
    post:
      summary: Create a new customer (admin, MANAGE_CUSTOMERS permission required)
      tags:
        - Admin - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema: AdminCustomerSchema
      responses:
        201:
          description: Customer created
          content:
            application/json:
              schema: AdminCustomerSchema
        400:
          description: Bad request
        409:
          description: Conflict
    """
    if request.method == 'OPTIONS':
        return jsonify({'message': 'OPTIONS request successful'}), 200
    data = request.get_json()
    customer, msg, status = CustomerService.create_customer(data)
    if not customer:
        return jsonify({"error": msg}), status
    schema = AdminCustomerSchema()
    return jsonify(schema.dump(customer)), status

@admin_bp.route('/customers/<int:customer_id>', methods=['GET'])
@token_required
@require_permission('MANAGE_CUSTOMERS')
def get_customer(customer_id):
    """
    ---
    get:
      summary: Get a customer by ID (admin, MANAGE_CUSTOMERS permission required)
      tags:
        - Admin - Customers
      parameters:
        - in: path
          name: customer_id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Customer details
          content:
            application/json:
              schema: AdminCustomerSchema
        404:
          description: Not found
    """
    customer, msg, status = CustomerService.get_customer_by_id(customer_id)
    if not customer:
        return jsonify({"error": msg}), status
    schema = AdminCustomerSchema()
    return jsonify(schema.dump(customer)), status

@admin_bp.route('/customers/<int:customer_id>', methods=['PATCH'])
@token_required
@require_permission('MANAGE_CUSTOMERS')
def update_customer(customer_id):
    """
    ---
    patch:
      summary: Update a customer by ID (admin, MANAGE_CUSTOMERS permission required)
      tags:
        - Admin - Customers
      parameters:
        - in: path
          name: customer_id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema: AdminCustomerSchema
      responses:
        200:
          description: Customer updated
          content:
            application/json:
              schema: AdminCustomerSchema
        400:
          description: Bad request
        404:
          description: Not found
    """
    data = request.get_json()
    customer, msg, status = CustomerService.update_customer(customer_id, data)
    if not customer:
        return jsonify({"error": msg}), status
    schema = AdminCustomerSchema()
    return jsonify(schema.dump(customer)), status

@admin_bp.route('/customers/<int:customer_id>', methods=['DELETE'])
@token_required
@require_permission('MANAGE_CUSTOMERS')
def delete_customer(customer_id):
    """
    ---
    delete:
      summary: Delete a customer by ID (admin, MANAGE_CUSTOMERS permission required)
      tags:
        - Admin - Customers
      parameters:
        - in: path
          name: customer_id
          schema:
            type: integer
          required: true
      responses:
        204:
          description: Customer deleted
        404:
          description: Not found
        409:
          description: Conflict (referenced by other records)
    """
    deleted, msg, status = CustomerService.delete_customer(customer_id)
    if not deleted:
        return jsonify({"error": msg}), status
    return '', 204

================
File: backend/src/routes/admin/lst_admin_routes.py
================
from flask import request, jsonify, current_app
from marshmallow import ValidationError
from ...services.user_service import UserService
from ...services.fuel_order_service import FuelOrderService
from src.utils.decorators import token_required, require_permission
from ...models.user import UserRole
from ...schemas.user_schemas import (
    UserDetailSchema,
    UserUpdateRequestSchema,
    ErrorResponseSchema
)
from .routes import admin_bp
from datetime import datetime, timedelta
from sqlalchemy import func, desc
from ...models.fuel_order import FuelOrder, FuelOrderStatus
from ...models.user import User
from ...extensions import db

@admin_bp.route('/lsts', methods=['GET', 'OPTIONS'])
@token_required
@require_permission('MANAGE_USERS')
def get_lsts():
    """Get a list of all LSTs with performance metrics.
    Returns LST users with enhanced performance data.
    ---
    tags:
      - LST Management
    security:
      - bearerAuth: []
    parameters:
      - in: query
        name: status
        schema:
          type: string
          enum: [active, inactive, on_leave, all]
        required: false
        description: Filter LSTs by status (default: all)
      - in: query
        name: shift
        schema:
          type: string
          enum: [day, swing, night, all]
        required: false
        description: Filter LSTs by shift (default: all)
    responses:
      200:
        description: List of LSTs retrieved successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                lsts:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      email:
                        type: string
                      employee_id:
                        type: string
                      status:
                        type: string
                        enum: [active, inactive, on_leave]
                      shift:
                        type: string
                        enum: [day, swing, night]
                      certifications:
                        type: array
                        items:
                          type: string
                      performance_rating:
                        type: number
                      orders_completed:
                        type: integer
                      average_time:
                        type: number
                      last_active:
                        type: string
                        format: date-time
                      hire_date:
                        type: string
                        format: date-time
                message:
                  type: string
      401:
        description: Unauthorized
      403:
        description: Forbidden (missing permission)
      500:
        description: Server error
    """
    if request.method == 'OPTIONS':
        return jsonify({'message': 'OPTIONS request successful'}), 200
    
    try:
        # Get query parameters
        status_filter = request.args.get('status', 'all')
        shift_filter = request.args.get('shift', 'all')
        
        # Build filters for user service
        filters = {'role': 'Line Service Technician'}
        
        # Handle status filter
        if status_filter != 'all':
            if status_filter == 'active':
                filters['is_active'] = True
            elif status_filter == 'inactive':
                filters['is_active'] = False
            # on_leave would need custom field, for now treat as active
            elif status_filter == 'on_leave':
                filters['is_active'] = True  # Will need custom field later
        
        # Get LST users
        users, message, status_code = UserService.get_users(filters)
        
        if status_code != 200:
            return jsonify({"error": message}), status_code
        
        # Enhance each LST with performance data
        enhanced_lsts = []
        for user in users:
            # Calculate performance metrics
            performance_data = _calculate_lst_performance(user.id)
            
            # Create enhanced LST object using real database fields
            lst_data = {
                "id": user.id,
                "name": user.name or user.username,
                "email": user.email,
                "employee_id": user.employee_id or f"LST{user.id:03d}",
                "status": user.status or ("active" if user.is_active else "inactive"),
                "shift": user.shift or 'day',
                "certifications": user.certifications or ["Fuel Safety", "Aircraft Ground Support"],
                "performance_rating": user.performance_rating or performance_data['performance_rating'],
                "orders_completed": user.orders_completed or performance_data['orders_completed'],
                "average_time": user.average_time or performance_data['average_time'],
                "last_active": (user.last_active.isoformat() if user.last_active else 
                              performance_data['last_active'].isoformat() if performance_data['last_active'] else 
                              user.updated_at.isoformat()),
                "hire_date": user.hire_date.isoformat() if user.hire_date else user.created_at.isoformat()
            }
            
            # Apply shift filter if specified
            if shift_filter != 'all' and lst_data['shift'] != shift_filter:
                continue
                
            enhanced_lsts.append(lst_data)
        
        return jsonify({
            "lsts": enhanced_lsts,
            "message": f"Retrieved {len(enhanced_lsts)} LSTs successfully"
        }), 200
        
    except Exception as e:
        current_app.logger.error(f"Error in get_lsts: {str(e)}")
        return jsonify({"error": "Failed to retrieve LSTs"}), 500

@admin_bp.route('/lsts', methods=['POST'])
@token_required
@require_permission('MANAGE_USERS')
def create_lst():
    """Create a new LST user.
    Creates a new user with LST role and additional LST-specific fields.
    ---
    tags:
      - LST Management
    security:
      - bearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - email
              - password
            properties:
              name:
                type: string
              email:
                type: string
                format: email
              password:
                type: string
                minLength: 8
              employee_id:
                type: string
              shift:
                type: string
                enum: [day, swing, night]
                default: day
              certifications:
                type: array
                items:
                  type: string
    responses:
      201:
        description: LST created successfully
      400:
        description: Bad Request
      409:
        description: Conflict (email already exists)
      500:
        description: Server error
    """
    try:
        data = request.get_json()
        if not data:
            return jsonify({"error": "No data provided"}), 400
        
        # Get LST role ID
        from ...models.role import Role
        lst_role = Role.query.filter_by(name='Line Service Technician').first()
        if not lst_role:
            return jsonify({"error": "Line Service Technician role not found"}), 500
        
        # Prepare user data with LST role
        user_data = {
            'name': data.get('name'),
            'email': data.get('email'),
            'password': data.get('password'),
            'username': data.get('email'),  # Use email as username
            'role_ids': [lst_role.id]  # Assign LST role using role ID
        }
        
        # Create the user
        user, message, status_code = UserService.create_user(user_data)
        
        if status_code != 201:
            return jsonify({"error": message}), status_code
        
        # Update LST-specific fields now that user is created
        try:
            # Set LST-specific fields
            user.employee_id = data.get('employee_id', f"LST{user.id:03d}")
            user.status = 'active'
            user.shift = data.get('shift', 'day')
            user.certifications = data.get('certifications', ["Fuel Safety", "Aircraft Ground Support"])
            user.performance_rating = 0.0
            user.orders_completed = 0
            user.average_time = 0.0
            user.last_active = datetime.utcnow()
            user.hire_date = user.created_at
            
            db.session.commit()
            
        except Exception as e:
            current_app.logger.error(f"Error setting LST fields: {str(e)}")
            # Continue with default values if field update fails
        
        lst_data = {
            "id": user.id,
            "name": user.name,
            "email": user.email,
            "employee_id": user.employee_id or f"LST{user.id:03d}",
            "status": user.status or "active",
            "shift": user.shift or 'day',
            "certifications": user.certifications or ["Fuel Safety", "Aircraft Ground Support"],
            "performance_rating": user.performance_rating or 0.0,
            "orders_completed": user.orders_completed or 0,
            "average_time": user.average_time or 0.0,
            "last_active": user.last_active.isoformat() if user.last_active else datetime.utcnow().isoformat(),
            "hire_date": user.hire_date.isoformat() if user.hire_date else user.created_at.isoformat()
        }
        
        return jsonify({
            "lst": lst_data,
            "message": "LST created successfully"
        }), 201
        
    except Exception as e:
        current_app.logger.error(f"Error in create_lst: {str(e)}")
        return jsonify({"error": "Failed to create LST"}), 500

@admin_bp.route('/lsts/<int:lst_id>', methods=['GET'])
@token_required
@require_permission('MANAGE_USERS')
def get_lst(lst_id):
    """Get LST details by ID.
    Returns detailed LST information including performance metrics.
    """
    try:
        # Get user and verify it's an LST
        user, message, status_code = UserService.get_user_by_id(lst_id)
        
        if status_code != 200:
            return jsonify({"error": message}), status_code
        
        # Verify user has LST role
        if not any(role.name == 'Line Service Technician' for role in user.roles):
            return jsonify({"error": "User is not an LST"}), 400
        
        # Get performance data
        performance_data = _calculate_lst_performance(user.id)
        
        lst_data = {
            "id": user.id,
            "name": user.name or user.username,
            "email": user.email,
            "employee_id": user.employee_id or f"LST{user.id:03d}",
            "status": user.status or ("active" if user.is_active else "inactive"),
            "shift": user.shift or 'day',
            "certifications": user.certifications or ["Fuel Safety", "Aircraft Ground Support"],
            "performance_rating": user.performance_rating or performance_data['performance_rating'],
            "orders_completed": user.orders_completed or performance_data['orders_completed'],
            "average_time": user.average_time or performance_data['average_time'],
            "last_active": (user.last_active.isoformat() if user.last_active else 
                          performance_data['last_active'].isoformat() if performance_data['last_active'] else 
                          user.updated_at.isoformat()),
            "hire_date": user.hire_date.isoformat() if user.hire_date else user.created_at.isoformat()
        }
        
        return jsonify({
            "lst": lst_data,
            "message": "LST retrieved successfully"
        }), 200
        
    except Exception as e:
        current_app.logger.error(f"Error in get_lst: {str(e)}")
        return jsonify({"error": "Failed to retrieve LST"}), 500

@admin_bp.route('/lsts/<int:lst_id>', methods=['PATCH'])
@token_required
@require_permission('MANAGE_USERS')
def update_lst(lst_id):
    """Update LST details.
    Updates LST-specific fields and user information.
    """
    try:
        data = request.get_json()
        if not data:
            return jsonify({"error": "No data provided"}), 400
        
        # Get current user and verify it's an LST
        user, message, status_code = UserService.get_user_by_id(lst_id)
        if status_code != 200:
            return jsonify({"error": message}), status_code
        
        # Verify user has LST role
        if not any(role.name == 'Line Service Technician' for role in user.roles):
            return jsonify({"error": "User is not an LST"}), 400
        
        # Prepare user update data (basic fields)
        user_update_data = {}
        if 'name' in data:
            user_update_data['name'] = data['name']
        if 'email' in data:
            user_update_data['email'] = data['email']
        if 'status' in data:
            # Map LST status to user is_active
            if data['status'] == 'active':
                user_update_data['is_active'] = True
            elif data['status'] == 'inactive':
                user_update_data['is_active'] = False
            # TODO: Handle 'on_leave' status when model is extended
        
        # Update user if there are user fields to update
        if user_update_data:
            user, message, status_code = UserService.update_user(lst_id, user_update_data)
            if status_code != 200:
                return jsonify({"error": message}), status_code
        
        # Update LST-specific fields
        try:
            lst_fields_updated = False
            
            if 'employee_id' in data:
                user.employee_id = data['employee_id']
                lst_fields_updated = True
            if 'shift' in data:
                user.shift = data['shift']
                lst_fields_updated = True
            if 'certifications' in data:
                user.certifications = data['certifications']
                lst_fields_updated = True
            if 'status' in data and data['status'] == 'on_leave':
                user.status = 'on_leave'
                lst_fields_updated = True
            elif 'status' in data:
                # Active/inactive handled above in user_update_data
                user.status = data['status']
                lst_fields_updated = True
                
            if lst_fields_updated:
                db.session.commit()
                
        except Exception as e:
            current_app.logger.error(f"Error updating LST fields: {str(e)}")
            # Continue with existing values if update fails
        
        # Get updated performance data
        performance_data = _calculate_lst_performance(user.id)
        
        lst_data = {
            "id": user.id,
            "name": user.name or user.username,
            "email": user.email,
            "employee_id": user.employee_id or f"LST{user.id:03d}",
            "status": user.status or ("active" if user.is_active else "inactive"),
            "shift": user.shift or 'day',
            "certifications": user.certifications or ["Fuel Safety", "Aircraft Ground Support"],
            "performance_rating": user.performance_rating or performance_data['performance_rating'],
            "orders_completed": user.orders_completed or performance_data['orders_completed'],
            "average_time": user.average_time or performance_data['average_time'],
            "last_active": (user.last_active.isoformat() if user.last_active else 
                          performance_data['last_active'].isoformat() if performance_data['last_active'] else 
                          user.updated_at.isoformat()),
            "hire_date": user.hire_date.isoformat() if user.hire_date else user.created_at.isoformat()
        }
        
        return jsonify({
            "lst": lst_data,
            "message": "LST updated successfully"
        }), 200
        
    except Exception as e:
        current_app.logger.error(f"Error in update_lst: {str(e)}")
        return jsonify({"error": "Failed to update LST"}), 500

@admin_bp.route('/lsts/<int:lst_id>', methods=['DELETE'])
@token_required
@require_permission('MANAGE_USERS')
def delete_lst(lst_id):
    """Delete (deactivate) an LST.
    Soft deletes the LST by deactivating the user account.
    """
    try:
        # Verify user exists and is an LST
        user, message, status_code = UserService.get_user_by_id(lst_id)
        if status_code != 200:
            return jsonify({"error": message}), status_code
        
        # Verify user has LST role
        if not any(role.name == 'Line Service Technician' for role in user.roles):
            return jsonify({"error": "User is not an LST"}), 400
        
        # Delete the user (soft delete)
        success, message, status_code = UserService.delete_user(lst_id)
        
        if success:
            return jsonify({"message": "LST deactivated successfully"}), status_code
        else:
            return jsonify({"error": message}), status_code
            
    except Exception as e:
        current_app.logger.error(f"Error in delete_lst: {str(e)}")
        return jsonify({"error": "Failed to delete LST"}), 500

@admin_bp.route('/lsts/stats', methods=['GET'])
@token_required
@require_permission('MANAGE_USERS')
def get_lst_stats():
    """Get LST statistics and aggregated performance metrics.
    Returns summary statistics for all LSTs.
    """
    try:
        # Get all LST users
        filters = {'role': 'Line Service Technician'}
        users, message, status_code = UserService.get_users(filters)
        
        if status_code != 200:
            return jsonify({"error": message}), status_code
        
        # Calculate aggregate statistics
        total_lsts = len(users)
        active_lsts = len([u for u in users if u.is_active])
        
        # Calculate average performance
        total_performance = 0
        total_orders = 0
        total_time = 0
        active_count = 0
        
        for user in users:
            if user.is_active:
                performance_data = _calculate_lst_performance(user.id)
                if performance_data['orders_completed'] > 0:
                    total_performance += performance_data['performance_rating']
                    total_orders += performance_data['orders_completed']
                    total_time += performance_data['average_time']
                    active_count += 1
        
        avg_performance = total_performance / active_count if active_count > 0 else 0
        avg_orders = total_orders / active_count if active_count > 0 else 0
        avg_time = total_time / active_count if active_count > 0 else 0
        
        stats = {
            "total_lsts": total_lsts,
            "active_lsts": active_lsts,
            "inactive_lsts": total_lsts - active_lsts,
            "average_performance_rating": round(avg_performance, 2),
            "total_orders_completed": total_orders,
            "average_orders_per_lst": round(avg_orders, 1),
            "average_completion_time": round(avg_time, 1)
        }
        
        return jsonify({
            "stats": stats,
            "message": "LST statistics retrieved successfully"
        }), 200
        
    except Exception as e:
        current_app.logger.error(f"Error in get_lst_stats: {str(e)}")
        return jsonify({"error": "Failed to retrieve LST statistics"}), 500

# Helper functions
def _calculate_lst_performance(lst_id):
    """Calculate performance metrics for an LST."""
    try:
        # Get completed orders for this LST
        completed_orders = db.session.query(FuelOrder).filter(
            FuelOrder.assigned_lst_user_id == lst_id,
            FuelOrder.status == FuelOrderStatus.COMPLETED
        ).all()
        
        orders_completed = len(completed_orders)
        
        if orders_completed == 0:
            return {
                'performance_rating': 0.0,
                'orders_completed': 0,
                'average_time': 0,
                'last_active': None
            }
        
        # Calculate average completion time (placeholder calculation)
        # In a real system, you'd track start/end times
        total_time = sum(15 + (i * 2) for i in range(orders_completed))  # Mock calculation
        average_time = total_time / orders_completed
        
        # Calculate performance rating based on completion rate and time
        # This is a simplified calculation
        performance_rating = min(5.0, 3.0 + (orders_completed / 50) + (1 / (average_time / 15)))
        
        # Get last activity (most recent completed order)
        last_active = None
        if completed_orders:
            last_order = max(completed_orders, key=lambda x: x.updated_at)
            last_active = last_order.updated_at
        
        # Update user's performance fields in database
        try:
            user = User.query.get(lst_id)
            if user:
                user.performance_rating = round(performance_rating, 1)
                user.orders_completed = orders_completed
                user.average_time = round(average_time, 1)
                if last_active:
                    user.last_active = last_active
                db.session.commit()
        except Exception as e:
            current_app.logger.error(f"Error updating performance fields for user {lst_id}: {str(e)}")
        
        return {
            'performance_rating': round(performance_rating, 1),
            'orders_completed': orders_completed,
            'average_time': round(average_time, 1),
            'last_active': last_active
        }
        
    except Exception as e:
        current_app.logger.error(f"Error calculating LST performance for {lst_id}: {str(e)}")
        return {
            'performance_rating': 0.0,
            'orders_completed': 0,
            'average_time': 0,
            'last_active': None
        }

def _get_lst_status(user):
    """Get LST status based on user data."""
    if user.status:
        return user.status
    if not user.is_active:
        return "inactive"
    return "active"

def _get_lst_certifications(user):
    """Get LST certifications."""
    if user.certifications:
        return user.certifications
    # Return default certifications if none set
    return ["Fuel Safety", "Aircraft Ground Support"]

================
File: backend/src/routes/admin/permission_admin_routes.py
================
from flask import request, jsonify
from ...services.permission_service import PermissionService
from src.utils.decorators import token_required, require_permission
from ...models.user import UserRole
from ...schemas import PermissionSchema, ErrorResponseSchema
from marshmallow import Schema, fields
from src.extensions import apispec
from .routes import admin_bp

class PermissionListResponseSchema(Schema):
    permissions = fields.List(fields.Nested(PermissionSchema))

@admin_bp.route('/permissions', methods=['GET', 'OPTIONS'])
@token_required
@require_permission('MANAGE_ROLES')
def get_permissions():
    """
    ---
    get:
      summary: List all permissions (admin, MANAGE_ROLES permission required)
      tags:
        - Admin - Permissions
      responses:
        200:
          description: List of permissions
          content:
            application/json:
              schema: PermissionListResponseSchema
        401:
          description: Unauthorized
        403:
          description: Forbidden (missing permission)
    """
    if request.method == 'OPTIONS':
        return jsonify({'message': 'OPTIONS request successful'}), 200
    permissions, msg, status = PermissionService.get_all_permissions()
    schema = PermissionSchema(many=True)
    return jsonify({"permissions": schema.dump(permissions)}), status

================
File: backend/src/routes/__init__.py
================
from .fuel_order_routes import fuel_order_bp
from .auth_routes import auth_bp
from .user_routes import user_bp
from .fuel_truck_routes import truck_bp

__all__ = ['fuel_order_bp', 'auth_bp', 'user_bp', 'truck_bp']

================
File: backend/src/routes/aircraft_routes.py
================
from flask import Blueprint, request, jsonify
from ..utils.decorators import token_required, require_permission
from ..models.user import UserRole
from ..services.aircraft_service import AircraftService
from ..schemas.aircraft_schemas import (
    AircraftCreateSchema,
    AircraftUpdateSchema,
    AircraftResponseSchema,
    AircraftListSchema,
    ErrorResponseSchema
)

aircraft_bp = Blueprint('aircraft_bp', __name__, url_prefix='/api/aircraft')

@aircraft_bp.route('', methods=['GET', 'OPTIONS'])
@aircraft_bp.route('/', methods=['GET', 'OPTIONS'])
@token_required
@require_permission('VIEW_AIRCRAFT')
def list_aircraft():
    """Get all aircraft (VIEW_AIRCRAFT permission required).
    ---
    tags:
      - Aircraft
    security:
      - bearerAuth: []
    responses:
      200:
        description: Aircraft list
        content:
          application/json:
            schema: AircraftListSchema
    """
    if request.method == 'OPTIONS':
        return jsonify({'message': 'OPTIONS request successful'}), 200
    filters = {}
    if 'customer_id' in request.args:
        filters['customer_id'] = request.args.get('customer_id', type=int)
    aircraft, message, status_code = AircraftService.get_all_aircraft(filters)
    return jsonify({
        "message": message,
        "aircraft": [AircraftResponseSchema().dump(a) for a in aircraft]
    }), status_code

@aircraft_bp.route('', methods=['POST', 'OPTIONS'])
@aircraft_bp.route('/', methods=['POST', 'OPTIONS'])
@token_required
@require_permission('MANAGE_AIRCRAFT')
def create_aircraft():
    """Create an aircraft (MANAGE_AIRCRAFT permission required).
    ---
    tags:
      - Aircraft
    security:
      - bearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema: AircraftCreateSchema
    responses:
      201:
        description: Aircraft created
        content:
          application/json:
            schema: AircraftResponseSchema
    """
    if request.method == 'OPTIONS':
        return jsonify({'message': 'OPTIONS request successful'}), 200
    schema = AircraftCreateSchema()
    try:
        data = schema.load(request.get_json())
    except Exception as e:
        return jsonify({"error": str(e)}), 400
    aircraft, message, status_code = AircraftService.create_aircraft(data)
    if aircraft:
        return jsonify({"message": message, "aircraft": AircraftResponseSchema().dump(aircraft)}), status_code
    else:
        return jsonify({"error": message}), status_code

@aircraft_bp.route('/<string:tail_number>', methods=['GET'])
@token_required
@require_permission('VIEW_AIRCRAFT')
def get_aircraft(tail_number):
    """Get an aircraft by tail number (VIEW_AIRCRAFT permission required).
    ---
    tags:
      - Aircraft
    security:
      - bearerAuth: []
    parameters:
      - in: path
        name: tail_number
        schema:
          type: string
        required: true
        description: Tail number
    responses:
      200:
        description: Aircraft found
        content:
          application/json:
            schema: AircraftResponseSchema
      404:
        description: Not found
        content:
          application/json:
            schema: ErrorResponseSchema
    """
    aircraft, message, status_code = AircraftService.get_aircraft_by_tail(tail_number)
    if aircraft:
        return jsonify({"message": message, "aircraft": AircraftResponseSchema().dump(aircraft)}), status_code
    else:
        return jsonify({"error": message}), status_code

@aircraft_bp.route('/<string:tail_number>', methods=['PATCH'])
@token_required
@require_permission('MANAGE_AIRCRAFT')
def update_aircraft(tail_number):
    """Update an aircraft (MANAGE_AIRCRAFT permission required).
    ---
    tags:
      - Aircraft
    security:
      - bearerAuth: []
    parameters:
      - in: path
        name: tail_number
        schema:
          type: string
        required: true
        description: Tail number
    requestBody:
      required: true
      content:
        application/json:
          schema: AircraftUpdateSchema
    responses:
      200:
        description: Aircraft updated
        content:
          application/json:
            schema: AircraftResponseSchema
      404:
        description: Not found
        content:
          application/json:
            schema: ErrorResponseSchema
    """
    schema = AircraftUpdateSchema(partial=True)
    try:
        data = schema.load(request.get_json())
    except Exception as e:
        return jsonify({"error": str(e)}), 400
    aircraft, message, status_code = AircraftService.update_aircraft(tail_number, data)
    if aircraft:
        return jsonify({"message": message, "aircraft": AircraftResponseSchema().dump(aircraft)}), status_code
    else:
        return jsonify({"error": message}), status_code

@aircraft_bp.route('/quick-create', methods=['POST', 'OPTIONS'])
@token_required
@require_permission('MANAGE_AIRCRAFT')
def quick_create_aircraft():
    """Quick create an aircraft with minimal fields (MANAGE_AIRCRAFT permission required).
    ---
    tags:
      - Aircraft
    security:
      - bearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              tail_number:
                type: string
                description: Aircraft tail number
              aircraft_type:
                type: string
                description: Type of aircraft
              fuel_type:
                type: string
                description: Type of fuel
            required:
              - tail_number
              - aircraft_type
              - fuel_type
    responses:
      201:
        description: Aircraft created successfully
        content:
          application/json:
            schema: AircraftResponseSchema
      400:
        description: Bad request
        content:
          application/json:
            schema: ErrorResponseSchema
      409:
        description: Aircraft already exists
        content:
          application/json:
            schema: ErrorResponseSchema
    """
    if request.method == 'OPTIONS':
        return jsonify({'message': 'OPTIONS request successful'}), 200
    
    data = request.get_json()
    if not data:
        return jsonify({"error": "No data provided"}), 400
    
    # Validate required fields
    required_fields = ['tail_number', 'aircraft_type', 'fuel_type']
    for field in required_fields:
        if field not in data or not data[field]:
            return jsonify({"error": f"Missing required field: {field}"}), 400
    
    aircraft, message, status_code = AircraftService.create_aircraft(data)
    if aircraft:
        return jsonify({"message": message, "aircraft": AircraftResponseSchema().dump(aircraft)}), status_code
    else:
        return jsonify({"error": message}), status_code

@aircraft_bp.route('/<string:tail_number>', methods=['DELETE'])
@token_required
@require_permission('MANAGE_AIRCRAFT')
def delete_aircraft(tail_number):
    """Delete an aircraft (MANAGE_AIRCRAFT permission required).
    ---
    tags:
      - Aircraft
    security:
      - bearerAuth: []
    parameters:
      - in: path
        name: tail_number
        schema:
          type: string
        required: true
        description: Tail number
    responses:
      200:
        description: Aircraft deleted
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
      404:
        description: Not found
        content:
          application/json:
            schema: ErrorResponseSchema
    """
    success, message, status_code = AircraftService.delete_aircraft(tail_number)
    if success:
        return jsonify({"message": message}), status_code
    else:
        return jsonify({"error": message}), status_code

================
File: backend/src/routes/customer_routes.py
================
from flask import Blueprint, request, jsonify
from ..utils.decorators import token_required, require_permission
from ..models.user import UserRole
from ..services.customer_service import CustomerService
from ..schemas.customer_schemas import (
    CustomerCreateSchema,
    CustomerUpdateSchema,
    CustomerResponseSchema,
    CustomerListSchema,
    ErrorResponseSchema
)

customer_bp = Blueprint('customer_bp', __name__, url_prefix='/api/customers')

@customer_bp.route('', methods=['GET', 'OPTIONS'])
@customer_bp.route('/', methods=['GET', 'OPTIONS'])
@token_required
@require_permission('VIEW_CUSTOMERS')
def list_customers():
    """Get all customers (VIEW_CUSTOMERS permission required).
    ---
    tags:
      - Customers
    security:
      - bearerAuth: []
    responses:
      200:
        description: Customer list
        content:
          application/json:
            schema: CustomerListSchema
    """
    if request.method == 'OPTIONS':
        return jsonify({'message': 'OPTIONS request successful'}), 200
    customers, message, status_code = CustomerService.get_all_customers()
    return jsonify({
        "message": message,
        "customers": [CustomerResponseSchema().dump(c) for c in customers]
    }), status_code

@customer_bp.route('', methods=['POST', 'OPTIONS'])
@customer_bp.route('/', methods=['POST', 'OPTIONS'])
@token_required
@require_permission('MANAGE_CUSTOMERS')
def create_customer():
    """Create a customer (MANAGE_CUSTOMERS permission required).
    ---
    tags:
      - Customers
    security:
      - bearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema: CustomerCreateSchema
    responses:
      201:
        description: Customer created
        content:
          application/json:
            schema: CustomerResponseSchema
    """
    if request.method == 'OPTIONS':
        return jsonify({'message': 'OPTIONS request successful'}), 200
    schema = CustomerCreateSchema()
    try:
        data = schema.load(request.get_json())
    except Exception as e:
        return jsonify({"error": str(e)}), 400
    customer, message, status_code = CustomerService.create_customer(data)
    if customer:
        return jsonify({"message": message, "customer": CustomerResponseSchema().dump(customer)}), status_code
    else:
        return jsonify({"error": message}), status_code

@customer_bp.route('/<int:customer_id>', methods=['GET'])
@token_required
@require_permission('VIEW_CUSTOMERS')
def get_customer(customer_id):
    """Get a customer by ID (VIEW_CUSTOMERS permission required).
    ---
    tags:
      - Customers
    security:
      - bearerAuth: []
    parameters:
      - in: path
        name: customer_id
        schema:
          type: integer
        required: true
        description: Customer ID
    responses:
      200:
        description: Customer found
        content:
          application/json:
            schema: CustomerResponseSchema
      404:
        description: Not found
        content:
          application/json:
            schema: ErrorResponseSchema
    """
    customer, message, status_code = CustomerService.get_customer_by_id(customer_id)
    if customer:
        return jsonify({"message": message, "customer": CustomerResponseSchema().dump(customer)}), status_code
    else:
        return jsonify({"error": message}), status_code

@customer_bp.route('/<int:customer_id>', methods=['PATCH'])
@token_required
@require_permission('MANAGE_CUSTOMERS')
def update_customer(customer_id):
    """Update a customer (MANAGE_CUSTOMERS permission required).
    ---
    tags:
      - Customers
    security:
      - bearerAuth: []
    parameters:
      - in: path
        name: customer_id
        schema:
          type: integer
        required: true
        description: Customer ID
    requestBody:
      required: true
      content:
        application/json:
          schema: CustomerUpdateSchema
    responses:
      200:
        description: Customer updated
        content:
          application/json:
            schema: CustomerResponseSchema
      404:
        description: Not found
        content:
          application/json:
            schema: ErrorResponseSchema
    """
    schema = CustomerUpdateSchema(partial=True)
    try:
        data = schema.load(request.get_json())
    except Exception as e:
        return jsonify({"error": str(e)}), 400
    customer, message, status_code = CustomerService.update_customer(customer_id, data)
    if customer:
        return jsonify({"message": message, "customer": CustomerResponseSchema().dump(customer)}), status_code
    else:
        return jsonify({"error": message}), status_code

@customer_bp.route('/<int:customer_id>', methods=['DELETE'])
@token_required
@require_permission('MANAGE_CUSTOMERS')
def delete_customer(customer_id):
    """Delete a customer (MANAGE_CUSTOMERS permission required).
    ---
    tags:
      - Customers
    security:
      - bearerAuth: []
    parameters:
      - in: path
        name: customer_id
        schema:
          type: integer
        required: true
        description: Customer ID
    responses:
      200:
        description: Customer deleted
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
      404:
        description: Not found
        content:
          application/json:
            schema: ErrorResponseSchema
    """
    success, message, status_code = CustomerService.delete_customer(customer_id)
    if success:
        return jsonify({"message": message}), status_code
    else:
        return jsonify({"error": message}), status_code

================
File: backend/src/routes/fuel_order_routes.py
================
from flask import Blueprint, request, jsonify, g, Response, current_app
from decimal import Decimal
from datetime import datetime
from ..utils.decorators import token_required, require_permission
from ..models.user import UserRole
from ..models.fuel_order import FuelOrder, FuelOrderStatus
from ..services.fuel_order_service import FuelOrderService
from ..models.fuel_truck import FuelTruck
from ..schemas import OrderStatusCountsResponseSchema, ErrorResponseSchema
from ..extensions import db
from ..models.aircraft import Aircraft
from ..services.aircraft_service import AircraftService
from sqlalchemy.exc import IntegrityError
from ..models import User, Customer
import logging

# Create the blueprint for fuel order routes
fuel_order_bp = Blueprint('fuel_order_bp', __name__)

# Special value for auto-assigning LST
AUTO_ASSIGN_LST_ID = -1  # If this value is provided, backend will auto-select least busy LST
AUTO_ASSIGN_TRUCK_ID = -1 # If this value is provided, backend will auto-select an available truck

logger = logging.getLogger(__name__)

@fuel_order_bp.route('/stats/status-counts', methods=['GET', 'OPTIONS'])
@fuel_order_bp.route('/stats/status-counts/', methods=['GET', 'OPTIONS'])
@token_required
@require_permission('VIEW_ORDER_STATS')
def get_status_counts():
    if request.method == 'OPTIONS':
        return jsonify({'message': 'OPTIONS request successful'}), 200
    try:
        counts, message, status_code = FuelOrderService.get_status_counts(current_user=g.current_user)
        if counts is not None:
            return jsonify({"message": message, "counts": counts}), status_code
        else:
            return jsonify({"error": message}), status_code
    except Exception as e:
        current_app.logger.error(f"Unhandled exception in get_status_counts: {str(e)}")
        return jsonify({"error": "Internal server error in get_status_counts.", "details": str(e)}), 500


@fuel_order_bp.route('', methods=['POST', 'OPTIONS'])
@fuel_order_bp.route('/', methods=['POST', 'OPTIONS'])
@token_required
@require_permission('CREATE_ORDER')
def create_fuel_order():
    if request.method == 'OPTIONS':
        # Pre-flight request. Reply successfully:
        # Flask-CORS will handle adding the necessary headers.
        # We just need to return a valid response.
        return jsonify({'message': 'OPTIONS request successful'}), 200
    current_app.logger.info(f"--- Entered create_fuel_order function. Request Method: {request.method} ---")
    logger.info('[DEBUG] JWT_SECRET_KEY in create_fuel_order: %s', current_app.config.get('JWT_SECRET_KEY'))
    logger.info('[DEBUG] JWT_ALGORITHM in create_fuel_order: %s', current_app.config.get('JWT_ALGORITHM', 'HS256'))
    logger.info('Entered create_fuel_order')
    logger.info('Request data: %s', request.get_json())
    """Create a new fuel order.
    Requires CREATE_ORDER permission. If assigned_lst_user_id is -1, the backend will auto-assign the least busy active LST.
    ---
    tags:
      - Fuel Orders
    security:
      - bearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema: FuelOrderCreateRequestSchema
    responses:
      201:
        description: Fuel order created successfully
        content:
          application/json:
            schema: FuelOrderCreateResponseSchema
      400:
        description: Bad Request (e.g., missing fields, validation error, invalid related IDs)
        content:
          application/json:
            schema: ErrorResponseSchema
      401:
        description: Unauthorized (invalid/missing token)
        content:
          application/json:
            schema: ErrorResponseSchema
      403:
        description: Forbidden (missing permission)
        content:
          application/json:
            schema: ErrorResponseSchema
      500:
        description: Server error (e.g., database error)
        content:
          application/json:
            schema: ErrorResponseSchema
    """
    data = request.get_json()
    
    # Check if data exists and is a dictionary
    if not data or not isinstance(data, dict):
        return jsonify({"error": "Invalid request data"}), 400
    
    # Required fields validation (modified for assigned_truck_id and requested_amount)
    base_required_fields = {
        'tail_number': str,
        'fuel_type': str,
        'assigned_lst_user_id': int,
        'assigned_truck_id': int,
        # 'requested_amount': float, # Handled separately for robust conversion
        # 'location_on_ramp': str # Removed to allow Marshmallow to handle validation
    }

    # Validate requested_amount separately for robust conversion
    if 'requested_amount' not in data:
        logger.error('Step 2.1: Missing required field: requested_amount')
        return jsonify({"error": "Missing required field: requested_amount"}), 400
    try:
        data['requested_amount'] = float(data['requested_amount'])
        if data['requested_amount'] <= 0: # Assuming requested amount must be positive
             logger.error('Step 2.1: Invalid value for requested_amount: must be positive')
             return jsonify({"error": "Invalid value for requested_amount: must be a positive number"}), 400
    except (ValueError, TypeError):
        logger.error('Step 2.1: Invalid type or value for requested_amount. Value: %s', data.get('requested_amount'))
        return jsonify({"error": "Invalid type for field: requested_amount (must be a valid number)"}), 400

    for field, field_type in base_required_fields.items():
        if field not in data:
            logger.error('Step 2.1: Missing required field: %s', field)
            return jsonify({"error": f"Missing required field: {field}"}), 400
        if field == 'assigned_lst_user_id':
            try:
                data[field] = int(data[field])
                if data[field] != AUTO_ASSIGN_LST_ID and data[field] <= 0: # Assuming positive IDs or -1
                    return jsonify({"error": f"Invalid ID for field: {field}"}), 400
            except Exception:
                return jsonify({"error": f"Invalid type for field: {field} (must be integer or {AUTO_ASSIGN_LST_ID})"}), 400
        elif field == 'assigned_truck_id':
            try:
                data[field] = int(data[field])
                if data[field] != AUTO_ASSIGN_TRUCK_ID and data[field] <= 0: # Assuming positive IDs or -1
                    return jsonify({"error": f"Invalid ID for field: {field}"}), 400
            except Exception:
                return jsonify({"error": f"Invalid type for field: {field} (must be integer or {AUTO_ASSIGN_TRUCK_ID})"}), 400
        else:
            # For other fields, ensure they are of the expected type and not empty if string
            if not isinstance(data[field], field_type):
                return jsonify({"error": f"Invalid type for field: {field}"}), 400
            if field_type == str and not data[field].strip():
                 return jsonify({"error": f"Field {field} cannot be empty"}), 400

    # --- START AIRCRAFT GET OR CREATE ---
    tail_number_to_check = data['tail_number']
    aircraft, _, aircraft_status_code = AircraftService.get_aircraft_by_tail(tail_number_to_check)

    if aircraft_status_code == 404: # Aircraft not found, try to create it
        logger.info(f"Aircraft with tail_number {tail_number_to_check} not found. Attempting to create.")
        aircraft_data = {
            'tail_number': tail_number_to_check,
            'aircraft_type': data.get('aircraft_type', 'Unknown'), # Use provided or default
            'fuel_type': data['fuel_type'] # Use fuel_type from order
        }
        # Check if 'aircraft_type' was provided in the request, if not, use a default.
        # This is important because Aircraft model requires aircraft_type.
        if 'aircraft_type' not in data or not data['aircraft_type']:
             logger.warning(f"aircraft_type not provided for new tail_number {tail_number_to_check}. Defaulting to 'Unknown'.")
             aircraft_data['aircraft_type'] = 'Unknown'


        new_aircraft, message, new_aircraft_status_code = AircraftService.create_aircraft(aircraft_data)
        if new_aircraft_status_code == 201:
            logger.info(f"Successfully created new aircraft: {tail_number_to_check}")
            aircraft = new_aircraft # Use the newly created aircraft
        elif new_aircraft_status_code == 409: # Already exists, race condition? Try to get it again.
            logger.warning(f"Aircraft {tail_number_to_check} already exists (encountered 409 on create), attempting to retrieve again.")
            aircraft, _, aircraft_status_code = AircraftService.get_aircraft_by_tail(tail_number_to_check)
            if not aircraft:
                logger.error(f"Failed to retrieve aircraft {tail_number_to_check} after 409 on create: {message}")
                return jsonify({"error": f"Failed to process aircraft {tail_number_to_check} after creation attempt: {message}"}), 500
        else: # Other error creating aircraft
            logger.error(f"Failed to create aircraft {tail_number_to_check}: {message} (Status: {new_aircraft_status_code})")
            return jsonify({"error": f"Failed to create new aircraft {tail_number_to_check}: {message}"}), new_aircraft_status_code
    elif aircraft_status_code != 200 and aircraft_status_code != 404: # Other error fetching aircraft
        logger.error(f"Error fetching aircraft {tail_number_to_check}: (Status: {aircraft_status_code})")
        return jsonify({"error": f"Error fetching aircraft details for {tail_number_to_check}"}), aircraft_status_code
    
    # At this point, 'aircraft' should hold the valid aircraft object (either existing or newly created)
    # Or an error response would have been returned.
    # We can also update the aircraft's fuel_type if it differs from the order,
    # or if the aircraft was just created with a default.
    if aircraft and aircraft.fuel_type != data['fuel_type']:
        logger.info(f"Updating fuel_type for aircraft {aircraft.tail_number} from {aircraft.fuel_type} to {data['fuel_type']}.")
        updated_aircraft, msg, status = AircraftService.update_aircraft(aircraft.tail_number, {'fuel_type': data['fuel_type']})
        if status != 200:
            logger.warning(f"Could not update fuel_type for aircraft {aircraft.tail_number}: {msg}")
        else:
            aircraft = updated_aircraft # ensure 'aircraft' variable has the latest state.

    # --- END AIRCRAFT GET OR CREATE ---

    # LST Auto-assignment
    if data['assigned_lst_user_id'] == AUTO_ASSIGN_LST_ID:
        try:
            from src.services.fuel_order_service import FuelOrderService
            # Get all active LST users using permission-based logic
            lst_users = FuelOrderService.get_active_lsts()
            if not lst_users:
                logger.error('No active LST users found for auto-assignment')
                return jsonify({"error": "No active LST users available for auto-assignment"}), 400
            # Find the LST with the fewest active/in-progress orders
            least_busy = None
            min_orders = None
            for lst in lst_users:
                count = FuelOrder.query.filter(
                    FuelOrder.assigned_lst_user_id == lst.id,
                    FuelOrder.status.in_([
                        FuelOrderStatus.DISPATCHED,
                        FuelOrderStatus.ACKNOWLEDGED,
                        FuelOrderStatus.EN_ROUTE,
                        FuelOrderStatus.FUELING
                    ])
                ).count()
                if min_orders is None or count < min_orders:
                    min_orders = count
                    least_busy = lst
            if not least_busy:
                logger.error('Auto-assign logic failed to select an LST')
                return jsonify({"error": "Auto-assign failed to select an LST"}), 400
            data['assigned_lst_user_id'] = least_busy.id
            logger.info(f"Auto-assigned LST user_id {least_busy.id} (username={least_busy.username}) with {min_orders} active orders.")
        except Exception as e:
            logger.error(f"Error during auto-assignment of LST: {str(e)}")
            return jsonify({"error": f"Error during auto-assignment of LST: {str(e)}"}), 500
    # --- END LST AUTO-ASSIGN ---

    # Truck Auto-assignment
    if data['assigned_truck_id'] == AUTO_ASSIGN_TRUCK_ID:
        try:
            # Get all active FuelTrucks
            # For simplicity, picking the first active one.
            # Future enhancement: more sophisticated selection logic (e.g., fuel type compatibility, availability)
            active_truck = FuelTruck.query.filter(FuelTruck.is_active == True).first()
            
            if not active_truck:
                logger.error('No active FuelTrucks found for auto-assignment')
                return jsonify({"error": "No active FuelTrucks available for auto-assignment"}), 400
            
            data['assigned_truck_id'] = active_truck.id
            logger.info(f"Auto-assigned FuelTruck ID {active_truck.id} (Name: {active_truck.name if hasattr(active_truck, 'name') else 'N/A'}).")
        except Exception as e:
            logger.error(f"Error during auto-assignment of FuelTruck: {str(e)}")
            return jsonify({"error": f"Error during auto-assignment of FuelTruck: {str(e)}"}), 500
    # --- END TRUCK AUTO-ASSIGN ---

    # Optional fields validation
    optional_fields = {
        'customer_id': int,
        'additive_requested': bool,
        'csr_notes': str,
        'location_on_ramp': str  # Added location_on_ramp as optional field
    }
    
    for field, field_type in optional_fields.items():
        if field in data:
            try:
                # Convert to expected type if necessary
                if field_type == int:
                    # Allow None for optional integer fields
                    if data[field] is not None:
                        data[field] = int(data[field])
                    # If data[field] is None, leave as None
                elif field_type == bool and not isinstance(data[field], bool):
                    data[field] = bool(data[field])
                elif field_type == str and data[field] is not None and not isinstance(data[field], str):
                    data[field] = str(data[field])
            except (ValueError, TypeError):
                logger.error('Step 3.1: Invalid type for optional field %s. Value: %s', field, data[field])
                return jsonify({"error": f"Invalid type for field {field}. Expected {field_type.__name__}"}), 400
    logger.info('Step 3: Passed optional fields validation')
    
    # Create the fuel order
    try:
        logger.info('Step 4: Creating FuelOrder with data: %s', data)
        fuel_order = FuelOrder(
            tail_number=data['tail_number'],
            customer_id=data.get('customer_id'),
            fuel_type=data['fuel_type'],
            additive_requested=data.get('additive_requested', False),
            requested_amount=data['requested_amount'],
            assigned_lst_user_id=data['assigned_lst_user_id'],
            assigned_truck_id=data['assigned_truck_id'],
            location_on_ramp=data.get('location_on_ramp'),
            csr_notes=data.get('csr_notes')
        )
        logger.info('Step 5: FuelOrder object created')
        db.session.add(fuel_order)
        logger.info('Step 6: FuelOrder added to session')
        db.session.commit()
        logger.info('Step 7: FuelOrder committed')
        return jsonify({
            'message': 'Fuel order created successfully',
            'fuel_order': {
                'id': fuel_order.id,
                'tail_number': fuel_order.tail_number,
                'customer_id': fuel_order.customer_id,
                'fuel_type': fuel_order.fuel_type,
                'additive_requested': fuel_order.additive_requested,
                'requested_amount': str(fuel_order.requested_amount) if fuel_order.requested_amount else None,
                'assigned_lst_user_id': fuel_order.assigned_lst_user_id,
                'assigned_truck_id': fuel_order.assigned_truck_id,
                'location_on_ramp': fuel_order.location_on_ramp,
                'csr_notes': fuel_order.csr_notes,
                'status': fuel_order.status.value,
                'created_at': fuel_order.created_at.isoformat()
            }
        }), 201
    except Exception as e:
        db.session.rollback()
        logger.exception("Exception in create_fuel_order")
        return jsonify({"error": f"Error creating fuel order: {str(e)}"}), 500

@fuel_order_bp.route('', methods=['GET', 'OPTIONS'])
@fuel_order_bp.route('/', methods=['GET', 'OPTIONS'])
@token_required
@require_permission('VIEW_ASSIGNED_ORDERS')
def get_fuel_orders():
    import traceback
    try:
        current_app.logger.info(f"[get_fuel_orders] User: {getattr(g, 'current_user', None)} | Args: {request.args}")
        from src.services.fuel_order_service import FuelOrderService
        filters = dict(request.args)
        paginated_result, message = FuelOrderService.get_fuel_orders(current_user=g.current_user, filters=filters)
        if paginated_result is not None:
            orders_list = []
            for order in paginated_result.items:
                # Use a custom to_dict if available, else fallback to basic fields
                if hasattr(order, 'to_dict'):
                    orders_list.append(order.to_dict())
                else:
                    orders_list.append({
                        'id': order.id,
                        'tail_number': order.tail_number,
                        'customer_id': order.customer_id,
                        'fuel_type': order.fuel_type,
                        'additive_requested': order.additive_requested,
                        'requested_amount': str(order.requested_amount) if order.requested_amount else None,
                        'assigned_lst_user_id': order.assigned_lst_user_id,
                        'assigned_truck_id': order.assigned_truck_id,
                        'location_on_ramp': order.location_on_ramp,
                        'csr_notes': order.csr_notes,
                        'status': order.status.value,
                        'created_at': order.created_at.isoformat() if order.created_at else None
                    })
            response = {
                "orders": orders_list,
                "message": message,
                "pagination": {
                    "page": paginated_result.page,
                    "per_page": paginated_result.per_page,
                    "total": paginated_result.total,
                    "pages": paginated_result.pages,
                    "has_next": paginated_result.has_next,
                    "has_prev": paginated_result.has_prev
                }
            }
            return jsonify(response), 200
        else:
            return jsonify({"error": message}), 400
    except Exception as e:
        current_app.logger.error(f"Unhandled exception in get_fuel_orders route: {str(e)}\n{traceback.format_exc()}")
        return jsonify({"error": "An internal server error occurred in get_fuel_orders route.", "details": str(e)}), 500

@fuel_order_bp.route('/<int:order_id>', methods=['GET'])
@token_required
@require_permission('VIEW_ASSIGNED_ORDERS')
def get_fuel_order(order_id):
    """Get details of a specific fuel order.
    LST must be assigned to the order. CSR/Admin can view any.
    ---
    tags:
      - Fuel Orders
    security:
      - bearerAuth: []
    parameters:
      - in: path
        name: order_id
        schema:
          type: integer
        required: true
        description: ID of the fuel order to retrieve
    responses:
      200:
        description: Fuel order details retrieved successfully
        content:
          application/json:
            schema: FuelOrderResponseSchema # Use full schema here
      401:
        description: Unauthorized (invalid/missing token)
        content:
          application/json:
            schema: ErrorResponseSchema
      403:
        description: Forbidden (user not allowed to view this order)
        content:
          application/json:
            schema: ErrorResponseSchema
      404:
        description: Not Found (fuel order with the given ID does not exist)
        content:
          application/json:
            schema: ErrorResponseSchema
      500:
        description: Server error
        content:
          application/json:
            schema: ErrorResponseSchema
    """
    # Call service method to get the fuel order
    order, message, status_code = FuelOrderService.get_fuel_order_by_id(
        order_id=order_id,
        current_user=g.current_user
    )

    # Handle the result based on whether the order was found
    if order is not None:
        # Serialize the full order details
        order_details = {
            "id": order.id,
            "status": order.status.value,
            "tail_number": order.tail_number,
            "customer_id": order.customer_id,  # Consider joining/fetching customer name later
            "fuel_type": order.fuel_type,
            "additive_requested": order.additive_requested,
            "requested_amount": str(order.requested_amount) if order.requested_amount else None,
            "assigned_lst_user_id": order.assigned_lst_user_id,  # Consider joining/fetching LST name later
            "assigned_truck_id": order.assigned_truck_id,  # Consider joining/fetching truck name later
            "location_on_ramp": order.location_on_ramp,
            "csr_notes": order.csr_notes,
            "start_meter_reading": str(order.start_meter_reading) if order.start_meter_reading else None,
            "end_meter_reading": str(order.end_meter_reading) if order.end_meter_reading else None,
            "calculated_gallons_dispensed": str(order.calculated_gallons_dispensed) if order.calculated_gallons_dispensed else None,
            "lst_notes": order.lst_notes,
            "created_at": order.created_at.isoformat(),
            "dispatch_timestamp": order.dispatch_timestamp.isoformat() if order.dispatch_timestamp else None,
            "acknowledge_timestamp": order.acknowledge_timestamp.isoformat() if order.acknowledge_timestamp else None,
            "en_route_timestamp": order.en_route_timestamp.isoformat() if order.en_route_timestamp else None,
            "fueling_start_timestamp": order.fueling_start_timestamp.isoformat() if order.fueling_start_timestamp else None,
            "completion_timestamp": order.completion_timestamp.isoformat() if order.completion_timestamp else None,
            "reviewed_timestamp": order.reviewed_timestamp.isoformat() if order.reviewed_timestamp else None,
            "reviewed_by_csr_user_id": order.reviewed_by_csr_user_id  # Consider joining/fetching CSR name later
        }
        return jsonify({"message": message, "fuel_order": order_details}), status_code
    else:
        # Return error message and status code from service
        return jsonify({"error": message}), status_code

@fuel_order_bp.route('/<int:order_id>/status', methods=['PATCH'])
@token_required
@require_permission('UPDATE_OWN_ORDER_STATUS')
def update_fuel_order_status(order_id):
    """Update a fuel order's status.
    ---
    tags:
      - Fuel Orders
    security:
      - bearerAuth: []
    parameters:
      - in: path
        name: order_id
        schema:
          type: integer
        required: true
        description: ID of the fuel order to update
    requestBody:
      required: true
      content:
        application/json:
          schema: FuelOrderUpdateRequestSchema
    responses:
      200:
        description: Fuel order updated successfully
        content:
          application/json:
            schema: FuelOrderUpdateResponseSchema
      400:
        description: Bad Request (e.g., invalid status)
        content:
          application/json:
            schema: ErrorResponseSchema
      401:
        description: Unauthorized (invalid/missing token)
        content:
          application/json:
            schema: ErrorResponseSchema
      404:
        description: Fuel order not found
        content:
          application/json:
            schema: ErrorResponseSchema
      500:
        description: Server error (e.g., database error)
        content:
          application/json:
            schema: ErrorResponseSchema
    """
    data = request.get_json()
    
    # Check if data exists and is a dictionary
    if not data or not isinstance(data, dict):
        return jsonify({"error": "Invalid request data"}), 400
    
    # Required fields validation
    required_fields = {
        'status': str,
        'assigned_truck_id': int
    }
    
    for field, field_type in required_fields.items():
        if field not in data:
            return jsonify({"error": f"Missing required field: {field}"}), 400
        try:
            # Convert to expected type if necessary
            if field_type == int:
                data[field] = int(data[field])
            elif field_type == str and not isinstance(data[field], str):
                data[field] = str(data[field])
            
            # Additional validation for specific fields
            if field_type == str and not data[field].strip():
                return jsonify({"error": f"Field {field} cannot be empty"}), 400
        except (ValueError, TypeError):
            return jsonify({"error": f"Invalid type for field {field}. Expected {field_type.__name__}"}), 400
    
    # Get the fuel order
    fuel_order = FuelOrder.query.get(order_id)
    if not fuel_order:
        return jsonify({"error": "Fuel order not found"}), 404
    
    # Update the fuel order
    try:
        # Convert status to uppercase for enum lookup
        status_value = data['status'].upper()
        print(f"Attempting to update status to: {status_value}")
        if status_value not in FuelOrderStatus.__members__:
            print(f"Invalid status value: {data['status']}")
            print(f"Valid status values: {list(FuelOrderStatus.__members__.keys())}")
            return jsonify({"error": f"Invalid status value: {data['status']}"}), 400
            
        fuel_order.status = FuelOrderStatus[status_value]
        fuel_order.assigned_truck_id = data['assigned_truck_id']
        db.session.commit()
        
        return jsonify({
            'id': fuel_order.id,
            'tail_number': fuel_order.tail_number,
            'customer_id': fuel_order.customer_id,
            'fuel_type': fuel_order.fuel_type,
            'additive_requested': fuel_order.additive_requested,
            'requested_amount': fuel_order.requested_amount,
            'assigned_lst_user_id': fuel_order.assigned_lst_user_id,
            'assigned_truck_id': fuel_order.assigned_truck_id,
            'location_on_ramp': fuel_order.location_on_ramp,
            'csr_notes': fuel_order.csr_notes,
            'status': fuel_order.status.value,
            'updated_at': fuel_order.updated_at.isoformat()
        }), 200
    except Exception as e:
        db.session.rollback()
        print(f"Error updating fuel order: {str(e)}")
        print(f"Data: {data}")
        print(f"Status value: {data['status']}")
        return jsonify({"error": f"Error updating fuel order: {str(e)}"}), 500

@fuel_order_bp.route('/<int:order_id>/submit-data', methods=['PUT'])
@token_required
@require_permission('COMPLETE_OWN_ORDER')
def submit_fuel_data(order_id):
    """Submit fuel meter readings and notes for a fuel order.
    Requires COMPLETE_OWN_ORDER permission. Order must be in FUELING status.
    ---
    tags:
      - Fuel Orders
    security:
      - bearerAuth: []
    parameters:
      - in: path
        name: order_id
        schema:
          type: integer
        required: true
        description: ID of the fuel order
    requestBody:
      required: true
      content:
        application/json:
          schema: FuelOrderCompleteRequestSchema
    responses:
      200:
        description: Fuel data submitted successfully
        content:
          application/json:
            schema: FuelOrderUpdateResponseSchema
      400:
        description: Bad Request (e.g., invalid meter readings, validation error)
        content:
          application/json:
            schema: ErrorResponseSchema
      401:
        description: Unauthorized (invalid/missing token)
        content:
          application/json:
            schema: ErrorResponseSchema
      403:
        description: Forbidden (missing permission or not assigned to order)
        content:
          application/json:
            schema: ErrorResponseSchema
      404:
        description: Fuel order not found
        content:
          application/json:
            schema: ErrorResponseSchema
      422:
        description: Order not in correct status
        content:
          application/json:
            schema: ErrorResponseSchema
      500:
        description: Server error
        content:
          application/json:
            schema: ErrorResponseSchema
    """
    # Get the fuel order
    fuel_order = FuelOrder.query.get_or_404(order_id)
    
    # Verify the LST is assigned to this order
    if fuel_order.assigned_lst_user_id != g.current_user.id:
        return jsonify({
            "error": "You are not authorized to submit data for this fuel order"
        }), 403
    
    # Verify order is in FUELING status
    if fuel_order.status != FuelOrderStatus.FUELING:
        return jsonify({
            "error": "Fuel order must be in FUELING status to submit meter readings"
        }), 422
    
    # Get and validate request data
    data = request.get_json()
    if not data:
        return jsonify({"error": "No data provided"}), 400
        
    # Validate required fields
    required_fields = {
        'start_meter_reading': float,
        'end_meter_reading': float
    }
    
    for field, field_type in required_fields.items():
        if field not in data:
            return jsonify({"error": f"Missing required field: {field}"}), 400
        try:
            value = field_type(data[field])
            if value < 0:
                return jsonify({"error": f"{field} cannot be negative"}), 400
            data[field] = value
        except (ValueError, TypeError):
            return jsonify({"error": f"Invalid type for field {field}. Expected {field_type.__name__}"}), 400
            
    # Validate meter readings
    if data['end_meter_reading'] <= data['start_meter_reading']:
        return jsonify({
            "error": "End meter reading must be greater than start meter reading"
        }), 400
    
    try:
        # Update the fuel order
        fuel_order.start_meter_reading = data['start_meter_reading']
        fuel_order.end_meter_reading = data['end_meter_reading']
        fuel_order.lst_notes = data.get('lst_notes')  # Optional field
        fuel_order.status = FuelOrderStatus.COMPLETED
        fuel_order.completion_timestamp = datetime.utcnow()
        
        db.session.commit()
        
        return jsonify({
            "message": "Fuel data submitted successfully",
            "fuel_order": {
                "id": fuel_order.id,
                "status": fuel_order.status.value,
                "tail_number": fuel_order.tail_number,
                "start_meter_reading": str(fuel_order.start_meter_reading),
                "end_meter_reading": str(fuel_order.end_meter_reading),
                "calculated_gallons_dispensed": str(fuel_order.calculated_gallons_dispensed),
                "lst_notes": fuel_order.lst_notes,
                "completion_timestamp": fuel_order.completion_timestamp.isoformat()
            }
        }), 200
        
    except Exception as e:
        db.session.rollback()
        return jsonify({"error": f"Error submitting fuel data: {str(e)}"}), 500

@fuel_order_bp.route('/<int:order_id>/review', methods=['PATCH'])
@token_required
@require_permission('REVIEW_ORDERS')
def review_fuel_order(order_id):
    """Mark a completed fuel order as reviewed.
    Requires REVIEW_ORDERS permission. Order must be in COMPLETED state.
    ---
    tags:
      - Fuel Orders
    security:
      - bearerAuth: []
    parameters:
      - in: path
        name: order_id
        schema:
          type: integer
        required: true
        description: ID of the fuel order to review
    responses:
      200:
        description: Fuel order marked as reviewed successfully
        content:
          application/json:
            schema: FuelOrderUpdateResponseSchema # Use schema that returns updated order
      400:
        description: Bad Request (order not in COMPLETED state)
        content:
          application/json:
            schema: ErrorResponseSchema
      401:
        description: Unauthorized
        content:
          application/json:
            schema: ErrorResponseSchema
      403:
        description: Forbidden (missing permission)
        content:
          application/json:
            schema: ErrorResponseSchema
      404:
        description: Not Found
        content:
          application/json:
            schema: ErrorResponseSchema
      500:
        description: Server error
        content:
          application/json:
            schema: ErrorResponseSchema
    """
    # Call service method to review the order
    reviewed_order, message, status_code = FuelOrderService.review_fuel_order(
        order_id=order_id,
        reviewer_user=g.current_user
    )
    
    # Handle the result from the service
    if reviewed_order is not None:
        # Serialize the reviewed order details for the response
        order_details = {
            "id": reviewed_order.id,
            "status": reviewed_order.status.value,  # Should be REVIEWED
            "reviewed_by_csr_user_id": reviewed_order.reviewed_by_csr_user_id,
            "reviewed_timestamp": reviewed_order.reviewed_timestamp.isoformat() if reviewed_order.reviewed_timestamp else None
        }
        return jsonify({"message": message, "fuel_order": order_details}), status_code  # Use status_code from service (should be 200)
    else:
        return jsonify({"error": message}), status_code  # Use status_code from service (e.g., 400, 404, 500) 

@fuel_order_bp.route('/export', methods=['GET'])
@token_required
@require_permission('EXPORT_ORDERS_CSV')
def export_fuel_orders_csv():
    """Export fuel orders to a CSV file.
    Requires EXPORT_ORDERS_CSV permission.
    ---
    tags:
      - Fuel Orders
    security:
      - bearerAuth: []
    responses:
      200:
        description: CSV file exported successfully
      401:
        description: Unauthorized
      403:
        description: Forbidden (missing permission)
      500:
        description: Server error
    """
    # Extract filter parameters from request.args
    filters = {
        'status': request.args.get('status', None, type=str)
        # TODO: Add date_from, date_to filters later
    }

    # Call service method to generate CSV data
    csv_data, message, status_code = FuelOrderService.export_fuel_orders_to_csv(
        current_user=g.current_user,
        filters=filters
    )

    # Handle the result from the service
    if csv_data is not None and status_code == 200:
        # Check if we got an empty list (no data found)
        if isinstance(csv_data, list) and len(csv_data) == 0:
            return jsonify({"message": message}), 200

        # Generate dynamic filename with timestamp
        timestamp = datetime.utcnow().strftime('%Y%m%d_%H%M%S')
        filename = f"fuel_orders_export_{timestamp}.csv"

        # Create response with CSV data and appropriate headers
        response = Response(
            csv_data,
            mimetype='text/csv',
            headers={
                "Content-Disposition": f"attachment; filename={filename}"
            }
        )
        return response
    else:
        # Return error message and status code from service
        return jsonify({"error": message}), status_code

================
File: backend/src/routes/user_routes.py
================
from flask import Blueprint, request, jsonify, g
from ..utils.decorators import token_required, require_permission
from ..models.user import UserRole
from ..services.user_service import UserService
from marshmallow import ValidationError
from ..schemas import (
    UserCreateRequestSchema,
    UserUpdateRequestSchema,
    UserResponseSchema,
    UserListResponseSchema,
    ErrorResponseSchema
)

# Create blueprint for user routes
user_bp = Blueprint('user_bp', __name__, url_prefix='/api/users')

@user_bp.route('', methods=['GET', 'OPTIONS'])
@user_bp.route('/', methods=['GET', 'OPTIONS'])
@token_required
@require_permission('VIEW_USERS')
def get_users():
    """Get a list of users.
    Requires VIEW_USERS permission. Supports filtering by 'role' and 'is_active'.
    ---
    tags:
      - Users
    security:
      - bearerAuth: []
    parameters:
      - in: query
        name: role
        schema:
          type: string
          enum: [ADMIN, CSR, LST]
        required: false
        description: Filter users by role (case-insensitive)
      - in: query
        name: is_active
        schema:
          type: string
          enum: ['true', 'false']
        required: false
        description: Filter users by active status ('true' or 'false')
    responses:
      200:
        description: List of users retrieved successfully
        content:
          application/json:
            schema: UserListResponseSchema
      400:
        description: Bad Request (e.g., invalid filter value)
        content:
          application/json:
            schema: ErrorResponseSchema
      401:
        description: Unauthorized
        content:
          application/json:
            schema: ErrorResponseSchema
      403:
        description: Forbidden (missing permission)
        content:
          application/json:
            schema: ErrorResponseSchema
      500:
        description: Server error
        content:
          application/json:
            schema: ErrorResponseSchema
    """
    if request.method == 'OPTIONS':
        return jsonify({'message': 'OPTIONS request successful'}), 200
    
    # Extract filter parameters from request.args
    filters = {
        'role': request.args.get('role', None, type=str),
        'is_active': request.args.get('is_active', None, type=str)  # Keep as string, service handles conversion
    }
    # Remove None values so service doesn't process empty filters unnecessarily
    filters = {k: v for k, v in filters.items() if v is not None}
    
    # Call the service method
    users, message, status_code = UserService.get_users(filters=filters)
    
    # Handle the response
    if users is not None:
        # Serialize the list of user objects, excluding sensitive fields
        users_list = []
        for user in users:
            users_list.append({
                "id": user.id,
                "name": user.username,
                "email": user.email,
                "roles": [role.name for role in user.roles],
                "is_active": user.is_active,
                "created_at": user.created_at.isoformat()
            })
        # Construct the final JSON response
        response = {
            "message": message,
            "users": users_list
        }
        return jsonify(response), status_code  # Use status_code from service (should be 200)
    else:
        # Return the error message and status code provided by the service
        return jsonify({"error": message}), status_code  # Use status_code from service (e.g., 400, 500)

@user_bp.route('', methods=['POST', 'OPTIONS'])
@user_bp.route('/', methods=['POST', 'OPTIONS'])
@token_required
@require_permission('MANAGE_USERS')
def create_user():
    """Create a new user.
    Requires MANAGE_USERS permission.
    ---
    tags:
      - Users
    security:
      - bearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema: UserCreateRequestSchema
    responses:
      201:
        description: User created successfully
        content:
          application/json:
            schema: UserResponseSchema
      400:
        description: Bad Request (e.g., missing fields, validation error)
        content:
          application/json:
            schema: ErrorResponseSchema
      401:
        description: Unauthorized
        content:
          application/json:
            schema: ErrorResponseSchema
      403:
        description: Forbidden (missing permission)
        content:
          application/json:
            schema: ErrorResponseSchema
      409:
        description: Conflict (e.g., email already exists)
        content:
          application/json:
            schema: ErrorResponseSchema
      500:
        description: Server error
        content:
          application/json:
            schema: ErrorResponseSchema
    """
    if request.method == 'OPTIONS':
        return jsonify({'message': 'OPTIONS request successful'}), 200
    
    try:
        # Load and validate request data
        schema = UserCreateRequestSchema()
        data = request.get_json()
        
        if not data:
            return jsonify({"error": "No data provided"}), 400
        
        # --- Remove Debugging ---    
        # from flask import current_app
        # current_app.logger.info(f"DEBUG: Schema fields before load: {schema.fields}") 
        # --- End Debugging ---
            
        try:
            data = schema.load(data)
        except ValidationError as e:
            return jsonify({
                "error": "Validation error",
                "details": e.messages
            }), 400
        
        # Create user
        user, message, status_code = UserService.create_user(data)
        
        if user is not None:
            # Return serialized user data
            return jsonify({
                "message": message,
                "user": {
                    "id": user.id,
                    "name": user.username,
                    "email": user.email,
                    "roles": [role.name for role in user.roles],
                    "is_active": user.is_active,
                    "created_at": user.created_at.isoformat()
                }
            }), status_code
        else:
            return jsonify({"error": message}), status_code
            
    except Exception as e:
        return jsonify({
            "error": "Internal server error",
            "details": str(e)
        }), 500

@user_bp.route('/<int:user_id>', methods=['PATCH'])
@token_required
@require_permission('MANAGE_USERS')
def update_user(user_id):
    """Update a user.
    Requires MANAGE_USERS permission.
    ---
    tags:
      - Users
    security:
      - bearerAuth: []
    parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
        description: ID of user to update
    requestBody:
      required: true
      content:
        application/json:
          schema: UserUpdateRequestSchema
    responses:
      200:
        description: User updated successfully
        content:
          application/json:
            schema: UserResponseSchema
      400:
        description: Bad Request (e.g., validation error)
        content:
          application/json:
            schema: ErrorResponseSchema
      401:
        description: Unauthorized
        content:
          application/json:
            schema: ErrorResponseSchema
      403:
        description: Forbidden (missing permission)
        content:
          application/json:
            schema: ErrorResponseSchema
      404:
        description: User not found
        content:
          application/json:
            schema: ErrorResponseSchema
      500:
        description: Server error
        content:
          application/json:
            schema: ErrorResponseSchema
    """
    try:
        # Load and validate request data
        schema = UserUpdateRequestSchema()
        data = request.get_json()
        
        if not data:
            return jsonify({"error": "No data provided"}), 400
            
        try:
            data = schema.load(data)
        except ValidationError as e:
            return jsonify({
                "error": "Validation error",
                "details": e.messages
            }), 400
        
        # Update user
        user, message, status_code = UserService.update_user(user_id, data)
        
        if user is not None:
            # Return serialized user data
            return jsonify({
                "message": message,
                "user": {
                    "id": user.id,
                    "name": user.username,
                    "email": user.email,
                    "roles": [role.name for role in user.roles],
                    "is_active": user.is_active,
                    "created_at": user.created_at.isoformat()
                }
            }), status_code
        else:
            return jsonify({"error": message}), status_code
            
    except Exception as e:
        return jsonify({
            "error": "Internal server error",
            "details": str(e)
        }), 500

@user_bp.route('/<int:user_id>', methods=['DELETE'])
@token_required
@require_permission('MANAGE_USERS')
def delete_user(user_id):
    """Delete a user.
    Requires MANAGE_USERS permission.
    ---
    tags:
      - Users
    security:
      - bearerAuth: []
    parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
        description: ID of user to delete
    responses:
      200:
        description: User deleted successfully
      401:
        description: Unauthorized
      403:
        description: Forbidden (missing permission)
      404:
        description: User not found
      500:
        description: Server error
    """
    # Call service to delete user
    success, message, status_code = UserService.delete_user(user_id)
    
    if success:
        return jsonify({"message": message}), status_code
    else:
        return jsonify({"error": message}), status_code

@user_bp.route('/<int:user_id>', methods=['GET'])
@token_required
@require_permission('VIEW_USERS')
def get_user(user_id):
    """Get a user by ID.
    Requires VIEW_USERS permission.
    ---
    tags:
      - Users
    security:
      - bearerAuth: []
    parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
        description: ID of user to retrieve
    responses:
      200:
        description: User retrieved successfully
        content:
          application/json:
            schema: UserResponseSchema
      401:
        description: Unauthorized
        content:
          application/json:
            schema: ErrorResponseSchema
      403:
        description: Forbidden (missing permission)
        content:
          application/json:
            schema: ErrorResponseSchema
      404:
        description: User not found
        content:
          application/json:
            schema: ErrorResponseSchema
      500:
        description: Server error
        content:
          application/json:
            schema: ErrorResponseSchema
    """
    # Call service to get user
    user, message, status_code = UserService.get_user_by_id(user_id)
    
    if user is not None:
        return jsonify({
            "message": message,
            "user": {
                "id": user.id,
                "name": user.username,
                "email": user.email,
                "roles": [role.name for role in user.roles],
                "is_active": user.is_active,
                "created_at": user.created_at.isoformat()
            }
        }), status_code
    else:
        return jsonify({"error": message}), status_code

================
File: backend/src/schemas/admin_schemas.py
================
from marshmallow import Schema, fields

class AdminAircraftSchema(Schema):
    tail_number = fields.String(required=True)
    aircraft_type = fields.String()
    customer_id = fields.Integer(allow_none=True)

class AdminAircraftListResponseSchema(Schema):
    aircraft = fields.List(fields.Nested(AdminAircraftSchema))

class AdminCustomerSchema(Schema):
    id = fields.Integer(required=True)
    name = fields.String(required=True)

class AdminCustomerListResponseSchema(Schema):
    customers = fields.List(fields.Nested(AdminCustomerSchema))

class ErrorResponseSchema(Schema):
    message = fields.String(required=True)
    code = fields.Integer()

================
File: backend/src/schemas/aircraft_schemas.py
================
from marshmallow import Schema, fields

class AircraftCreateSchema(Schema):
    tail_number = fields.String(required=True)
    aircraft_type = fields.String(required=False)
    fuel_type = fields.String(required=False)
    customer_id = fields.Integer(required=False, allow_none=True)

class AircraftUpdateSchema(Schema):
    aircraft_type = fields.String(required=False)
    fuel_type = fields.String(required=False)
    customer_id = fields.Integer(required=False, allow_none=True)

class AircraftResponseSchema(Schema):
    tail_number = fields.String()
    aircraft_type = fields.String()
    fuel_type = fields.String()
    customer_id = fields.Integer(allow_none=True)

class AircraftListSchema(Schema):
    message = fields.String()
    aircraft = fields.List(fields.Nested(AircraftResponseSchema))

class ErrorResponseSchema(Schema):
    error = fields.String()
    details = fields.Raw(required=False)

================
File: backend/src/schemas/customer_schemas.py
================
from marshmallow import Schema, fields

class CustomerCreateSchema(Schema):
    name = fields.String(required=True)

class CustomerUpdateSchema(Schema):
    name = fields.String(required=False)

class CustomerResponseSchema(Schema):
    id = fields.Integer()
    name = fields.String()

class CustomerListSchema(Schema):
    message = fields.String()
    customers = fields.List(fields.Nested(CustomerResponseSchema))

class ErrorResponseSchema(Schema):
    error = fields.String()
    details = fields.Raw(required=False)

================
File: backend/src/schemas/fuel_order_schemas.py
================
from marshmallow import Schema, fields, validate, pre_load
from ..models.fuel_order import FuelOrderStatus
from .auth_schemas import ErrorResponseSchema

# --- Schemas for Payloads ---

class FuelOrderBaseSchema(Schema):
    # Common fields, adjust required/optional based on context
    tail_number = fields.Str(required=True, validate=validate.Length(max=20))
    customer_id = fields.Int(required=False, allow_none=True)
    fuel_type = fields.Str(required=True, validate=validate.Length(max=50))
    additive_requested = fields.Bool(load_default=False)
    requested_amount = fields.Decimal(required=False, allow_none=True, places=2)
    assigned_lst_user_id = fields.Int(required=True)
    assigned_truck_id = fields.Int(required=True)
    location_on_ramp = fields.Str(required=False, allow_none=True, validate=validate.Length(max=100))
    csr_notes = fields.Str(required=False, allow_none=True)

class FuelOrderCreateRequestSchema(FuelOrderBaseSchema):
    """
    Request schema for creating a fuel order. Allows assigned_lst_user_id to be -1 for auto-assign (the backend will select the least busy active LST).
    """
    assigned_lst_user_id = fields.Int(required=True, metadata={"description": "Set to -1 to auto-assign the least busy LST."})

class FuelOrderUpdateRequestSchema(Schema): # For potential future PUT/PATCH
     # Define fields allowed for update, likely optional
     pass

class FuelOrderStatusUpdateRequestSchema(Schema):
    status = fields.Str(required=True, validate=validate.OneOf([s.name for s in FuelOrderStatus]))

    # Convert incoming status string to uppercase before validation/loading
    @pre_load
    def uppercase_status(self, data, **kwargs):
        if 'status' in data and isinstance(data['status'], str):
            data['status'] = data['status'].upper()
        return data

class FuelOrderCompleteRequestSchema(Schema):
    start_meter_reading = fields.Decimal(required=True, places=2)
    end_meter_reading = fields.Decimal(required=True, places=2)
    lst_notes = fields.Str(required=False, allow_none=True)

# --- Schemas for Responses ---

class OrderStatusCountsSchema(Schema):
    pending = fields.Int(dump_only=True)
    in_progress = fields.Int(dump_only=True)
    completed = fields.Int(dump_only=True)

class OrderStatusCountsResponseSchema(Schema):
    """
    Response schema for fuel order status counts endpoint.
    """
    message = fields.Str(dump_only=True)
    counts = fields.Nested(OrderStatusCountsSchema, dump_only=True)


class FuelOrderResponseSchema(Schema):
    # Full representation of a FuelOrder
    id = fields.Int(dump_only=True)
    status = fields.Enum(FuelOrderStatus, by_value=True, dump_only=True) # Dump enum value
    tail_number = fields.Str(dump_only=True)
    customer_id = fields.Int(dump_only=True, allow_none=True)
    fuel_type = fields.Str(dump_only=True)
    additive_requested = fields.Bool(dump_only=True)
    requested_amount = fields.Decimal(dump_only=True, places=2, as_string=True, allow_none=True) # Dump Decimal as string
    assigned_lst_user_id = fields.Int(dump_only=True, allow_none=True)
    assigned_truck_id = fields.Int(dump_only=True, allow_none=True)
    # Denormalized fields for optimization
    assigned_lst_username = fields.Str(dump_only=True, attribute="assigned_lst_user.username", allow_none=True)
    assigned_lst_fullName = fields.Str(dump_only=True, attribute="assigned_lst_user.name", allow_none=True)
    assigned_truck_number = fields.Str(dump_only=True, attribute="assigned_truck.truck_number", allow_none=True)
    location_on_ramp = fields.Str(dump_only=True, allow_none=True)
    csr_notes = fields.Str(dump_only=True, allow_none=True)
    start_meter_reading = fields.Decimal(dump_only=True, places=2, as_string=True, allow_none=True)
    end_meter_reading = fields.Decimal(dump_only=True, places=2, as_string=True, allow_none=True)
    calculated_gallons_dispensed = fields.Decimal(dump_only=True, places=2, as_string=True, allow_none=True)
    lst_notes = fields.Str(dump_only=True, allow_none=True)
    created_at = fields.DateTime(dump_only=True)
    dispatch_timestamp = fields.DateTime(dump_only=True, allow_none=True)
    acknowledge_timestamp = fields.DateTime(dump_only=True, allow_none=True)
    en_route_timestamp = fields.DateTime(dump_only=True, allow_none=True)
    fueling_start_timestamp = fields.DateTime(dump_only=True, allow_none=True)
    completion_timestamp = fields.DateTime(dump_only=True, allow_none=True)
    reviewed_timestamp = fields.DateTime(dump_only=True, allow_none=True)
    reviewed_by_csr_user_id = fields.Int(dump_only=True, allow_none=True)

class FuelOrderBriefResponseSchema(Schema): # For list view
    # Subset of fields for list responses
    id = fields.Int(dump_only=True)
    status = fields.Enum(FuelOrderStatus, by_value=True, dump_only=True)
    tail_number = fields.Str(dump_only=True)
    assigned_lst_user_id = fields.Int(dump_only=True, allow_none=True)
    assigned_truck_id = fields.Int(dump_only=True, allow_none=True)
    # Denormalized fields for optimization
    assigned_lst_username = fields.Str(dump_only=True, attribute="assigned_lst_user.username", allow_none=True)
    assigned_lst_fullName = fields.Str(dump_only=True, attribute="assigned_lst_user.name", allow_none=True)
    assigned_truck_number = fields.Str(dump_only=True, attribute="assigned_truck.truck_number", allow_none=True)
    created_at = fields.DateTime(dump_only=True)

class FuelOrderCreateResponseSchema(Schema):
    message = fields.Str(dump_only=True)
    fuel_order = fields.Nested(FuelOrderResponseSchema, dump_only=True) # Return full details on create

class FuelOrderUpdateResponseSchema(Schema): # For status, complete, review
    message = fields.Str(dump_only=True)
    fuel_order = fields.Nested(FuelOrderResponseSchema, dump_only=True) # Return updated details

class PaginationSchema(Schema):
    page = fields.Int(dump_only=True)
    per_page = fields.Int(dump_only=True)
    total_pages = fields.Int(dump_only=True)
    total_items = fields.Int(dump_only=True)
    has_next = fields.Bool(dump_only=True)
    has_prev = fields.Bool(dump_only=True)

class FuelOrderListResponseSchema(Schema):
    message = fields.Str(dump_only=True)
    fuel_orders = fields.List(fields.Nested(FuelOrderBriefResponseSchema), dump_only=True) # Use brief schema for list
    pagination = fields.Nested(PaginationSchema, dump_only=True)

================
File: backend/src/schemas/fuel_truck_schemas.py
================
from marshmallow import Schema, fields

class FuelTruckSchema(Schema):
    """Schema for serializing FuelTruck model instances."""
    id = fields.Int(dump_only=True)
    truck_number = fields.Str(required=True)
    fuel_type = fields.Str(required=True)
    capacity = fields.Decimal(required=True, places=2)
    current_meter_reading = fields.Decimal(required=True, places=2)
    is_active = fields.Bool(dump_only=True)
    created_at = fields.DateTime(dump_only=True)
    updated_at = fields.DateTime(dump_only=True)

class FuelTruckCreateRequestSchema(Schema):
    """Schema for validating fuel truck creation requests."""
    truck_number = fields.Str(required=True)
    fuel_type = fields.Str(required=True)
    capacity = fields.Decimal(required=True, places=2)
    current_meter_reading = fields.Decimal(required=False, places=2, load_default=0)

class FuelTruckUpdateRequestSchema(Schema):
    """Schema for validating fuel truck update requests (PATCH). All fields optional."""
    truck_number = fields.Str(required=False)
    fuel_type = fields.Str(required=False)
    capacity = fields.Decimal(required=False, places=2)
    current_meter_reading = fields.Decimal(required=False, places=2)
    is_active = fields.Bool(required=False)

class FuelTruckCreateResponseSchema(Schema):
    """Schema for the fuel truck creation response."""
    message = fields.Str(dump_only=True)
    fuel_truck = fields.Nested(FuelTruckSchema, dump_only=True)

class FuelTruckListResponseSchema(Schema):
    """Schema for the fuel trucks list endpoint response."""
    message = fields.Str(dump_only=True)
    fuel_trucks = fields.List(fields.Nested(FuelTruckSchema), dump_only=True)

================
File: backend/src/schemas/user_schemas.py
================
from marshmallow import Schema, fields, validate

class RoleBriefSchema(Schema):
    """Brief schema for role information in user responses."""
    id = fields.Integer()
    name = fields.String()

class UserCreateRequestSchema(Schema):
    """Schema for user creation requests."""
    email = fields.Email(required=True)
    password = fields.String(required=True, load_only=True, validate=validate.Length(min=6))
    role_ids = fields.List(fields.Integer(), required=True)
    username = fields.String(required=False)
    fullName = fields.String(required=False, attribute="name")
    is_active = fields.Boolean(required=False)

class UserUpdateRequestSchema(Schema):
    """Schema for user update requests."""
    username = fields.String(required=False)
    fullName = fields.String(required=False, attribute="name")
    email = fields.Email(required=False)
    role_ids = fields.List(fields.Integer(), required=False)
    is_active = fields.Boolean(required=False)
    password = fields.String(required=False, load_only=True, validate=validate.Length(min=6))

class UserBriefSchema(Schema):
    """Brief schema for user information in list responses."""
    id = fields.Integer()
    username = fields.String()
    fullName = fields.String(attribute="name")
    email = fields.Email()
    roles = fields.List(fields.Nested(RoleBriefSchema))
    is_active = fields.Boolean()
    created_at = fields.DateTime()

class UserDetailSchema(Schema):
    """Detailed schema for single user responses."""
    id = fields.Integer()
    username = fields.String()
    fullName = fields.String(attribute="name")
    email = fields.Email()
    roles = fields.List(fields.Nested(RoleBriefSchema))
    is_active = fields.Boolean()
    created_at = fields.DateTime()
    updated_at = fields.DateTime()

class UserListResponseSchema(Schema):
    """Schema for list of users response."""
    message = fields.String()
    users = fields.List(fields.Nested(UserBriefSchema))

class ErrorResponseSchema(Schema):
    """Schema for error responses."""
    error = fields.String()
    details = fields.Raw(required=False)

================
File: backend/src/services/__init__.py
================
from .auth_service import AuthService
from .aircraft_service import AircraftService
from .customer_service import CustomerService
from .fuel_order_service import FuelOrderService
from .user_service import UserService
from .fuel_truck_service import FuelTruckService
from .role_service import RoleService
from .permission_service import PermissionService

__all__ = ['AuthService', 'AircraftService', 'CustomerService', 'FuelOrderService', 'UserService', 'FuelTruckService', 'RoleService', 'PermissionService']

================
File: backend/src/services/aircraft_service.py
================
from typing import Tuple, List, Optional, Dict, Any
from ..models.aircraft import Aircraft
from ..app import db

class AircraftService:
    @staticmethod
    def create_aircraft(data: Dict[str, Any]) -> Tuple[Optional[Aircraft], str, int]:
        if 'tail_number' not in data:
            return None, "Missing required field: tail_number", 400
        if 'aircraft_type' not in data:
            return None, "Missing required field: aircraft_type", 400
        if 'fuel_type' not in data:
            return None, "Missing required field: fuel_type", 400
            
        if Aircraft.query.filter_by(tail_number=data['tail_number']).first():
            return None, "Aircraft with this tail number already exists", 409
        try:
            aircraft = Aircraft(
                tail_number=data['tail_number'],
                aircraft_type=data['aircraft_type'],
                fuel_type=data['fuel_type']
            )
            db.session.add(aircraft)
            db.session.commit()
            return aircraft, "Aircraft created successfully", 201
        except Exception as e:
            db.session.rollback()
            return None, f"Error creating aircraft: {str(e)}", 500

    @staticmethod
    def get_aircraft_by_tail(tail_number: str) -> Tuple[Optional[Aircraft], str, int]:
        try:
            aircraft = Aircraft.query.get(tail_number)
            if not aircraft:
                return None, f"Aircraft with tail number {tail_number} not found", 404
            return aircraft, "Aircraft retrieved successfully", 200
        except Exception as e:
            return None, f"Error retrieving aircraft: {str(e)}", 500

    @staticmethod
    def get_all_aircraft(filters: Optional[Dict[str, Any]] = None) -> Tuple[List[Aircraft], str, int]:
        query = Aircraft.query
        if filters and 'customer_id' in filters:
            query = query.filter_by(customer_id=filters['customer_id'])
        try:
            aircraft_list = query.order_by(Aircraft.tail_number.asc()).all()
            return aircraft_list, "Aircraft list retrieved successfully", 200
        except Exception as e:
            return [], f"Error retrieving aircraft: {str(e)}", 500

    @staticmethod
    def update_aircraft(tail_number: str, update_data: Dict[str, Any]) -> Tuple[Optional[Aircraft], str, int]:
        try:
            aircraft = Aircraft.query.get(tail_number)
            if not aircraft:
                return None, f"Aircraft with tail number {tail_number} not found", 404
            if 'aircraft_type' in update_data:
                aircraft.aircraft_type = update_data['aircraft_type']
            if 'fuel_type' in update_data:
                aircraft.fuel_type = update_data['fuel_type']
            if 'customer_id' in update_data:
                aircraft.customer_id = update_data['customer_id']
            db.session.commit()
            return aircraft, "Aircraft updated successfully", 200
        except Exception as e:
            db.session.rollback()
            return None, f"Error updating aircraft: {str(e)}", 500

    @staticmethod
    def delete_aircraft(tail_number: str) -> Tuple[bool, str, int]:
        try:
            aircraft = Aircraft.query.get(tail_number)
            if not aircraft:
                return False, f"Aircraft with tail number {tail_number} not found", 404
            db.session.delete(aircraft)
            db.session.commit()
            return True, "Aircraft deleted successfully", 200
        except Exception as e:
            db.session.rollback()
            return False, f"Error deleting aircraft: {str(e)}", 500

================
File: backend/src/services/auth_service.py
================
from typing import Union, Tuple
from ..models.user import User
from ..models.permission_group import PermissionGroup
from ..models.user_permission_group import UserPermissionGroup
from ..extensions import db
from datetime import datetime, timedelta
import jwt
from flask import current_app

class AuthService:
    @classmethod
    def register_user(cls, email: str, password: str) -> User:
        """
        Register a new user if the email is not already taken.
        
        Args:
            email (str): The user's email address
            password (str): The user's password (will be hashed before storage)
            
        Returns:
            User: The newly created user object
            
        Raises:
            ValueError: If email already exists
        """
        print(f"Registering user with email: {email}")
        
        # Check if user already exists with this email
        existing_user = User.query.filter_by(email=email).first()
        if existing_user:
            print(f"User with email {email} already exists")
            raise ValueError("Email already registered")
            
        # Generate username from email (part before @)
        username = email.split('@')[0]
        print(f"Generated username: {username}")
        
        # If username exists, append a number
        base_username = username
        counter = 1
        while User.query.filter_by(username=username).first():
            username = f"{base_username}{counter}"
            counter += 1
            print(f"Username {base_username} exists, trying {username}")
            
        try:
            # Create new user instance (no default role, will use permission groups)
            new_user = User(
                username=username,
                email=email,
                is_active=True
            )
            new_user.set_password(password)
            
            # Add to session and flush to get ID
            db.session.add(new_user)
            db.session.flush()
            
            # Assign default LST permission group for new registrations
            lst_group = PermissionGroup.query.filter_by(name='LST_Default_Permissions').first()
            if lst_group:
                assignment = UserPermissionGroup(
                    user_id=new_user.id,
                    permission_group_id=lst_group.id,
                    assigned_at=datetime.utcnow(),
                    is_active=True
                )
                db.session.add(assignment)
            
            db.session.commit()
            print(f"Successfully created user: {new_user.username} with LST permissions")
            return new_user
        except Exception as e:
            db.session.rollback()
            print(f"Error registering user: {str(e)}")
            # In a production environment, you would want to log the error here
            raise Exception(f"Database error: {str(e)}")

    @classmethod
    def authenticate_user(cls, email: str, password: str) -> str:
        """
        Authenticate a user with their email and password.
        
        Args:
            email (str): The user's email
            password (str): The user's password
            
        Returns:
            str: JWT token string if authentication successful
            
        Raises:
            ValueError: If credentials are invalid or account is inactive
            Exception: If there's a server error
        """
        # Find user by email
        user = User.query.filter_by(email=email).first()
        print(f"Authenticating user with email: {email}")
        print(f"Found user: {user}")
        
        # Check if user exists and password is correct
        if not user:
            print("User not found")
            raise ValueError("Invalid email or password")
            
        if not user.check_password(password):
            print("Password check failed")
            raise ValueError("Invalid email or password")
            
        # Check if user account is active
        if not user.is_active:
            print("User account is inactive")
            raise ValueError("User account is inactive")
            
        # Return user object for token creation in route
        return user

    @staticmethod
    def get_user_effective_permissions(user):
        """
        Retrieves a unique list of all permission names assigned to the user through their roles.
        Returns (permissions_list, message, status_code)
        """
        if not user or not hasattr(user, 'roles') or user.roles.count() == 0:
            return [], "User has no assigned roles or permissions.", 200

        effective_permissions = set()
        try:
            for role in user.roles.all():  # Efficiently fetch all roles
                if hasattr(role, 'permissions'):
                    for permission in role.permissions.all():  # Efficiently fetch all permissions
                        effective_permissions.add(permission.name)
            sorted_permissions = sorted(list(effective_permissions))
            return sorted_permissions, "Effective permissions retrieved successfully.", 200
        except Exception as e:
            print(f"Error calculating effective permissions for user {getattr(user, 'id', None)}: {str(e)}")
            return None, f"Error calculating effective permissions: {str(e)}", 500

================
File: backend/src/services/customer_service.py
================
from typing import Tuple, List, Optional, Dict, Any
from ..models.customer import Customer
from ..app import db

class CustomerService:
    @staticmethod
    def create_customer(data: Dict[str, Any]) -> Tuple[Optional[Customer], str, int]:
        if 'name' not in data:
            return None, "Missing required field: name", 400
        if Customer.query.filter_by(name=data['name']).first():
            return None, "Customer with this name already exists", 409
        try:
            customer = Customer(
                name=data['name']
            )
            db.session.add(customer)
            db.session.commit()
            return customer, "Customer created successfully", 201
        except Exception as e:
            db.session.rollback()
            return None, f"Error creating customer: {str(e)}", 500

    @staticmethod
    def get_customer_by_id(customer_id: int) -> Tuple[Optional[Customer], str, int]:
        try:
            customer = Customer.query.get(customer_id)
            if not customer:
                return None, f"Customer with ID {customer_id} not found", 404
            return customer, "Customer retrieved successfully", 200
        except Exception as e:
            return None, f"Error retrieving customer: {str(e)}", 500

    @staticmethod
    def get_all_customers(filters: Optional[Dict[str, Any]] = None) -> Tuple[List[Customer], str, int]:
        query = Customer.query
        try:
            customers = query.order_by(Customer.name.asc()).all()
            return customers, "Customer list retrieved successfully", 200
        except Exception as e:
            return [], f"Error retrieving customers: {str(e)}", 500

    @staticmethod
    def update_customer(customer_id: int, update_data: Dict[str, Any]) -> Tuple[Optional[Customer], str, int]:
        try:
            customer = Customer.query.get(customer_id)
            if not customer:
                return None, f"Customer with ID {customer_id} not found", 404
            if 'name' in update_data:
                # Check for uniqueness
                existing = Customer.query.filter_by(name=update_data['name']).first()
                if existing and existing.id != customer_id:
                    return None, f"Customer name {update_data['name']} already exists", 400
                customer.name = update_data['name']
            db.session.commit()
            return customer, "Customer updated successfully", 200
        except Exception as e:
            db.session.rollback()
            return None, f"Error updating customer: {str(e)}", 500

    @staticmethod
    def delete_customer(customer_id: int) -> Tuple[bool, str, int]:
        try:
            customer = Customer.query.get(customer_id)
            if not customer:
                return False, f"Customer with ID {customer_id} not found", 404
            db.session.delete(customer)
            db.session.commit()
            return True, "Customer deleted successfully", 200
        except Exception as e:
            db.session.rollback()
            return False, f"Error deleting customer: {str(e)}", 500

================
File: backend/src/services/fuel_order_service.py
================
from datetime import datetime, timedelta
from decimal import Decimal
import csv
import io
from typing import List, Dict, Any, Optional, Tuple
from sqlalchemy import and_, or_, desc, asc
from sqlalchemy.orm import joinedload
from sqlalchemy.exc import IntegrityError, SQLAlchemyError
from src.models import (
    FuelOrder, 
    FuelOrderStatus, 
    Aircraft, 
    User,
    FuelTruck,
    Customer,
    Permission,
    PermissionGroup,
    UserPermission
)
from src.models.user_permission_group import UserPermissionGroup
from src.extensions import db
from src.services.aircraft_service import AircraftService
from flask import current_app
import logging
import traceback

logger = logging.getLogger(__name__)

class FuelOrderService:
    @classmethod
    def get_order_status_counts(cls, current_user):
        """
        Calculate and return counts of fuel orders by status groups for dashboard cards.
        PBAC: Permission-based, not role-based. Only users with 'VIEW_ORDER_STATS' permission should access this.
        Returns: (dict, message, status_code)
        """
        from src.models import FuelOrderStatus, FuelOrder
        from sqlalchemy import func, case
        from src.extensions import db
        try:
            # PBAC: Permission check is handled by decorator, so no need to check here
            pending_statuses = [FuelOrderStatus.DISPATCHED]
            in_progress_statuses = [FuelOrderStatus.ACKNOWLEDGED, FuelOrderStatus.EN_ROUTE, FuelOrderStatus.FUELING]
            completed_statuses = [FuelOrderStatus.COMPLETED]
            counts = db.session.query(
                func.count(case((FuelOrder.status.in_(pending_statuses), FuelOrder.id))).label('pending'),
                func.count(case((FuelOrder.status.in_(in_progress_statuses), FuelOrder.id))).label('in_progress'),
                func.count(case((FuelOrder.status.in_(completed_statuses), FuelOrder.id))).label('completed')
            ).one_or_none()
            result_counts = {
                'pending': counts[0] if counts else 0,
                'in_progress': counts[1] if counts else 0,
                'completed': counts[2] if counts else 0,
            }
            return result_counts, "Status counts retrieved successfully.", 200
        except Exception as e:
            db.session.rollback()
            import logging
            logging.getLogger(__name__).error(f"Error retrieving fuel order status counts: {str(e)}")
            return None, f"Database error retrieving status counts: {str(e)}", 500

    @classmethod
    def get_status_counts(cls, current_user):
        """
        PBAC: Permission-based, not role-based. Only users with 'VIEW_ORDER_STATS' permission should access this.
        Returns: (dict, message, status_code)
        """
        try:
            return cls.get_order_status_counts(current_user)
        except Exception as e:
            import logging
            logging.getLogger(__name__).error(f"Error in get_status_counts: {str(e)}")
            return None, f"Internal error in get_status_counts: {str(e)}", 500

    @classmethod
    def create_fuel_order(cls, order_data: dict) -> Tuple[Optional[FuelOrder], Optional[str], Optional[int], Optional[bool]]:
        from src.models import User, UserRole, FuelOrder, FuelOrderStatus, Aircraft
        from src.extensions import db
        import logging
        logger = logging.getLogger(__name__)

        # --- Check if any users exist (existing logic) ---
        user_count = User.query.count()
        if user_count == 0:
            return (
                None,
                "No users exist in the system. Please create an ADMIN user via the CLI or database to access the admin panel and create LST users.",
                400,
                False # aircraft_created_this_request
            )

        # Extract data
        tail_number = order_data.get('tail_number')
        fuel_type_from_order = order_data.get('fuel_type') # Renamed to avoid conflict with aircraft.fuel_type
        assigned_lst_user_id = order_data.get('assigned_lst_user_id')
        assigned_truck_id = order_data.get('assigned_truck_id')
        customer_id = order_data.get('customer_id') # For FuelOrder, not new Aircraft

        # Validate presence of tail_number specifically first for aircraft check
        if not tail_number:
            return None, "Tail number is required.", 400, False # aircraft_created_this_request

        # --- Check for Aircraft and auto-create if not found ---
        aircraft = Aircraft.query.get(tail_number)
        aircraft_created_this_request = False
        if not aircraft:
            logger.info(f"Aircraft with tail number {tail_number} not found. Auto-creating.")
            placeholder_aircraft_type = "UNKNOWN_TYPE"
            placeholder_fuel_type = "UNKNOWN_FUEL" # Consider if fuel_type_from_order could be used if appropriate

            aircraft = Aircraft(
                tail_number=tail_number,
                aircraft_type=placeholder_aircraft_type,
                fuel_type=placeholder_fuel_type
                # customer_id is not part of Aircraft model, so not set here
            )
            db.session.add(aircraft)
            aircraft_created_this_request = True
            # DO NOT COMMIT HERE - will be part of the main transaction for the fuel order

        # Check for other required fields for the fuel order itself
        # Note: tail_number is already validated. fuel_type_from_order is for the order.
        if not all([fuel_type_from_order, assigned_lst_user_id is not None, assigned_truck_id is not None]):
            return None, "Missing required fields for fuel order (fuel_type, LST, truck).", 400, aircraft_created_this_request

        # --- LST Assignment Logic ---
        if assigned_lst_user_id == -1:
            active_lsts = FuelOrderService.get_active_lsts()
            if not active_lsts:
                return None, "No available LST found for auto-assignment.", 400, aircraft_created_this_request
            min_count = None
            chosen_lst = None
            active_statuses = [
                FuelOrderStatus.DISPATCHED,
                FuelOrderStatus.ACKNOWLEDGED,
                FuelOrderStatus.EN_ROUTE,
                FuelOrderStatus.FUELING
            ]
            for lst in active_lsts:
                count = FuelOrder.query.filter(
                    FuelOrder.assigned_lst_user_id == lst.id,
                    FuelOrder.status.in_(active_statuses)
                ).count()
                if min_count is None or count < min_count:
                    min_count = count
                    chosen_lst = lst
            if not chosen_lst:
                return None, "No available LST found for auto-assignment.", 400, aircraft_created_this_request
            logger.info(f"Auto-assigned LST user: {chosen_lst.id} (Active orders: {min_count})")
            assigned_lst_user_id = chosen_lst.id
            # order_data['assigned_lst_user_id'] = assigned_lst_user_id # Not needed if using var directly
        else:
            lst_user, error = FuelOrderService.validate_lst_assignment(assigned_lst_user_id)
            if not lst_user:
                return None, error, 400, aircraft_created_this_request

        # --- Truck Validation ---
        # Assuming truck validation logic exists here or is part of route handler.
        # For this example, we'll just check if truck ID leads to a valid truck.
        truck = FuelTruck.query.get(assigned_truck_id)
        if not truck:
            return None, f"Fuel truck with ID {assigned_truck_id} not found.", 400, aircraft_created_this_request
        if not truck.is_active:
            return None, f"Fuel truck {assigned_truck_id} is not active.", 400, aircraft_created_this_request
        
        # --- Customer Validation (Optional) ---
        if customer_id:
            customer = Customer.query.get(customer_id)
            if not customer:
                return None, f"Customer with ID {customer_id} not found.", 400, aircraft_created_this_request


        # Create the FuelOrder
        try:
            new_order = FuelOrder(
                tail_number=aircraft.tail_number, # Use tail_number from the aircraft object
                fuel_type=fuel_type_from_order, # Use fuel_type from the order data
                assigned_lst_user_id=assigned_lst_user_id,
                assigned_truck_id=assigned_truck_id,
                customer_id=customer_id, # For the FuelOrder
                additive_requested=order_data.get('additive_requested', False),
                requested_amount=order_data.get('requested_amount'),
                location_on_ramp=order_data.get('location_on_ramp'),
                csr_notes=order_data.get('csr_notes'),
                status=FuelOrderStatus.DISPATCHED,
                dispatch_timestamp=datetime.utcnow()
            )
            db.session.add(new_order)
            
            # Commit the session (includes new_order and potentially new_aircraft)
            db.session.commit()
            
            message = "Fuel order created successfully."
            if aircraft_created_this_request:
                message += f" New aircraft {aircraft.tail_number} was auto-created with placeholder details."
            
            return new_order, message, 201, aircraft_created_this_request
            
        except Exception as e:
            db.session.rollback()
            logger.error(f"Error creating fuel order: {str(e)} traceback: {traceback.format_exc()}")
            # Check for specific FK violation on aircraft if not auto-created, though auto-create should prevent this path.
            if "violates foreign key constraint" in str(e) and "fuel_orders_tail_number_fkey" in str(e) and not aircraft_created_this_request:
                 return None, f"Database error: Aircraft with tail number {tail_number} could not be referenced. Ensure it exists or was auto-created.", 500, False
            return None, f"Database error during fuel order creation: {str(e)}", 500, aircraft_created_this_request

    @classmethod
    def get_fuel_orders(
        cls,
        current_user: User,
        filters: Optional[Dict[str, Any]] = None
    ) -> Tuple[Optional[Any], str]:
        """
        Retrieve paginated fuel orders based on user PBAC and optional filters.
        PBAC: If user lacks 'VIEW_ALL_ORDERS', only show orders assigned to them.
        Optimized with eager loading for denormalized fields.
        """
        logger = logging.getLogger(__name__)
        try:
            logger.info(f"[FuelOrderService.get_fuel_orders] User: {getattr(current_user, 'id', None)} | Filters: {filters}")
            
            # Use eager loading for optimization of denormalized fields
            query = FuelOrder.query.options(
                joinedload(FuelOrder.assigned_lst_user),
                joinedload(FuelOrder.assigned_truck)
            )

            # PBAC: Only show all orders if user has permission
            if not current_user.has_permission('VIEW_ALL_ORDERS'):
                # Only see their assigned orders
                query = query.filter(FuelOrder.assigned_lst_user_id == current_user.id)

            # Apply filtering based on request parameters
            if filters:
                status_filter = filters.get('status')
                if status_filter:
                    try:
                        status_enum = FuelOrderStatus[status_filter.upper()]
                        query = query.filter(FuelOrder.status == status_enum)
                    except KeyError:
                        return None, f"Invalid status value provided: {status_filter}"
                
                # Add additional filter implementations
                customer_id = filters.get('customer_id')
                if customer_id:
                    try:
                        query = query.filter(FuelOrder.customer_id == int(customer_id))
                    except (ValueError, TypeError):
                        return None, f"Invalid customer_id value provided: {customer_id}"
                
                priority = filters.get('priority')
                if priority:
                    # Note: Priority field would need to be added to FuelOrder model
                    # For now, skip this filter
                    pass
                
                start_date = filters.get('start_date')
                if start_date:
                    try:
                        start_datetime = datetime.fromisoformat(start_date.replace('Z', '+00:00'))
                        query = query.filter(FuelOrder.created_at >= start_datetime)
                    except ValueError:
                        return None, f"Invalid start_date format provided: {start_date}"
                
                end_date = filters.get('end_date')
                if end_date:
                    try:
                        end_datetime = datetime.fromisoformat(end_date.replace('Z', '+00:00'))
                        query = query.filter(FuelOrder.created_at <= end_datetime)
                    except ValueError:
                        return None, f"Invalid end_date format provided: {end_date}"
                
                assigned_lst_user_id = filters.get('assigned_lst_user_id')
                if assigned_lst_user_id:
                    try:
                        query = query.filter(FuelOrder.assigned_lst_user_id == int(assigned_lst_user_id))
                    except (ValueError, TypeError):
                        return None, f"Invalid assigned_lst_user_id value provided: {assigned_lst_user_id}"
                
                assigned_truck_id = filters.get('assigned_truck_id')
                if assigned_truck_id:
                    try:
                        query = query.filter(FuelOrder.assigned_truck_id == int(assigned_truck_id))
                    except (ValueError, TypeError):
                        return None, f"Invalid assigned_truck_id value provided: {assigned_truck_id}"

            try:
                page = int(filters.get('page', 1)) if filters else 1
                per_page = int(filters.get('per_page', 20)) if filters else 20
                if page < 1:
                    page = 1
                if per_page < 1:
                    per_page = 20
                if per_page > 100:
                    per_page = 100
            except (ValueError, TypeError):
                page = 1
                per_page = 20

            try:
                paginated_orders = query.order_by(FuelOrder.created_at.desc()).paginate(
                    page=page,
                    per_page=per_page,
                    error_out=False
                )
                return paginated_orders, "Orders retrieved successfully"
            except Exception as e:
                current_app.logger.error(f"Error retrieving fuel orders: {str(e)}")
                return None, f"Database error while retrieving orders: {str(e)}"
        except Exception as e:
            logger.error(f"Unhandled exception in FuelOrderService.get_fuel_orders: {str(e)}\n{traceback.format_exc()}")
            return None, f"An internal server error occurred in FuelOrderService.get_fuel_orders: {str(e)}"

    @classmethod
    def get_fuel_order_by_id(
        cls,
        order_id: int,
        current_user: User
    ) -> Tuple[Optional[FuelOrder], str, int]:
        """
        Retrieve a specific fuel order by ID after performing authorization checks.
        Optimized with eager loading for denormalized fields.
        
        Args:
            order_id (int): The ID of the order to retrieve
            current_user (User): The authenticated user making the request
            
        Returns:
            Tuple[Optional[FuelOrder], str, int]: A tuple containing:
                - The FuelOrder if successful, None if failed
                - A success/error message
                - HTTP status code (200, 403, 404)
        """
        # Use eager loading for optimization of denormalized fields
        order = FuelOrder.query.options(
            joinedload(FuelOrder.assigned_lst_user),
            joinedload(FuelOrder.assigned_truck)
        ).get(order_id)
        
        if not order:
            return None, f"Fuel order with ID {order_id} not found.", 404  # Not Found

        # Perform Authorization Check
        if not FuelOrderService.can_user_modify_order(current_user, order):
            return None, "Forbidden: You do not have permission to view this fuel order.", 403  # Forbidden

        # Return the order object
        return order, "Fuel order retrieved successfully.", 200  # OK

    @classmethod
    def update_order_status(
        cls,
        order_id: int,
        new_status: FuelOrderStatus,
        current_user: User
    ) -> Tuple[Optional[FuelOrder], str, int]:
        """
        Update the status of a fuel order after performing authorization checks.
        
        Args:
            order_id (int): The ID of the order to update
            new_status (FuelOrderStatus): The target status to update to
            current_user (User): The authenticated user performing the action
            
        Returns:
            Tuple[Optional[FuelOrder], str, int]: A tuple containing:
                - The updated FuelOrder if successful, None if failed
                - A success/error message
                - HTTP status code (200, 403, 404)
        """
        # Fetch the fuel order by ID
        order = FuelOrder.query.get(order_id)
        if not order:
            return None, f"Fuel order with ID {order_id} not found.", 404  # Not Found

        # Check if the user is the assigned LST for this order
        if not FuelOrderService.can_user_modify_order(current_user, order):
            return None, "Forbidden: You do not have permission to update this fuel order.", 403  # Forbidden

        # Define allowed transitions for LST updates via this endpoint
        allowed_transitions = {
            FuelOrderStatus.DISPATCHED: [FuelOrderStatus.ACKNOWLEDGED],
            FuelOrderStatus.ACKNOWLEDGED: [FuelOrderStatus.EN_ROUTE],
            FuelOrderStatus.EN_ROUTE: [FuelOrderStatus.FUELING]
            # Note: Fueling -> Completed will be handled by a separate 'complete_order' endpoint
            # Note: Cancellation will be handled by a separate endpoint with different permissions
        }

        # Validate the requested transition
        if order.status not in allowed_transitions or new_status not in allowed_transitions[order.status]:
            return None, f"Invalid status transition from {order.status.value} to {new_status.value}.", 400  # Bad Request

        try:
            # Update the order status
            order.status = new_status

            # Update corresponding timestamp field based on the new status
            if new_status == FuelOrderStatus.ACKNOWLEDGED:
                order.acknowledge_timestamp = datetime.utcnow()
            elif new_status == FuelOrderStatus.EN_ROUTE:
                order.en_route_timestamp = datetime.utcnow()
            elif new_status == FuelOrderStatus.FUELING:
                order.fueling_start_timestamp = datetime.utcnow()

            # Commit the changes
            db.session.commit()

            return order, f"Order status successfully updated to {new_status.value}.", 200  # OK

        except Exception as e:
            db.session.rollback()
            current_app.logger.error(f"Error updating fuel order status: {str(e)}")
            return None, f"Database error while updating order status: {str(e)}", 500  # Internal Server Error

    @classmethod
    def complete_fuel_order(
        cls,
        order_id: int,
        completion_data: Dict[str, Any],
        current_user: User
    ) -> Tuple[Optional[FuelOrder], str, int]:
        """
        Complete a fuel order by updating its status and recording completion details.
        
        Args:
            order_id (int): The ID of the order to complete
            completion_data (Dict[str, Any]): Dictionary containing completion details
                Required keys:
                - start_meter_reading (str/Decimal): Starting meter reading
                - end_meter_reading (str/Decimal): Ending meter reading
                Optional keys:
                - lst_notes (str): Additional notes from the LST
            current_user (User): The authenticated user performing the action
            
        Returns:
            Tuple[Optional[FuelOrder], str, int]: A tuple containing:
                - The updated FuelOrder if successful, None if failed
                - A success/error message
                - HTTP status code (200, 400, 403, 404)
        """
        # Fetch the fuel order by ID
        order = FuelOrder.query.get(order_id)
        if not order:
            return None, f"Fuel order with ID {order_id} not found.", 404  # Not Found

        # Perform Authorization Check: Ensure the user is the assigned LST
        if not FuelOrderService.can_user_complete_order(current_user, order):
            # Also allow Admin/CSR maybe? For MVP, let's stick to LST.
            return None, "Forbidden: Only the assigned LST can complete this fuel order.", 403  # Forbidden

        # Perform Status Check: Ensure the order is in a state ready for completion
        if order.status != FuelOrderStatus.FUELING:
            # We could allow completion from other states like EN_ROUTE, ACKNOWLEDGED
            # but requiring FUELING enforces the workflow more strictly.
            return None, f"Order cannot be completed from its current status ({order.status.value}). Must be 'Fueling'.", 400  # Bad Request

        # Extract and validate meter readings
        try:
            start_meter = Decimal(completion_data['start_meter_reading'])
            end_meter = Decimal(completion_data['end_meter_reading'])
            if end_meter < start_meter:
                return None, "End meter reading cannot be less than start meter reading.", 400  # Bad Request
            # Add checks for negative values if necessary
            if start_meter < 0 or end_meter < 0:
                return None, "Meter readings cannot be negative.", 400
        except (KeyError, ValueError, TypeError):
            return None, "Invalid or missing meter reading values.", 400

        lst_notes = completion_data.get('lst_notes')  # Optional notes

        # Calculate gallons dispensed
        gallons_dispensed = end_meter - start_meter

        # Update order fields
        order.start_meter_reading = start_meter
        order.end_meter_reading = end_meter
        order.calculated_gallons_dispensed = gallons_dispensed
        order.lst_notes = lst_notes  # Update notes (will be None if not provided)
        order.status = FuelOrderStatus.COMPLETED  # Set status to Completed
        order.completion_timestamp = datetime.utcnow()  # Record completion time

        try:
            db.session.commit()
            return order, "Fuel order completed successfully.", 200  # OK
        except Exception as e:
            db.session.rollback()
            current_app.logger.error(f"Error completing fuel order: {str(e)}")
            return None, f"Database error while completing order: {str(e)}", 500  # Internal Server Error

    @classmethod
    def review_fuel_order(
        cls,
        order_id: int,
        reviewer_user: User
    ) -> Tuple[Optional[FuelOrder], str, int]:
        """
        Review a completed fuel order.
        
        Args:
            order_id (int): The ID of the order to review
            reviewer_user (User): The authenticated CSR or Admin user performing the review
            
        Returns:
            Tuple[Optional[FuelOrder], str, int]: A tuple containing:
                - The updated FuelOrder if successful, None if failed
                - A success/error message
                - HTTP status code (200, 400, 404)
        """
        # Fetch the fuel order by ID
        order = FuelOrder.query.get(order_id)
        if not order:
            return None, f"Fuel order with ID {order_id} not found.", 404  # Not Found

        # Perform Status Check: Ensure the order is 'COMPLETED' before it can be reviewed
        if order.status != FuelOrderStatus.COMPLETED:
            return None, f"Order cannot be reviewed. Current status is '{order.status.value}', must be 'Completed'.", 400  # Bad Request

        # Update order fields with review information
        order.status = FuelOrderStatus.REVIEWED
        order.reviewed_by_csr_user_id = reviewer_user.id
        order.reviewed_timestamp = datetime.utcnow()

        try:
            db.session.commit()
            return order, "Fuel order marked as reviewed.", 200  # OK
        except Exception as e:
            db.session.rollback()
            current_app.logger.error(f"Error reviewing fuel order: {str(e)}")
            return None, f"Database error while marking order as reviewed: {str(e)}", 500  # Internal Server Error

    @classmethod
    def export_fuel_orders_to_csv(
        cls,
        current_user: User,
        filters: Optional[Dict[str, Any]] = None
    ) -> Tuple[Optional[str], str, int]:
        """
        Fetch fuel orders for CSV export based on filters and format them into a CSV string.
        
        Args:
            current_user (User): The authenticated user requesting the export
            filters (Optional[Dict[str, Any]]): Optional dictionary containing filter parameters
                - status (str): Override default REVIEWED status filter
                - date_from (str): Filter orders from this date (TODO)
                - date_to (str): Filter orders until this date (TODO)
                
        Returns:
            Tuple[Optional[str], str, int]: A tuple containing:
                - CSV data string if successful, None if failed
                - A success/error message
                - HTTP status code (200, 400, 500)
        """
        # Authorization check: Only users with export permissions can export
        if not current_user.has_permission('export_order_data'):
            return None, "Forbidden: You do not have permission to export fuel orders.", 403

        # Initialize base query
        query = FuelOrder.query

        # Apply default status filter (REVIEWED) or override from filters
        target_status = FuelOrderStatus.REVIEWED  # Default export status
        if filters and filters.get('status'):
            try:
                # Allow overriding default status via filter
                target_status = FuelOrderStatus[filters['status'].upper()]
            except KeyError:
                return None, f"Invalid status value provided for export: {filters['status']}", 400

        query = query.filter(FuelOrder.status == target_status)

        try:
            # Fetch all orders matching the criteria, ordered by review timestamp
            orders_to_export = query.order_by(FuelOrder.reviewed_timestamp.desc()).all()

            if not orders_to_export:
                return [], "No orders found matching the criteria for export.", 200

            # Create in-memory text stream for CSV writing
            output = io.StringIO()
            writer = csv.writer(output)

            # Define and write the header row
            header = [
                'Order ID', 'Status', 'Tail Number', 'Customer ID',
                'Fuel Type', 'Additive Requested', 'Requested Amount',
                'Assigned LST ID', 'Assigned Truck ID',
                'Location on Ramp', 'CSR Notes',
                'Start Meter', 'End Meter', 'Gallons Dispensed', 'LST Notes',
                'Created At (UTC)', 'Dispatch Timestamp (UTC)', 'Acknowledge Timestamp (UTC)',
                'En Route Timestamp (UTC)', 'Fueling Start Timestamp (UTC)',
                'Completion Timestamp (UTC)', 'Reviewed Timestamp (UTC)', 'Reviewed By CSR ID'
            ]
            writer.writerow(header)

            # Helper function to format values safely
            def format_value(value):
                if value is None:
                    return ''
                if isinstance(value, datetime):
                    return value.strftime('%Y-%m-%d %H:%M:%S')  # Consistent UTC format
                if isinstance(value, Decimal):
                    return str(value)  # Convert Decimal to string
                if isinstance(value, bool):
                    return 'Yes' if value else 'No'
                if isinstance(value, FuelOrderStatus):
                    return value.value  # Get enum string value
                return str(value)

            # Write each order as a row in the CSV
            for order in orders_to_export:
                row = [
                    order.id,
                    format_value(order.status),
                    order.tail_number,
                    format_value(order.customer_id),
                    order.fuel_type,
                    format_value(order.additive_requested),
                    format_value(order.requested_amount),
                    format_value(order.assigned_lst_user_id),
                    format_value(order.assigned_truck_id),
                    order.location_on_ramp or '',  # Use empty string for None strings
                    order.csr_notes or '',
                    format_value(order.start_meter_reading),
                    format_value(order.end_meter_reading),
                    format_value(order.calculated_gallons_dispensed),
                    order.lst_notes or '',
                    format_value(order.created_at),
                    format_value(order.dispatch_timestamp),
                    format_value(order.acknowledge_timestamp),
                    format_value(order.en_route_timestamp),
                    format_value(order.fueling_start_timestamp),
                    format_value(order.completion_timestamp),
                    format_value(order.reviewed_timestamp),
                    format_value(order.reviewed_by_csr_user_id)
                ]
                writer.writerow(row)

            # Get the CSV string and close the stream
            csv_data = output.getvalue()
            output.close()

            return csv_data, "CSV data generated successfully.", 200

        except Exception as e:
            current_app.logger.error(f"Error generating CSV export: {str(e)}")
            return None, f"Error generating CSV export: {str(e)}", 500 

    @staticmethod
    def get_active_lsts():
        """Get active Line Service Technicians based on permissions and roles."""
        # Find users who have LST permissions through permission groups or direct assignments
        lst_permissions = ['access_fueler_module', 'start_fueling_task', 'perform_fueling']
        
        # Get users with LST permission groups
        lst_group = PermissionGroup.query.filter_by(name='LST_Default_Permissions').first()
        active_lsts = []
        
        if lst_group:
            # Get users assigned to LST permission group
            lst_assignments = UserPermissionGroup.query.filter_by(
                permission_group_id=lst_group.id,
                is_active=True
            ).all()
            
            for assignment in lst_assignments:
                if assignment.user and assignment.user.is_active:
                    active_lsts.append(assignment.user)
        
        # Also check for users with direct LST permissions
        for permission_name in lst_permissions:
            permission = Permission.query.filter_by(name=permission_name).first()
            if permission:
                direct_assignments = UserPermission.query.filter_by(
                    permission_id=permission.id,
                    is_active=True
                ).all()
                
                for assignment in direct_assignments:
                    if assignment.user and assignment.user.is_active and assignment.user not in active_lsts:
                        active_lsts.append(assignment.user)
        
        # FALLBACK: Also check for users with traditional "Line Service Technician" role
        # This ensures compatibility with role-based seeded data
        from src.models.role import Role
        lst_role = Role.query.filter_by(name='Line Service Technician').first()
        if lst_role:
            role_based_lsts = User.query.join(User.roles).filter(
                Role.name == 'Line Service Technician',
                User.is_active == True
            ).all()
            
            for lst_user in role_based_lsts:
                if lst_user not in active_lsts:
                    active_lsts.append(lst_user)
        
        return active_lsts

    @staticmethod
    def validate_lst_assignment(assigned_lst_user_id: int) -> Tuple[Optional[User], Optional[str]]:
        """Validate LST assignment based on permissions."""
        lst_user = User.query.filter_by(id=assigned_lst_user_id, is_active=True).first()
        if not lst_user:
            return None, f"LST user with ID {assigned_lst_user_id} not found or inactive."
        
        # Check if user has LST permissions
        active_lsts = FuelOrderService.get_active_lsts()
        if lst_user not in active_lsts:
            return None, f"User {lst_user.username} does not have LST permissions."
        
        return lst_user, None

    @staticmethod
    def can_user_modify_order(user: User, order: FuelOrder) -> bool:
        """Check if user can modify a specific order based on permissions."""
        if not user or not order:
            return False
        
        # Check for admin permissions (System Administrator role)
        admin_permissions = ['MANAGE_SETTINGS', 'MANAGE_ROLES', 'ACCESS_ADMIN_DASHBOARD']
        for perm_name in admin_permissions:
            if user.has_permission(perm_name):
                return True
        
        # Check for CSR permissions - CSRs can view/edit fuel orders
        csr_permissions = ['VIEW_ALL_ORDERS', 'EDIT_FUEL_ORDER', 'ACCESS_CSR_DASHBOARD']
        for perm_name in csr_permissions:
            if user.has_permission(perm_name):
                return True
        
        # Check if LST can modify their own assigned orders
        if (order.assigned_lst_user_id == user.id and 
            user.has_permission('PERFORM_FUELING_TASK')):
            return True
        
        return False

    @staticmethod
    def can_user_complete_order(user: User, order: FuelOrder) -> bool:
        """Check if user can complete a specific order based on permissions."""
        if not user or not order:
            return False
        
        # Check for admin permissions
        if user.has_permission('MANAGE_SETTINGS') or user.has_permission('ACCESS_ADMIN_DASHBOARD'):
            return True
        
        # Check if LST can complete their own assigned orders
        if (order.assigned_lst_user_id == user.id and 
            user.has_permission('COMPLETE_OWN_ORDER')):
            return True
        
        return False

================
File: backend/src/services/fuel_truck_service.py
================
from typing import Tuple, List, Optional, Dict, Any

from ..models.fuel_truck import FuelTruck
from ..app import db

class FuelTruckService:
    """Service class for managing fuel truck operations."""

    @classmethod
    def get_trucks(cls, filters: Optional[Dict[str, Any]] = None) -> Tuple[Optional[List[FuelTruck]], str, int]:
        # ... (existing code unchanged)
        query = FuelTruck.query
        if filters:
            is_active_filter = filters.get('is_active')
            if is_active_filter is not None:
                is_active_bool = is_active_filter.lower() == 'true'
                query = query.filter(FuelTruck.is_active == is_active_bool)
        try:
            trucks = query.order_by(FuelTruck.truck_number.asc()).all()
            # --- Add Debugging ---
            from flask import current_app
            current_app.logger.info(f"DEBUG: FuelTruckService.get_trucks found {len(trucks)} trucks: {trucks}")
            # --- End Debugging ---
            return trucks, "Fuel trucks retrieved successfully", 200
        except Exception as e:
            return None, f"Database error while retrieving fuel trucks: {str(e)}", 500

    @classmethod
    def create_truck(cls, truck_data: Dict[str, Any]) -> Tuple[Optional[FuelTruck], str, int]:
        # ... (existing code unchanged)
        existing_truck = FuelTruck.query.filter_by(truck_number=truck_data['truck_number']).first()
        if existing_truck:
            return None, f"Truck number {truck_data['truck_number']} already exists", 400
        try:
            new_truck = FuelTruck(
                truck_number=truck_data['truck_number'],
                fuel_type=truck_data['fuel_type'],
                capacity=truck_data['capacity'],
                current_meter_reading=truck_data.get('current_meter_reading', 0),
                is_active=True
            )
            db.session.add(new_truck)
            db.session.commit()
            return new_truck, "Fuel truck created successfully", 201
        except Exception as e:
            db.session.rollback()
            return None, f"Database error while creating fuel truck: {str(e)}", 500

    @classmethod
    def get_truck_by_id(cls, truck_id: int) -> Tuple[Optional[FuelTruck], str, int]:
        """Get a fuel truck by its ID."""
        try:
            truck = FuelTruck.query.get(truck_id)
            if not truck:
                return None, f"Fuel truck with ID {truck_id} not found", 404
            return truck, "Fuel truck retrieved successfully", 200
        except Exception as e:
            return None, f"Database error while retrieving fuel truck: {str(e)}", 500

    @classmethod
    def update_truck(cls, truck_id: int, update_data: Dict[str, Any]) -> Tuple[Optional[FuelTruck], str, int]:
        """Update a fuel truck."""
        try:
            truck = FuelTruck.query.get(truck_id)
            if not truck:
                return None, f"Fuel truck with ID {truck_id} not found", 404
            # Update fields if provided
            if 'truck_number' in update_data:
                # Check for uniqueness
                existing = FuelTruck.query.filter_by(truck_number=update_data['truck_number']).first()
                if existing and existing.id != truck_id:
                    return None, f"Truck number {update_data['truck_number']} already exists", 400
                truck.truck_number = update_data['truck_number']
            if 'fuel_type' in update_data:
                truck.fuel_type = update_data['fuel_type']
            if 'capacity' in update_data:
                truck.capacity = update_data['capacity']
            if 'current_meter_reading' in update_data:
                truck.current_meter_reading = update_data['current_meter_reading']
            if 'is_active' in update_data:
                truck.is_active = bool(update_data['is_active'])
            db.session.commit()
            return truck, "Fuel truck updated successfully", 200
        except Exception as e:
            db.session.rollback()
            return None, f"Database error while updating fuel truck: {str(e)}", 500

    @classmethod
    def delete_truck(cls, truck_id: int) -> Tuple[bool, str, int]:
        """Delete a fuel truck by ID."""
        try:
            truck = FuelTruck.query.get(truck_id)
            if not truck:
                return False, f"Fuel truck with ID {truck_id} not found", 404
            db.session.delete(truck)
            db.session.commit()
            return True, "Fuel truck deleted successfully", 200
        except Exception as e:
            db.session.rollback()
            return False, f"Database error while deleting fuel truck: {str(e)}", 500

================
File: backend/src/services/permission_service.py
================
from typing import Tuple, List, Optional, Dict, Set
from datetime import datetime
from flask import current_app
from sqlalchemy.orm import selectinload
from sqlalchemy import and_, or_

from ..extensions import db
from ..models.user import User
from ..models.permission import Permission
from ..models.permission_group import PermissionGroup
from ..models.user_permission import UserPermission
from ..models.role import Role
from ..models.role_permission import role_permissions

class PermissionService:
    """
    Enhanced permission service for granular permission management.
    Handles direct user permissions, permission groups, and resource-specific permissions.
    """
    
    # Cache for user permissions to improve performance
    _permission_cache = {}
    _cache_timeout = 300  # 5 minutes
    
    @classmethod
    def get_user_effective_permissions(cls, user_id: int, include_resource_context: bool = False) -> Dict[str, any]:
        """
        Get all effective permissions for a user from all sources:
        1. Direct user permissions
        2. Permission groups
        3. Legacy role permissions (during transition)
        
        Args:
            user_id (int): User ID
            include_resource_context (bool): Whether to include resource-specific permissions
            
        Returns:
            Dict containing permission names and their contexts
        """
        cache_key = f"user_permissions_{user_id}_{include_resource_context}"
        
        # Check cache first
        if cache_key in cls._permission_cache:
            cached_data, timestamp = cls._permission_cache[cache_key]
            if (datetime.utcnow() - timestamp).seconds < cls._cache_timeout:
                return cached_data
        
        user = User.query.options(
            selectinload(User.direct_permissions),
            selectinload(User.permission_groups),
            selectinload(User.roles)
        ).get(user_id)
        
        if not user:
            return {}
        
        effective_permissions = {}
        
        # 1. Get direct user permissions
        direct_perms = cls._get_direct_user_permissions(user, include_resource_context)
        effective_permissions.update(direct_perms)
        
        # 2. Get permissions from permission groups
        group_perms = cls._get_group_permissions(user, include_resource_context)
        effective_permissions.update(group_perms)
        
        # 3. Get legacy role permissions (for backward compatibility)
        role_perms = cls._get_legacy_role_permissions(user)
        effective_permissions.update(role_perms)
        
        # Cache the result
        cls._permission_cache[cache_key] = (effective_permissions, datetime.utcnow())
        
        return effective_permissions
    
    @classmethod
    def _get_direct_user_permissions(cls, user: User, include_resource_context: bool) -> Dict[str, any]:
        """Get permissions directly assigned to the user."""
        permissions = {}
        
        for user_perm in user.direct_permissions:
            if not user_perm.is_valid():
                continue
                
            perm = user_perm.permission
            if not perm or not perm.is_active:
                continue
            
            perm_key = perm.name
            
            if include_resource_context and (user_perm.resource_type or user_perm.resource_id):
                # Resource-specific permission
                resource_key = f"{perm.name}:{user_perm.resource_type or 'global'}:{user_perm.resource_id or 'any'}"
                permissions[resource_key] = {
                    'permission': perm.name,
                    'resource_type': user_perm.resource_type,
                    'resource_id': user_perm.resource_id,
                    'scope': perm.scope,
                    'source': 'direct',
                    'granted_at': user_perm.granted_at.isoformat() if user_perm.granted_at else None
                }
            else:
                # Global permission
                permissions[perm_key] = {
                    'permission': perm.name,
                    'resource_type': perm.resource_type,
                    'scope': perm.scope,
                    'source': 'direct',
                    'granted_at': user_perm.granted_at.isoformat() if user_perm.granted_at else None
                }
        
        return permissions
    
    @classmethod
    def _get_group_permissions(cls, user: User, include_resource_context: bool) -> Dict[str, any]:
        """Get permissions from user's permission groups."""
        permissions = {}
        
        for group in user.permission_groups:
            if not group.is_active:
                continue
                
            # Get all permissions including inherited ones
            group_permissions = group.get_all_permissions(include_inherited=True)
            
            for perm in group_permissions:
                if not perm.is_active:
                    continue
                
                perm_key = perm.name
                
                # For group permissions, we don't have resource-specific context
                # unless the permission itself requires it
                if perm_key not in permissions:
                    permissions[perm_key] = {
                        'permission': perm.name,
                        'resource_type': perm.resource_type,
                        'scope': perm.scope,
                        'source': f'group:{group.name}',
                        'group_id': group.id
                    }
        
        return permissions
    
    @classmethod
    def _get_legacy_role_permissions(cls, user: User) -> Dict[str, any]:
        """Get permissions from legacy roles (for backward compatibility)."""
        permissions = {}
        
        for role in user.roles:
            for perm in role.permissions:
                if not perm or not perm.is_active:
                    continue
                
                perm_key = perm.name
                
                if perm_key not in permissions:
                    permissions[perm_key] = {
                        'permission': perm.name,
                        'resource_type': perm.resource_type,
                        'scope': perm.scope,
                        'source': f'role:{role.name}',
                        'role_id': role.id
                    }
        
        return permissions
    
    @classmethod
    def user_has_permission(cls, user_id: int, permission_name: str, 
                          resource_type: str = None, resource_id: str = None) -> bool:
        """
        Check if a user has a specific permission, optionally for a specific resource.
        
        Args:
            user_id (int): User ID
            permission_name (str): Permission name to check
            resource_type (str): Optional resource type (e.g., 'fuel_order')
            resource_id (str): Optional specific resource ID or 'own'
            
        Returns:
            bool: True if user has the permission
        """
        effective_permissions = cls.get_user_effective_permissions(user_id, include_resource_context=True)
        
        # Check for exact permission match
        if permission_name in effective_permissions:
            perm_data = effective_permissions[permission_name]
            
            # If no resource context required, permission granted
            if not resource_type and not resource_id:
                return True
            
            # Check resource-specific permissions
            if resource_type:
                perm_resource_type = perm_data.get('resource_type')
                perm_scope = perm_data.get('scope')
                
                # Global permissions (no resource_type) grant access to all resources
                if not perm_resource_type or perm_resource_type == 'global':
                    return True
                
                # Resource type must match
                if perm_resource_type != resource_type:
                    return False
                
                # Check scope
                if perm_scope == 'any':
                    return True
                elif perm_scope == 'own' and resource_id:
                    # Need to check if the resource belongs to the user
                    return cls._check_resource_ownership(user_id, resource_type, resource_id)
        
        # Check for resource-specific permission entries
        if resource_type and resource_id:
            resource_key = f"{permission_name}:{resource_type}:{resource_id}"
            if resource_key in effective_permissions:
                return True
            
            # Check for wildcard resource permissions
            wildcard_key = f"{permission_name}:{resource_type}:any"
            if wildcard_key in effective_permissions:
                return True
        
        return False
    
    @classmethod
    def _check_resource_ownership(cls, user_id: int, resource_type: str, resource_id: str) -> bool:
        """
        Check if a user owns a specific resource.
        This is a simplified implementation - in practice, you'd check the actual resource tables.
        """
        if resource_id == 'own':
            return True
        
        # Map resource types to their ownership checks
        ownership_checks = {
            'fuel_order': cls._check_fuel_order_ownership,
            'user': cls._check_user_ownership,
            'aircraft': cls._check_aircraft_ownership,
        }
        
        check_func = ownership_checks.get(resource_type)
        if check_func:
            return check_func(user_id, resource_id)
        
        return False
    
    @classmethod
    def _check_fuel_order_ownership(cls, user_id: int, resource_id: str) -> bool:
        """Check if user owns/created a fuel order."""
        from ..models.fuel_order import FuelOrder
        
        try:
            resource_id_int = int(resource_id)
            fuel_order = FuelOrder.query.filter_by(id=resource_id_int).first()
            return fuel_order and fuel_order.created_by_user_id == user_id
        except (ValueError, TypeError):
            return False
    
    @classmethod
    def _check_user_ownership(cls, user_id: int, resource_id: str) -> bool:
        """Check if user is accessing their own profile."""
        try:
            resource_id_int = int(resource_id)
            return user_id == resource_id_int
        except (ValueError, TypeError):
            return False
    
    @classmethod
    def _check_aircraft_ownership(cls, user_id: int, resource_id: str) -> bool:
        """Check if user owns an aircraft (simplified - would need actual ownership model)."""
        # This would need to be implemented based on your aircraft ownership model
        return False
    
    @classmethod
    def grant_direct_permission(cls, user_id: int, permission_id: int, 
                              granted_by_user_id: int, resource_type: str = None, 
                              resource_id: str = None, reason: str = None,
                              expires_at: datetime = None) -> Tuple[bool, str]:
        """
        Grant a direct permission to a user.
        
        Returns:
            Tuple[bool, str]: (success, message)
        """
        try:
            # Check if permission already exists
            existing = UserPermission.query.filter_by(
                user_id=user_id,
                permission_id=permission_id,
                resource_type=resource_type,
                resource_id=resource_id,
                is_active=True
            ).first()
            
            if existing:
                return False, "Permission already granted"
            
            # Create new permission assignment
            user_permission = UserPermission(
                user_id=user_id,
                permission_id=permission_id,
                granted_by_user_id=granted_by_user_id,
                resource_type=resource_type,
                resource_id=resource_id,
                reason=reason,
                expires_at=expires_at
            )
            
            db.session.add(user_permission)
            db.session.commit()
            
            # Clear cache for this user
            cls._clear_user_cache(user_id)
            
            return True, "Permission granted successfully"
            
        except Exception as e:
            db.session.rollback()
            current_app.logger.error(f"Error granting permission: {str(e)}")
            return False, f"Error granting permission: {str(e)}"
    
    @classmethod
    def revoke_direct_permission(cls, user_id: int, permission_id: int,
                               revoked_by_user_id: int, resource_type: str = None,
                               resource_id: str = None, reason: str = None) -> Tuple[bool, str]:
        """
        Revoke a direct permission from a user.
        
        Returns:
            Tuple[bool, str]: (success, message)
        """
        try:
            user_permission = UserPermission.query.filter_by(
                user_id=user_id,
                permission_id=permission_id,
                resource_type=resource_type,
                resource_id=resource_id,
                is_active=True
            ).first()
            
            if not user_permission:
                return False, "Permission not found or already revoked"
            
            user_permission.revoke(revoked_by_user_id, reason)
            db.session.commit()
            
            # Clear cache for this user
            cls._clear_user_cache(user_id)
            
            return True, "Permission revoked successfully"
            
        except Exception as e:
            db.session.rollback()
            current_app.logger.error(f"Error revoking permission: {str(e)}")
            return False, f"Error revoking permission: {str(e)}"
    
    @classmethod
    def _clear_user_cache(cls, user_id: int):
        """Clear cached permissions for a specific user."""
        keys_to_remove = [key for key in cls._permission_cache.keys() 
                         if key.startswith(f"user_permissions_{user_id}_")]
        for key in keys_to_remove:
            del cls._permission_cache[key]
    
    @classmethod
    def clear_all_cache(cls):
        """Clear all cached permissions."""
        cls._permission_cache.clear()
    
    @classmethod
    def get_permission_summary(cls, user_id: int) -> Dict[str, any]:
        """
        Get a summary of user's permissions organized by source.
        
        Returns:
            Dict with permission breakdown by source
        """
        effective_permissions = cls.get_user_effective_permissions(user_id, include_resource_context=True)
        
        summary = {
            'total_permissions': len(effective_permissions),
            'by_source': {
                'direct': [],
                'groups': [],
                'roles': []
            },
            'by_category': {},
            'resource_specific': []
        }
        
        for perm_key, perm_data in effective_permissions.items():
            source = perm_data.get('source', 'unknown')
            
            if source == 'direct':
                summary['by_source']['direct'].append(perm_data)
            elif source.startswith('group:'):
                summary['by_source']['groups'].append(perm_data)
            elif source.startswith('role:'):
                summary['by_source']['roles'].append(perm_data)
            
            # Check if it's resource-specific
            if perm_data.get('resource_type') or perm_data.get('resource_id'):
                summary['resource_specific'].append(perm_data)
        
        return summary

================
File: backend/src/services/user_service.py
================
from typing import Tuple, List, Optional, Dict, Any, Set
from flask import g, has_request_context # Import g and has_request_context
from datetime import datetime
from sqlalchemy.orm import selectinload
from sqlalchemy import and_, or_, func

from ..models.user import User
from ..models.role import Role
from ..models.permission import Permission
from ..models.permission_group import PermissionGroup
from ..models.user_permission import UserPermission
from ..extensions import db
from ..services.permission_service import PermissionService


class UserService:
    """Service class for managing user-related operations."""

    @classmethod
    def get_users(cls, filters: Optional[Dict[str, Any]] = None) -> Tuple[Optional[List[User]], str, int]:
        """Retrieve users based on specified filters.

        Args:
            filters (Optional[Dict[str, Any]]): Optional dictionary of filter parameters.
                Supported filters:
                - role_ids (List[int]): Filter by role IDs
                - is_active (bool): Filter by user active status

        Returns:
            Tuple[Optional[List[User]], str, int]: A tuple containing:
                - List of User objects if successful, None if error
                - Message describing the result
                - HTTP status code
        """
        try:
            # Initialize base query with eager loading of roles
            query = User.query

            if filters:
                # Filter by role IDs
                role_ids = filters.get('role_ids')
                if role_ids:
                    if not isinstance(role_ids, list):
                        return None, "Invalid role_ids format, must be a list", 400
                    # Join with roles and filter where role.id is in the provided list
                    query = query.join(User.roles).filter(Role.id.in_(role_ids))

                # Filter by active status
                is_active_filter = filters.get('is_active')
                if is_active_filter is not None:
                    is_active_bool = str(is_active_filter).lower() == 'true'
                    query = query.filter(User.is_active == is_active_bool)

            # Default sort by username ascending
            users = query.order_by(User.username.asc()).all()
            # --- Add Debugging ---
            from flask import current_app
            current_app.logger.info(f"DEBUG: UserService.get_users found {len(users)} users: {users}")
            # --- End Debugging ---
            return users, "Users retrieved successfully", 200

        except Exception as e:
            # Log the error here if you have a logger configured
            return None, f"Database error while retrieving users: {str(e)}", 500

    @classmethod
    def create_user(cls, data: Dict[str, Any]) -> Tuple[Optional[User], str, int]:
        """Create a new user.
        
        Args:
            data (Dict[str, Any]): Dictionary containing user data
                Required keys:
                - email (str): User's email address
                - password (str): User's password
                - role_ids (List[int]): List of role IDs to assign
                Optional keys:
                - name (str): User's name
                - is_active (bool): Whether user should be active (defaults to True)
                
        Returns:
            Tuple[Optional[User], str, int]: A tuple containing:
                - Created User object if successful, None if error
                - Message describing the result
                - HTTP status code
        """
        try:
            # Validate required fields
            if not all(key in data for key in ['email', 'password', 'role_ids']):
                return None, "Missing required fields: email, password, and role_ids are required", 400

            # Validate role_ids format
            role_ids = data['role_ids']
            if not isinstance(role_ids, list):
                return None, "Invalid role_ids format, must be a list", 400

            if not role_ids:  # Empty list check
                return None, "At least one role must be assigned", 400

            # Check if email already exists
            if User.query.filter_by(email=data['email']).first():
                return None, "Email already registered", 409

            # Fetch and validate roles
            roles = Role.query.filter(Role.id.in_(role_ids)).all()
            if len(roles) != len(set(role_ids)):
                found_ids = {role.id for role in roles}
                invalid_ids = set(role_ids) - found_ids
                return None, f"Invalid role IDs provided: {list(invalid_ids)}", 400

            # Create new user
            user = User(
                email=data['email'],
                username=data.get('name', data['email'].split('@')[0]),  # Default to email username
                is_active=data.get('is_active', True)  # Default to active
            )
            user.set_password(data['password'])
            user.roles = roles  # Assign roles

            db.session.add(user)
            db.session.commit()

            return user, "User created successfully", 201

        except Exception as e:
            db.session.rollback()
            # Add explicit logging
            from flask import current_app
            current_app.logger.error(f"Caught exception in create_user: {e}", exc_info=True) 
            return None, f"Error creating user: {str(e)}", 500

    @classmethod
    def update_user(cls, user_id: int, data: Dict[str, Any]) -> Tuple[Optional[User], str, int]:
        """Update an existing user.
        
        Args:
            user_id (int): ID of user to update
            data (Dict[str, Any]): Dictionary containing update data
                Supported keys:
                - name (str): User's name
                - email (str): User's email address
                - role_ids (List[int]): List of role IDs to assign
                - is_active (bool): User's active status
                - password (str): User's new password (optional)
                
        Returns:
            Tuple[Optional[User], str, int]: A tuple containing:
                - Updated User object if successful, None if error
                - Message describing the result
                - HTTP status code
        """
        try:
            user_to_update = User.query.get(user_id)
            if not user_to_update:
                return None, f"User with ID {user_id} not found", 404

            current_user = None
            if has_request_context() and hasattr(g, 'current_user'):
                current_user = g.current_user

            # Self-update prevention checks
            if current_user and current_user.id == user_to_update.id:
                if 'is_active' in data and not data['is_active']:
                    return None, "Cannot deactivate your own account.", 403
                # Prevent removing own MANAGE_USERS permission if it's the only way they have it
                if 'role_ids' in data:
                    new_role_ids = set(data['role_ids'])
                    # Check if user currently has MANAGE_USERS
                    has_manage_users_now = user_to_update.has_permission('MANAGE_USERS')
                    # Simulate permissions with new roles
                    if has_manage_users_now:
                        roles_with_manage_users = Role.query.join(Role.permissions).filter(Permission.name == 'MANAGE_USERS').all()
                        manage_users_role_ids = {role.id for role in roles_with_manage_users}
                        # If none of the new roles grant MANAGE_USERS, prevent update
                        if not new_role_ids.intersection(manage_users_role_ids):
                            return None, "Cannot remove your own MANAGE_USERS permission.", 403

            # Update fields if provided
            if 'username' in data and data['username'] is not None:
                user_to_update.username = data['username']
            if 'name' in data and data['name'] is not None:
                user_to_update.name = data['name']
            
            # Handle email update with uniqueness check
            if 'email' in data and data['email'] != user_to_update.email:
                existing_user = User.query.filter(User.email == data['email'], User.id != user_to_update.id).first()
                if existing_user:
                    return None, f"Email '{data['email']}' is already registered to another user.", 409
                user_to_update.email = data['email']

            if 'role_ids' in data:
                role_ids = data['role_ids']
                if not isinstance(role_ids, list):
                    return None, "Invalid role_ids format, must be a list", 400

                if role_ids:  # If list is not empty
                    # Fetch and validate roles
                    roles = Role.query.filter(Role.id.in_(role_ids)).all()
                    if len(roles) != len(set(role_ids)):
                        found_ids = {role.id for role in roles}
                        invalid_ids = set(role_ids) - found_ids
                        return None, f"Invalid role IDs provided: {list(invalid_ids)}", 400
                    user_to_update.roles = roles
                else:
                    user_to_update.roles = []  # Clear all roles if empty list provided

            if 'is_active' in data:
                # Ensure this check doesn't conflict with the self-deactivation check above
                if not (current_user and current_user.id == user_to_update.id and not data['is_active']):
                     user_to_update.is_active = bool(data['is_active'])

            if 'password' in data:
                user_to_update.set_password(data['password'])

            db.session.commit()
            return user_to_update, "User updated successfully", 200

        except Exception as e:
            db.session.rollback()
            # Add explicit logging if available
            # from flask import current_app
            # current_app.logger.error(f"Error updating user {user_id}: {e}", exc_info=True)
            return None, f"Error updating user: {str(e)}", 500

    @classmethod
    def delete_user(cls, user_id: int) -> Tuple[bool, str, int]:
        """Soft delete a user by setting is_active to False.
        
        Args:
            user_id (int): ID of user to delete
            
        Returns:
            Tuple[bool, str, int]: A tuple containing:
                - True if successful, False if error
                - Message describing the result
                - HTTP status code
        """
        try:
            user_to_delete = User.query.get(user_id)
            if not user_to_delete:
                return False, f"User with ID {user_id} not found", 404

            current_user = None
            if has_request_context() and hasattr(g, 'current_user'):
                current_user = g.current_user

            if current_user and current_user.id == user_to_delete.id:
                return False, "Cannot deactivate your own account using the delete operation. Use the update operation if you intend to change your active status.", 403

            user_to_delete.is_active = False
            db.session.commit()
            return True, "User deactivated successfully", 200

        except Exception as e:
            db.session.rollback()
            # Add explicit logging if available
            # from flask import current_app
            # current_app.logger.error(f"Error deactivating user {user_id}: {e}", exc_info=True)
            return False, f"Error deactivating user: {str(e)}", 500

    @classmethod
    def get_user_by_id(cls, user_id: int) -> Tuple[Optional[User], str, int]:
        """Get a user by ID.
        
        Args:
            user_id (int): ID of user to retrieve
            
        Returns:
            Tuple[Optional[User], str, int]: A tuple containing:
                - User object if found, None if not found
                - Message describing the result
                - HTTP status code
        """
        try:
            user = User.query.get(user_id)
            if not user:
                return None, f"User with ID {user_id} not found", 404
            return user, "User retrieved successfully", 200

        except Exception as e:
            return None, f"Error retrieving user: {str(e)}", 500

    @classmethod
    def create_user_with_permissions(cls, user_data: Dict, permission_groups: List[int] = None,
                                   direct_permissions: List[Dict] = None, 
                                   created_by_user_id: int = None) -> Tuple[Optional[User], str, int]:
        """
        Create a new user with permission groups and/or direct permissions.
        
        Args:
            user_data (Dict): Basic user information
            permission_groups (List[int]): List of permission group IDs to assign
            direct_permissions (List[Dict]): List of direct permission assignments
            created_by_user_id (int): ID of user creating this user
            
        Returns:
            Tuple[User, str, int]: (user_object, message, status_code)
        """
        try:
            # Validate required fields
            required_fields = ['username', 'email', 'password']
            for field in required_fields:
                if field not in user_data:
                    return None, f"Missing required field: {field}", 400
            
            # Check if username or email already exists
            existing_user = User.query.filter(
                or_(User.username == user_data['username'], 
                    User.email == user_data['email'])
            ).first()
            
            if existing_user:
                return None, "Username or email already exists", 409
            
            # Create the user
            user = User(
                username=user_data['username'],
                email=user_data['email'],
                name=user_data.get('name'),
                is_active=user_data.get('is_active', True)
            )
            user.set_password(user_data['password'])
            
            # Add LST-specific fields if provided
            lst_fields = ['employee_id', 'status', 'shift', 'certifications', 
                         'performance_rating', 'hire_date']
            for field in lst_fields:
                if field in user_data:
                    setattr(user, field, user_data[field])
            
            db.session.add(user)
            db.session.flush()  # Get user ID before committing
            
            # Assign permission groups if provided
            if permission_groups:
                groups = PermissionGroup.query.filter(
                    PermissionGroup.id.in_(permission_groups),
                    PermissionGroup.is_active == True
                ).all()
                
                if len(groups) != len(permission_groups):
                    found_ids = {g.id for g in groups}
                    missing_ids = set(permission_groups) - found_ids
                    return None, f"Some permission groups not found: {list(missing_ids)}", 400
                
                user.permission_groups = groups
            
            # Assign direct permissions if provided
            if direct_permissions:
                for perm_data in direct_permissions:
                    if 'permission_id' not in perm_data:
                        continue
                    
                    # Validate permission exists
                    permission = Permission.query.get(perm_data['permission_id'])
                    if not permission:
                        return None, f"Permission ID {perm_data['permission_id']} not found", 400
                    
                    # Create user permission assignment
                    user_perm = UserPermission(
                        user_id=user.id,
                        permission_id=perm_data['permission_id'],
                        granted_by_user_id=created_by_user_id,
                        resource_type=perm_data.get('resource_type'),
                        resource_id=perm_data.get('resource_id'),
                        reason=perm_data.get('reason', 'Initial user setup'),
                        expires_at=datetime.fromisoformat(perm_data['expires_at']) if perm_data.get('expires_at') else None
                    )
                    db.session.add(user_perm)
            
            db.session.commit()
            
            return user, "User created successfully", 201
            
        except Exception as e:
            db.session.rollback()
            from flask import current_app
            current_app.logger.error(f"Error creating user: {str(e)}")
            return None, f"Failed to create user: {str(e)}", 500

    @classmethod
    def update_user_permissions(cls, user_id: int, permission_groups: List[int] = None,
                              add_direct_permissions: List[Dict] = None,
                              remove_direct_permissions: List[Dict] = None,
                              updated_by_user_id: int = None) -> Tuple[bool, str, int]:
        """
        Update user's permission groups and direct permissions.
        
        Args:
            user_id (int): User ID to update
            permission_groups (List[int]): New permission groups (replaces existing)
            add_direct_permissions (List[Dict]): Direct permissions to add
            remove_direct_permissions (List[Dict]): Direct permissions to remove
            updated_by_user_id (int): ID of user making the changes
            
        Returns:
            Tuple[bool, str, int]: (success, message, status_code)
        """
        try:
            user = User.query.get(user_id)
            if not user:
                return False, "User not found", 404
            
            # Update permission groups if provided
            if permission_groups is not None:
                if permission_groups:
                    groups = PermissionGroup.query.filter(
                        PermissionGroup.id.in_(permission_groups),
                        PermissionGroup.is_active == True
                    ).all()
                    
                    if len(groups) != len(permission_groups):
                        found_ids = {g.id for g in groups}
                        missing_ids = set(permission_groups) - found_ids
                        return False, f"Some permission groups not found: {list(missing_ids)}", 400
                    
                    user.permission_groups = groups
                else:
                    user.permission_groups = []
            
            # Add direct permissions if provided
            if add_direct_permissions:
                for perm_data in add_direct_permissions:
                    success, message = PermissionService.grant_direct_permission(
                        user_id=user_id,
                        permission_id=perm_data['permission_id'],
                        granted_by_user_id=updated_by_user_id,
                        resource_type=perm_data.get('resource_type'),
                        resource_id=perm_data.get('resource_id'),
                        reason=perm_data.get('reason', 'Permission update'),
                        expires_at=datetime.fromisoformat(perm_data['expires_at']) if perm_data.get('expires_at') else None
                    )
                    
                    if not success:
                        return False, f"Failed to add permission: {message}", 400
            
            # Remove direct permissions if provided
            if remove_direct_permissions:
                for perm_data in remove_direct_permissions:
                    success, message = PermissionService.revoke_direct_permission(
                        user_id=user_id,
                        permission_id=perm_data['permission_id'],
                        revoked_by_user_id=updated_by_user_id,
                        resource_type=perm_data.get('resource_type'),
                        resource_id=perm_data.get('resource_id'),
                        reason=perm_data.get('reason', 'Permission update')
                    )
                    
                    if not success:
                        return False, f"Failed to remove permission: {message}", 400
            
            db.session.commit()
            
            # Clear permission cache for this user
            PermissionService._clear_user_cache(user_id)
            
            return True, "User permissions updated successfully", 200
            
        except Exception as e:
            db.session.rollback()
            from flask import current_app
            current_app.logger.error(f"Error updating user permissions: {str(e)}")
            return False, f"Failed to update user permissions: {str(e)}", 500

    @classmethod
    def get_users_by_permission(cls, permission_name: str, resource_type: str = None,
                              include_inactive: bool = False) -> List[User]:
        """
        Get all users who have a specific permission.
        
        Args:
            permission_name (str): Permission name to search for
            resource_type (str): Optional resource type filter
            include_inactive (bool): Whether to include inactive users
            
        Returns:
            List[User]: Users with the specified permission
        """
        try:
            users_with_permission = []
            
            # Get all users
            query = User.query
            if not include_inactive:
                query = query.filter(User.is_active == True)
            
            users = query.all()
            
            # Check each user for the permission
            for user in users:
                if user.has_permission(permission_name, resource_type=resource_type):
                    users_with_permission.append(user)
            
            return users_with_permission
            
        except Exception as e:
            from flask import current_app
            current_app.logger.error(f"Error getting users by permission: {str(e)}")
            return []

    @classmethod
    def get_users_in_permission_group(cls, group_id: int, include_inactive: bool = False) -> List[User]:
        """
        Get all users assigned to a specific permission group.
        
        Args:
            group_id (int): Permission group ID
            include_inactive (bool): Whether to include inactive users
            
        Returns:
            List[User]: Users in the permission group
        """
        try:
            group = PermissionGroup.query.get(group_id)
            if not group:
                return []
            
            query = group.users
            if not include_inactive:
                query = query.filter(User.is_active == True)
            
            return query.all()
            
        except Exception as e:
            from flask import current_app
            current_app.logger.error(f"Error getting users in permission group: {str(e)}")
            return []

    @classmethod
    def bulk_assign_permission_group(cls, user_ids: List[int], group_id: int,
                                   assigned_by_user_id: int = None) -> Tuple[int, List[str], int]:
        """
        Assign a permission group to multiple users.
        
        Args:
            user_ids (List[int]): List of user IDs
            group_id (int): Permission group ID to assign
            assigned_by_user_id (int): ID of user making the assignment
            
        Returns:
            Tuple[int, List[str], int]: (success_count, error_messages, status_code)
        """
        try:
            # Validate permission group exists
            group = PermissionGroup.query.get(group_id)
            if not group or not group.is_active:
                return 0, ["Permission group not found or inactive"], 404
            
            # Get valid users
            users = User.query.filter(
                User.id.in_(user_ids),
                User.is_active == True
            ).all()
            
            if not users:
                return 0, ["No valid users found"], 404
            
            success_count = 0
            error_messages = []
            
            for user in users:
                try:
                    # Check if user already has this group
                    if group not in user.permission_groups:
                        user.permission_groups.append(group)
                        success_count += 1
                        
                        # Clear permission cache for this user
                        PermissionService._clear_user_cache(user.id)
                    else:
                        error_messages.append(f"User {user.username} already has this permission group")
                        
                except Exception as e:
                    error_messages.append(f"Failed to assign group to user {user.username}: {str(e)}")
            
            if success_count > 0:
                db.session.commit()
            
            status_code = 200 if success_count > 0 else 400
            return success_count, error_messages, status_code
            
        except Exception as e:
            db.session.rollback()
            from flask import current_app
            current_app.logger.error(f"Error in bulk assign permission group: {str(e)}")
            return 0, [f"Bulk assignment failed: {str(e)}"], 500

    @classmethod
    def get_permission_matrix(cls, user_ids: List[int] = None) -> Dict[str, Dict[str, bool]]:
        """
        Generate a permission matrix showing which users have which permissions.
        
        Args:
            user_ids (List[int]): Optional list of specific user IDs
            
        Returns:
            Dict[str, Dict[str, bool]]: Matrix with user_id -> permission_name -> has_permission
        """
        try:
            # Get users
            query = User.query.filter(User.is_active == True)
            if user_ids:
                query = query.filter(User.id.in_(user_ids))
            
            users = query.all()
            
            # Get all permissions
            permissions = Permission.query.filter(Permission.is_active == True).all()
            
            # Build matrix
            matrix = {}
            for user in users:
                matrix[str(user.id)] = {
                    'username': user.username,
                    'permissions': {}
                }
                
                for permission in permissions:
                    has_perm = user.has_permission(permission.name)
                    matrix[str(user.id)]['permissions'][permission.name] = has_perm
            
            return matrix
            
        except Exception as e:
            from flask import current_app
            current_app.logger.error(f"Error generating permission matrix: {str(e)}")
            return {}

    @classmethod
    def suggest_permission_groups_for_user(cls, user_id: int) -> List[Dict[str, any]]:
        """
        Suggest permission groups for a user based on their current permissions.
        
        Args:
            user_id (int): User ID
            
        Returns:
            List[Dict]: Suggested permission groups with match scores
        """
        try:
            user = User.query.get(user_id)
            if not user:
                return []
            
            # Get user's current effective permissions
            effective_permissions = PermissionService.get_user_effective_permissions(user_id)
            user_permission_names = set(effective_permissions.keys())
            
            # Get all available permission groups
            groups = PermissionGroup.query.filter(PermissionGroup.is_active == True).all()
            
            suggestions = []
            for group in groups:
                # Skip if user already has this group
                if group in user.permission_groups:
                    continue
                
                # Get group permissions
                group_permissions = group.get_all_permissions(include_inherited=True)
                group_permission_names = {p.name for p in group_permissions}
                
                # Calculate match score
                if group_permission_names:
                    overlap = user_permission_names.intersection(group_permission_names)
                    match_score = len(overlap) / len(group_permission_names)
                    
                    # Only suggest if there's some overlap but not complete overlap
                    if 0.1 <= match_score <= 0.8:
                        suggestions.append({
                            'group': group.to_dict(),
                            'match_score': match_score,
                            'matching_permissions': list(overlap),
                            'new_permissions': list(group_permission_names - user_permission_names)
                        })
            
            # Sort by match score (descending)
            suggestions.sort(key=lambda x: x['match_score'], reverse=True)
            
            return suggestions[:5]  # Return top 5 suggestions
            
        except Exception as e:
            from flask import current_app
            current_app.logger.error(f"Error suggesting permission groups: {str(e)}")
            return []

    @classmethod
    def migrate_role_to_permissions(cls, user_id: int, migrated_by_user_id: int = None) -> Tuple[bool, str, int]:
        """
        Migrate a user's legacy role permissions to direct permission assignments.
        
        Args:
            user_id (int): User ID to migrate
            migrated_by_user_id (int): ID of user performing the migration
            
        Returns:
            Tuple[bool, str, int]: (success, message, status_code)
        """
        try:
            user = User.query.options(selectinload(User.roles)).get(user_id)
            if not user:
                return False, "User not found", 404
            
            if not user.roles:
                return True, "User has no roles to migrate", 200
            
            # Get all permissions from user's roles
            role_permissions = set()
            for role in user.roles:
                for permission in role.permissions:
                    if permission and permission.is_active:
                        role_permissions.add(permission)
            
            # Create direct permission assignments
            migration_count = 0
            for permission in role_permissions:
                # Check if user already has this direct permission
                existing = UserPermission.query.filter_by(
                    user_id=user_id,
                    permission_id=permission.id,
                    is_active=True
                ).first()
                
                if not existing:
                    success, message = PermissionService.grant_direct_permission(
                        user_id=user_id,
                        permission_id=permission.id,
                        granted_by_user_id=migrated_by_user_id,
                        reason="Legacy role migration"
                    )
                    
                    if success:
                        migration_count += 1
            
            return True, f"Successfully migrated {migration_count} permissions from roles", 200
            
        except Exception as e:
            from flask import current_app
            current_app.logger.error(f"Error migrating role to permissions: {str(e)}")
            return False, f"Migration failed: {str(e)}", 500

================
File: backend/src/utils/__init__.py
================
"""
Utility functions and decorators for the FBO LaunchPad backend.
"""

================
File: backend/src/utils/auth.py
================
from functools import wraps
from flask import jsonify, current_app
from flask_jwt_extended import verify_jwt_in_request, get_jwt_identity

def admin_required():
    def wrapper(fn):
        @wraps(fn)
        def decorator(*args, **kwargs):
            verify_jwt_in_request()
            claims = get_jwt_identity()
            
            if claims.get('role') != 'admin':
                return jsonify({'error': 'Admin privileges required'}), 403
                
            return fn(*args, **kwargs)
        return decorator
    return wrapper

def user_required():
    def wrapper(fn):
        @wraps(fn)
        def decorator(*args, **kwargs):
            verify_jwt_in_request()
            claims = get_jwt_identity()
            
            if not claims.get('role') in ['user', 'admin']:
                return jsonify({'error': 'User privileges required'}), 403
                
            return fn(*args, **kwargs)
        return decorator
    return wrapper

================
File: backend/src/utils/decorators.py
================
"""
Authentication decorators for protecting API routes.
"""
from functools import wraps
from flask import request, jsonify, current_app, g, make_response
import jwt
from ..models.user import User


def token_required(f):
    """
    A decorator that protects routes by verifying the JWT token in the Authorization header.
    Skips verification for OPTIONS requests to support CORS preflight.
    
    The token must be provided in the format: 'Bearer <token>'.
    On successful verification, the authenticated user is stored in g.current_user.
    
    Args:
        f: The route function to be decorated.
        
    Returns:
        decorated_function: The wrapped function that performs token verification.
        
    Raises:
        401 Unauthorized: If the token is missing, invalid, expired, or the user is not found/inactive.
    """
    @wraps(f)
    def decorated_function(*args, **kwargs):
        # Skip token verification for OPTIONS requests
        if request.method == 'OPTIONS':
            resp = make_response() 
            return resp 
            
        token = None
        auth_header = request.headers.get('Authorization')
        
        print(f"Auth header: {auth_header}")
        
        # Check if Authorization header exists and follows Bearer scheme
        if auth_header:
            try:
                # Extract token from "Bearer <token>"
                token_parts = auth_header.split()
                if len(token_parts) == 2 and token_parts[0].lower() == 'bearer':
                    token = token_parts[1]
                print(f"Token parts: {token_parts}")
            except Exception as e:
                print(f"Error parsing auth header: {e}")
                return jsonify({"error": "Invalid Authorization header format"}), 401
        
        if not token:
            return jsonify({"error": "Authentication token is missing!"}), 401
            
        try:
            # Decode and verify the token
            print(f"Decoding token: {token}")
            payload = jwt.decode(
                token,
                current_app.config['JWT_SECRET_KEY'],
                algorithms=[current_app.config.get('JWT_ALGORITHM', 'HS256')]
            )
            print(f"Token payload: {payload}")
            
            # Get user from database
            user_id = payload['sub']
            if not isinstance(user_id, str):
                user_id = str(user_id)
            current_user = User.query.get(int(user_id))
            print(f"Found user: {current_user}")
            
            # Verify user exists and is active
            if not current_user or not current_user.is_active:
                return jsonify({"error": "User not found or inactive"}), 401
                
            # Store user in request context
            g.current_user = current_user
            
        except jwt.ExpiredSignatureError:
            print("Token expired")
            return jsonify({"error": "Token has expired!"}), 401
        except jwt.InvalidTokenError as e:
            print(f"Invalid token: {e}")
            return jsonify({"error": "Invalid token!"}), 401
        except Exception as e:
            print(f"Token processing error: {e}")
            return jsonify({"error": "Token processing error"}), 401
            
        return f(*args, **kwargs)
        
    return decorated_function 

def require_permission(permission_name: str):
    """
    Decorator to ensure the logged-in user has the specified permission.
    Must be applied AFTER @token_required. Skips checks for OPTIONS requests.
    """
    def _decorator(f):
        @wraps(f)
        def _wrapper(*args, **kwargs):
            # Skip permission check for OPTIONS requests (CORS preflight)
            if request.method == 'OPTIONS':
                resp = make_response() 
                return resp 

            # 1. Check if user context exists (from @token_required)
            if not hasattr(g, 'current_user') or not g.current_user:
                # Log this internal server error
                print(f"ERROR: g.current_user not found in @require_permission('{permission_name}'). Check decorator order.")
                return jsonify({"error": "Internal Server Error: Authentication context missing"}), 500

            # 2. Check if the user has the required permission
            if not g.current_user.has_permission(permission_name):
                return jsonify({"error": f"Forbidden: Requires permission '{permission_name}'"}), 403

            # 3. Permission granted, proceed to the route function
            return f(*args, **kwargs)
        return _wrapper
    return _decorator

================
File: backend/src/utils/rate_limiting.py
================
from functools import wraps
from flask import request, jsonify
from datetime import datetime, timedelta
import time

# Store rate limiting state
rate_limits = {}

def rate_limit(limit=5, window=300):
    """
    Rate limiting decorator that limits the number of requests per time window.
    
    Args:
        limit (int): Maximum number of requests allowed within the window
        window (int): Time window in seconds
        
    Returns:
        decorator: Function that implements rate limiting
    """
    def decorator(f):
        @wraps(f)
        def wrapped(*args, **kwargs):
            # Get client IP
            client_ip = request.remote_addr
            
            # Get current timestamp
            now = time.time()
            
            # Initialize rate limit entry for this IP if it doesn't exist
            if client_ip not in rate_limits:
                rate_limits[client_ip] = {
                    'count': 0,
                    'reset_time': now + window
                }
                
            # Check if window has expired and reset if needed
            if now > rate_limits[client_ip]['reset_time']:
                rate_limits[client_ip] = {
                    'count': 0,
                    'reset_time': now + window
                }
                
            # Increment request count
            rate_limits[client_ip]['count'] += 1
            
            # Check if limit exceeded
            if rate_limits[client_ip]['count'] > limit:
                reset_time = datetime.fromtimestamp(rate_limits[client_ip]['reset_time'])
                retry_after = int(rate_limits[client_ip]['reset_time'] - now)
                
                return jsonify({
                    'error': 'Rate limit exceeded',
                    'retry_after': retry_after
                }), 429
                
            return f(*args, **kwargs)
        return wrapped
    return decorator

def reset_rate_limits():
    """Reset all rate limiting state (useful for testing)."""
    global rate_limits
    rate_limits = {}

================
File: backend/src/utils/README.md
================
# Authentication Decorators

This module provides authentication decorators for protecting API routes in the FBO LaunchPad backend.

## `@token_required` Decorator

The `@token_required` decorator provides JWT-based authentication for Flask routes. It verifies the presence and validity of a JWT token in the request's Authorization header and makes the authenticated user available to the route handler.

### Configuration

Before using the decorator, ensure your Flask application has the following configuration:

```python
app.config['SECRET_KEY'] = 'your-secure-secret-key'  # Use a strong secret key in production
```

### Usage

Import and apply the decorator to your route handlers:

```python
from src.utils.decorators import token_required

@app.route('/api/protected')
@token_required
def protected_route():
    # Access the authenticated user from Flask's g object
    current_user = g.current_user
    return jsonify({
        "message": f"Hello {current_user.name}!",
        "user_id": current_user.id
    })
```

### Authentication Flow

1. **Token Format**: The client must include the JWT token in the Authorization header using the Bearer scheme:
   ```
   Authorization: Bearer <your-jwt-token>
   ```

2. **Validation Process**:
   - Verifies the presence of the Authorization header
   - Validates the Bearer scheme format
   - Decodes and verifies the JWT signature
   - Checks token expiration
   - Retrieves and validates the user from the database
   - Makes the user object available via `g.current_user`

3. **Error Handling**: The decorator returns appropriate 401 Unauthorized responses for various failure cases:

   | Error Case | Response |
   |------------|----------|
   | Missing Authorization header | `{"error": "Authentication token is missing!"}` |
   | Invalid header format | `{"error": "Invalid Authorization header format"}` |
   | Expired token | `{"error": "Token has expired!"}` |
   | Invalid token signature | `{"error": "Invalid token!"}` |
   | User not found/inactive | `{"error": "User not found or inactive"}` |
   | Other token errors | `{"error": "Token processing error"}` |

### Example Client Usage

```python
import requests

def make_authenticated_request(token, endpoint):
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }
    response = requests.get(
        f'https://api.fbolaunchpad.com{endpoint}',
        headers=headers
    )
    return response

# Example usage
token = "your.jwt.token"
response = make_authenticated_request(token, '/api/protected')
if response.status_code == 200:
    print("Success:", response.json())
else:
    print("Error:", response.json())
```

### Security Considerations

1. **Token Storage**: 
   - Store tokens securely on the client side (e.g., HttpOnly cookies for web applications)
   - Never store tokens in localStorage or sessionStorage due to XSS vulnerabilities

2. **Token Expiration**:
   - Use short-lived tokens (e.g., 15-60 minutes)
   - Implement token refresh mechanisms for longer sessions

3. **HTTPS**:
   - Always use HTTPS in production to prevent token interception
   - Consider adding additional security headers (e.g., HSTS)

4. **Error Messages**:
   - The decorator provides generic error messages to avoid leaking sensitive information
   - In development, you may want to enable more detailed error messages

### Dependencies

- Flask
- PyJWT
- SQLAlchemy (via Flask-SQLAlchemy)

### Best Practices

1. **Route Protection**:
   ```python
   # Protect all routes in a Blueprint
   @blueprint.before_request
   @token_required
   def before_request():
       pass
   ```

2. **Role-Based Access**:
   ```python
   from functools import wraps
   from flask import g

   def admin_required(f):
       @wraps(f)
       @token_required
       def decorated(*args, **kwargs):
           if g.current_user.role != UserRole.ADMIN:
               return jsonify({"error": "Admin access required"}), 403
           return f(*args, **kwargs)
       return decorated

   # Usage
   @app.route('/admin/dashboard')
   @admin_required
   def admin_dashboard():
       return jsonify({"message": "Welcome, Admin!"})
   ```

3. **Error Handling**:
   ```python
   from flask import Blueprint
   
   api = Blueprint('api', __name__)
   
   @api.errorhandler(401)
   def handle_unauthorized(error):
       return jsonify({
           "error": "Unauthorized",
           "message": "Please authenticate to access this resource"
       }), 401
   ```

### Testing

When writing tests for protected routes, you'll need to create valid JWT tokens:

```python
import jwt
import datetime

def create_test_token(user_id):
    return jwt.encode(
        {
            'sub': user_id,
            'exp': datetime.datetime.utcnow() + datetime.timedelta(minutes=30)
        },
        current_app.config['SECRET_KEY'],
        algorithm='HS256'
    )

def test_protected_route(client, test_user):
    token = create_test_token(test_user.id)
    headers = {'Authorization': f'Bearer {token}'}
    response = client.get('/api/protected', headers=headers)
    assert response.status_code == 200
```

================
File: backend/src/__init__.py
================
"""
FBO LaunchPad Backend Package
"""

# Import the main create_app function from app.py
from .app import create_app

# Make create_app available when importing from src
__all__ = ['create_app']

================
File: backend/src/app.py
================
import os
from flask import Flask, jsonify, current_app, request
from flask_cors import CORS
from apispec.ext.marshmallow import MarshmallowPlugin
from apispec_webframeworks.flask import FlaskPlugin
import logging

from src.config import config
from src.extensions import db, migrate, jwt, apispec, marshmallow_plugin
from src.cli import init_app as init_cli  # Import CLI initialization
from src.schemas import (
    RegisterRequestSchema,
    UserResponseSchema,
    RegisterResponseSchema,
    LoginRequestSchema,
    LoginSuccessResponseSchema,
    ErrorResponseSchema,
    FuelOrderCreateRequestSchema,
    FuelOrderStatusUpdateRequestSchema,
    FuelOrderCompleteRequestSchema,
    FuelOrderResponseSchema,
    FuelOrderBriefResponseSchema,
    FuelOrderCreateResponseSchema,
    FuelOrderUpdateResponseSchema,
    PaginationSchema,
    FuelOrderListResponseSchema,
    FuelTruckSchema,
    FuelTruckListResponseSchema,
    FuelTruckCreateRequestSchema,
    FuelTruckCreateResponseSchema,
    OrderStatusCountsSchema,
    OrderStatusCountsResponseSchema,
    UserPermissionsResponseSchema
)

def create_app(config_name=None):
    """Application factory function."""
    if config_name is None:
        config_name = os.getenv('FLASK_ENV', 'development')

    # Create Flask app instance
    app = Flask(__name__)

    # Initialize CORS before any other extensions or blueprints
    # Use permissive settings for development
    CORS(
        app,
        resources={
            r"/api/*": {
                "origins": "*",  # Allow all origins in development
                "methods": ["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"],
                "allow_headers": [
                    "Content-Type",
                    "Authorization",
                    "X-Requested-With",
                    "Accept",
                    "Origin",
                    "Access-Control-Request-Method",
                    "Access-Control-Request-Headers"
                ],
                "expose_headers": ["Content-Type", "Authorization"],
                "supports_credentials": True,
                "max_age": 3600  # Cache preflight requests for 1 hour
            }
        }
    )

    # Load config
    app.config.from_object(config[config_name])

    # Initialize other extensions
    db.init_app(app)
    migrate.init_app(app, db)
    jwt.init_app(app)
    init_cli(app)

    # Initialize API documentation with apispec
    flask_plugin = FlaskPlugin()
    apispec.plugins = [flask_plugin, marshmallow_plugin]

    # Re-initialize resolver for marshmallow plugin with updated plugins
    marshmallow_plugin.init_spec(apispec)
    
    # Add security scheme for JWT
    apispec.components.security_scheme(
        "bearerAuth",
        {
            "type": "http",
            "scheme": "bearer",
            "bearerFormat": "JWT",
        }
    )

    # Import blueprints here to avoid circular imports
    from src.routes.auth_routes import auth_bp
    from src.routes.fuel_order_routes import fuel_order_bp
    from src.routes.user_routes import user_bp
    from src.routes.fuel_truck_routes import truck_bp
    from src.routes.aircraft_routes import aircraft_bp
    from src.routes.customer_routes import customer_bp
    from src.routes.admin.routes import admin_bp
    from src.routes.enhanced_user_routes import enhanced_user_bp

    # Register blueprints with strict_slashes=False to prevent 308 redirects for both /api/resource and /api/resource/
    app.register_blueprint(auth_bp, url_prefix='/api/auth', strict_slashes=False)
    app.register_blueprint(fuel_order_bp, url_prefix='/api/fuel-orders', strict_slashes=False)
    app.register_blueprint(user_bp, url_prefix='/api/users', strict_slashes=False)
    app.register_blueprint(truck_bp, url_prefix='/api/fuel-trucks', strict_slashes=False)
    app.register_blueprint(aircraft_bp, url_prefix='/api/aircraft', strict_slashes=False)
    app.register_blueprint(customer_bp, url_prefix='/api/customers', strict_slashes=False)
    app.register_blueprint(admin_bp, url_prefix='/api/admin', strict_slashes=False)
    app.register_blueprint(enhanced_user_bp, url_prefix='/api/admin/users', strict_slashes=False)

    # --- TEMPORARY DEBUGGING CODE ---
    logger = logging.getLogger(__name__)
    if not logger.handlers:
        handler = logging.StreamHandler()
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        handler.setFormatter(formatter)
        logger.addHandler(handler)
    logger.setLevel(logging.INFO)

    logger.info("--- Complete Registered URL Map ---")
    all_rules_logged = []
    for rule in app.url_map.iter_rules():
        all_rules_logged.append(f"Rule: {rule.rule}, Endpoint: {rule.endpoint}, Methods: {sorted(list(rule.methods))}")
    all_rules_logged.sort()
    for log_line in all_rules_logged:
        logger.info(log_line)
    
    logger.info("\n--- Specifically checking /api/admin routes ---")
    admin_rules_found = False
    for rule in app.url_map.iter_rules():
        if rule.rule.startswith('/api/admin'):
            logger.info(f"Admin Rule: {rule.rule}, Endpoint: {rule.endpoint}, Methods: {sorted(list(rule.methods))}")
            admin_rules_found = True
    if not admin_rules_found:
        logger.info("No rules found starting with /api/admin.")
    logger.info("--- End of URL Map Inspection ---")
    # --- END TEMPORARY DEBUGGING CODE ---

    # Register schemas and paths with apispec
    with app.app_context():
        # Attach spec to app for use in other modules
        app.spec = apispec

        # Register Auth Schemas
        apispec.components.schema("RegisterRequestSchema", schema=RegisterRequestSchema)
        apispec.components.schema("UserResponseSchema", schema=UserResponseSchema)
        apispec.components.schema("RegisterResponseSchema", schema=RegisterResponseSchema)
        apispec.components.schema("LoginRequestSchema", schema=LoginRequestSchema)
        apispec.components.schema("LoginSuccessResponseSchema", schema=LoginSuccessResponseSchema)
        apispec.components.schema("ErrorResponseSchema", schema=ErrorResponseSchema)
        apispec.components.schema("UserPermissionsResponseSchema", schema=UserPermissionsResponseSchema)

        # Register User Admin Schemas
        from src.schemas.user_schemas import (
            UserCreateRequestSchema, UserUpdateRequestSchema,
            UserDetailSchema, UserListResponseSchema, UserBriefSchema,
            RoleBriefSchema
        )
        apispec.components.schema("RoleBriefSchema", schema=RoleBriefSchema)
        apispec.components.schema("UserBriefSchema", schema=UserBriefSchema)
        apispec.components.schema("UserCreateRequestSchema", schema=UserCreateRequestSchema)
        apispec.components.schema("UserUpdateRequestSchema", schema=UserUpdateRequestSchema)
        apispec.components.schema("UserDetailSchema", schema=UserDetailSchema)
        apispec.components.schema("UserListResponseSchema", schema=UserListResponseSchema)

        # Register Fuel Order Schemas
        apispec.components.schema("FuelOrderCreateRequestSchema", schema=FuelOrderCreateRequestSchema)
        apispec.components.schema("FuelOrderStatusUpdateRequestSchema", schema=FuelOrderStatusUpdateRequestSchema)
        apispec.components.schema("FuelOrderCompleteRequestSchema", schema=FuelOrderCompleteRequestSchema)
        apispec.components.schema("FuelOrderResponseSchema", schema=FuelOrderResponseSchema)
        apispec.components.schema("FuelOrderBriefResponseSchema", schema=FuelOrderBriefResponseSchema)
        apispec.components.schema("FuelOrderCreateResponseSchema", schema=FuelOrderCreateResponseSchema)
        apispec.components.schema("FuelOrderUpdateResponseSchema", schema=FuelOrderUpdateResponseSchema)
        apispec.components.schema("PaginationSchema", schema=PaginationSchema)
        apispec.components.schema("FuelOrderListResponseSchema", schema=FuelOrderListResponseSchema)
        apispec.components.schema("OrderStatusCountsSchema", schema=OrderStatusCountsSchema)
        apispec.components.schema("OrderStatusCountsResponseSchema", schema=OrderStatusCountsResponseSchema)

        # Register Fuel Truck Schemas
        apispec.components.schema("FuelTruckSchema", schema=FuelTruckSchema)
        apispec.components.schema("FuelTruckListResponseSchema", schema=FuelTruckListResponseSchema)
        apispec.components.schema("FuelTruckCreateRequestSchema", schema=FuelTruckCreateRequestSchema)
        apispec.components.schema("FuelTruckCreateResponseSchema", schema=FuelTruckCreateResponseSchema)

        # Register Aircraft Schemas
        from src.schemas.aircraft_schemas import (
            AircraftCreateSchema,
            AircraftUpdateSchema,
            AircraftResponseSchema,
            AircraftListSchema,
            ErrorResponseSchema as AircraftErrorResponseSchema
        )
        apispec.components.schema("AircraftCreateSchema", schema=AircraftCreateSchema)
        apispec.components.schema("AircraftUpdateSchema", schema=AircraftUpdateSchema)
        apispec.components.schema("AircraftResponseSchema", schema=AircraftResponseSchema)
        apispec.components.schema("AircraftListSchema", schema=AircraftListSchema)
        apispec.components.schema("AircraftErrorResponseSchema", schema=AircraftErrorResponseSchema)

        # Register Customer Schemas
        from src.schemas.customer_schemas import (
            CustomerCreateSchema,
            CustomerUpdateSchema,
            CustomerResponseSchema,
            CustomerListSchema,
            ErrorResponseSchema as CustomerErrorResponseSchema
        )
        apispec.components.schema("CustomerCreateSchema", schema=CustomerCreateSchema)
        apispec.components.schema("CustomerUpdateSchema", schema=CustomerUpdateSchema)
        apispec.components.schema("CustomerResponseSchema", schema=CustomerResponseSchema)
        apispec.components.schema("CustomerListSchema", schema=CustomerListSchema)
        apispec.components.schema("CustomerErrorResponseSchema", schema=CustomerErrorResponseSchema)

        # Register Admin Schemas
        from src.schemas.admin_schemas import (
            AdminAircraftSchema, AdminAircraftListResponseSchema,
            AdminCustomerSchema, AdminCustomerListResponseSchema
        )
        apispec.components.schema("AdminAircraftSchema", schema=AdminAircraftSchema)
        apispec.components.schema("AdminAircraftListResponseSchema", schema=AdminAircraftListResponseSchema)
        apispec.components.schema("AdminCustomerSchema", schema=AdminCustomerSchema)
        apispec.components.schema("AdminCustomerListResponseSchema", schema=AdminCustomerListResponseSchema)

        # Register Permission Schemas
        from src.routes.admin.permission_admin_routes import PermissionListResponseSchema
        from src.schemas import PermissionSchema
        apispec.components.schema("PermissionSchema", schema=PermissionSchema)
        apispec.components.schema("PermissionListResponseSchema", schema=PermissionListResponseSchema)

        # Register Auth Views
        from src.routes.auth_routes import register, login, get_my_permissions
        apispec.path(view=register, bp=auth_bp)
        apispec.path(view=login, bp=auth_bp)
        apispec.path(view=get_my_permissions, bp=auth_bp)

        # Register User Views
        from src.routes.user_routes import get_users
        apispec.path(view=get_users, bp=user_bp)

        # Register Fuel Order Views
        from src.routes.fuel_order_routes import (
            create_fuel_order, get_fuel_orders, get_fuel_order,
            update_fuel_order_status, submit_fuel_data, review_fuel_order,
            export_fuel_orders_csv, get_status_counts
        )
        apispec.path(view=create_fuel_order, bp=fuel_order_bp)
        apispec.path(view=get_fuel_orders, bp=fuel_order_bp)
        apispec.path(view=get_fuel_order, bp=fuel_order_bp)
        apispec.path(view=update_fuel_order_status, bp=fuel_order_bp)
        apispec.path(view=submit_fuel_data, bp=fuel_order_bp)
        apispec.path(view=review_fuel_order, bp=fuel_order_bp)
        apispec.path(view=export_fuel_orders_csv, bp=fuel_order_bp)
        apispec.path(view=get_status_counts, bp=fuel_order_bp)

        # Register Fuel Truck Views
        from src.routes.fuel_truck_routes import get_fuel_trucks, create_fuel_truck
        apispec.path(view=get_fuel_trucks, bp=truck_bp)
        apispec.path(view=create_fuel_truck, bp=truck_bp)

        # Register Aircraft Views
        from src.routes.aircraft_routes import list_aircraft, create_aircraft, get_aircraft, update_aircraft, delete_aircraft
        apispec.path(view=list_aircraft, bp=aircraft_bp)
        apispec.path(view=create_aircraft, bp=aircraft_bp)
        apispec.path(view=get_aircraft, bp=aircraft_bp)
        apispec.path(view=update_aircraft, bp=aircraft_bp)
        apispec.path(view=delete_aircraft, bp=aircraft_bp)

        # Register Admin Views
        from src.routes.admin.aircraft_admin_routes import list_aircraft as admin_list_aircraft, create_aircraft as admin_create_aircraft, get_aircraft as admin_get_aircraft, update_aircraft as admin_update_aircraft, delete_aircraft as admin_delete_aircraft
        from src.routes.admin.customer_admin_routes import list_customers as admin_list_customers, create_customer as admin_create_customer, get_customer as admin_get_customer, update_customer as admin_update_customer, delete_customer as admin_delete_customer
        from src.routes.admin.permission_admin_routes import get_permissions
        from src.routes.admin.user_admin_routes import get_users as admin_get_users
        from src.routes.admin.role_admin_routes import get_roles, create_role, get_role, update_role, delete_role, get_role_permissions

        # Register Admin Aircraft Views
        apispec.path(view=admin_list_aircraft, bp=admin_bp)
        apispec.path(view=admin_create_aircraft, bp=admin_bp)
        apispec.path(view=admin_get_aircraft, bp=admin_bp)
        apispec.path(view=admin_update_aircraft, bp=admin_bp)
        apispec.path(view=admin_delete_aircraft, bp=admin_bp)

        # Register Admin Customer Views
        apispec.path(view=admin_list_customers, bp=admin_bp)
        apispec.path(view=admin_create_customer, bp=admin_bp)
        apispec.path(view=admin_get_customer, bp=admin_bp)
        apispec.path(view=admin_update_customer, bp=admin_bp)
        apispec.path(view=admin_delete_customer, bp=admin_bp)

        # Register Admin User Views
        apispec.path(view=admin_get_users, bp=admin_bp)
        # apispec.path(view=admin_create_user, bp=admin_bp)
        # apispec.path(view=admin_get_user, bp=admin_bp)
        # apispec.path(view=admin_update_user, bp=admin_bp)
        # apispec.path(view=admin_delete_user, bp=admin_bp)

        # Register Admin Role Views
        apispec.path(view=get_roles, bp=admin_bp)
        apispec.path(view=create_role, bp=admin_bp)
        apispec.path(view=get_role, bp=admin_bp)
        apispec.path(view=update_role, bp=admin_bp)
        apispec.path(view=delete_role, bp=admin_bp)
        apispec.path(view=get_role_permissions, bp=admin_bp)

        # Register Admin Permission Views
        apispec.path(view=get_permissions, bp=admin_bp)

    @app.route('/')
    def root():
        """Root endpoint."""
        return jsonify({"status": "ok", "message": "FBO LaunchPad API is running"})

    @app.route('/health')
    def health_check():
        """Basic health check endpoint."""
        return jsonify({'status': 'healthy', 'message': 'FBO LaunchPad API is running'})

    @app.route('/api/swagger.json')
    def create_swagger_spec():
        """Serve the swagger specification."""
        return jsonify(app.spec.to_dict())

    @app.route('/api/cors-test', methods=['OPTIONS', 'POST'])
    def cors_test():
        return jsonify({"message": "CORS test"}), 200

    return app

if __name__ == '__main__':
    app = create_app()
    app.run()

================
File: backend/src/cli.py
================
import click
from flask.cli import with_appcontext
from .extensions import db
from .seeds import seed_data

@click.command('create-admin')
@with_appcontext
def create_admin():
    """Create an admin user."""
    from .models.user import User
    from .models.role import Role
    
    # Check if admin already exists
    if User.query.filter_by(email='admin@fbolaunchpad.com').first():
        click.echo("Admin user already exists!")
        return
    
    # Get admin role
    admin_role = Role.query.filter_by(name='System Administrator').first()
    if not admin_role:
        click.echo("Error: System Administrator role not found!")
        return
    
    # Create new admin user
    admin = User(
        email='admin@fbolaunchpad.com',
        username='admin',
        name='Admin',
        is_active=True
    )
    admin.set_password('Admin123!')
    admin.roles = [admin_role]
    
    # Save to database
    db.session.add(admin)
    db.session.commit()
    click.echo("Admin user created successfully!")

@click.group()
def seed_cli():
    """Database seeding commands."""
    pass

@seed_cli.command('run')
@with_appcontext
def run_seed():
    """Populates the database with initial permissions, roles, and admin user."""
    seed_data()
    click.echo("Database seeding process finished.")

@click.group()
def migrate_cli():
    """Permission system migration commands."""
    pass

@migrate_cli.command('run')
@with_appcontext
def run_migration():
    """Run the permission system migration from roles to permissions."""
    from .migration_scripts.permission_migration import run_migration
    
    click.echo("Starting permission system migration...")
    result = run_migration()
    
    if result['success']:
        click.echo("✅ Migration completed successfully!")
        report = result.get('validation_results', {})
        click.echo(f"📊 Migration Summary:")
        click.echo(f"   - Users with permission groups: {report.get('users_with_groups', 0)}")
        click.echo(f"   - Users without permission groups: {report.get('users_without_groups', 0)}")
        click.echo(f"   - Permission groups created: {report.get('permission_groups_created', 0)}")
        click.echo(f"   - Enhanced permissions created: {report.get('enhanced_permissions_created', 0)}")
        
        if report.get('validation_errors'):
            click.echo("⚠️  Validation warnings:")
            for error in report['validation_errors']:
                click.echo(f"   - {error}")
    else:
        click.echo(f"❌ Migration failed: {result.get('error', 'Unknown error')}")

@migrate_cli.command('validate')
@with_appcontext
def validate_migration():
    """Validate the current state of the permission system migration."""
    from .migration_scripts.permission_migration import PermissionMigration
    
    migration = PermissionMigration()
    results = migration.validate_migration()
    
    click.echo("📊 Migration Validation Results:")
    click.echo(f"   - Users with permission groups: {results['users_with_groups']}")
    click.echo(f"   - Users without permission groups: {results['users_without_groups']}")
    click.echo(f"   - Permission groups created: {results['permission_groups_created']}")
    click.echo(f"   - Enhanced permissions created: {results['enhanced_permissions_created']}")
    
    if results['validation_errors']:
        click.echo("⚠️  Validation errors:")
        for error in results['validation_errors']:
            click.echo(f"   - {error}")
    else:
        click.echo("✅ No validation errors found!")

def init_app(app):
    """Register CLI commands."""
    app.cli.add_command(create_admin)
    app.cli.add_command(seed_cli, name='seed')
    app.cli.add_command(migrate_cli, name='migrate')

================
File: backend/src/config.py
================
import os
from dotenv import load_dotenv
from datetime import timedelta

# Load environment variables from .env file
load_dotenv()

class Config:
    """Base configuration class."""
    # Flask
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'hard-to-guess-string'
    JWT_SECRET_KEY = os.environ.get('JWT_SECRET_KEY') or 'jwt-secret-string'
    JWT_ACCESS_TOKEN_EXPIRES = timedelta(hours=1)
    JWT_ALGORITHM = 'HS256'
    JWT_TOKEN_LOCATION = ['headers']
    JWT_HEADER_NAME = 'Authorization'
    JWT_HEADER_TYPE = 'Bearer'
    FLASK_ENV = os.getenv('FLASK_ENV', 'development')
    DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

    # Database
    SQLALCHEMY_DATABASE_URI = os.getenv('SQLALCHEMY_DATABASE_URI')
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    SQLALCHEMY_ECHO = os.getenv('SQLALCHEMY_ECHO', 'False').lower() == 'true'

    # Application specific
    APP_NAME = os.getenv('APP_NAME', 'FBO LaunchPad')
    LOG_LEVEL = os.getenv('LOG_LEVEL', 'DEBUG')

    @staticmethod
    def init_app(app):
        pass

class DevelopmentConfig(Config):
    """Development configuration."""
    DEBUG = True
    SQLALCHEMY_DATABASE_URI = os.environ.get('DEV_DATABASE_URL') or \
        'postgresql://fbo_user:fbo_password@db:5432/fbo_launchpad_dev'

class ProductionConfig(Config):
    """Production configuration."""
    DEBUG = False
    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \
        'postgresql://fbo_user:fbo_password@db:5432/fbo_launchpad'

class TestingConfig(Config):
    """Testing configuration."""
    TESTING = True
    # Use environment variable if set, otherwise use Docker service name
    SQLALCHEMY_DATABASE_URI = os.environ.get('SQLALCHEMY_DATABASE_URI') or \
        'postgresql://fbo_user:fbo_password@db:5432/fbo_launchpad_test'
    # Keep test output clean
    SQLALCHEMY_ECHO = False
    # Disable CSRF for testing if using Flask-WTF
    WTF_CSRF_ENABLED = False
    # Disable error catching during request handling
    PROPAGATE_EXCEPTIONS = True
    # Disable Flask-DebugToolbar if installed
    DEBUG_TB_ENABLED = False

    @classmethod
    def init_app(cls, app):
        """Initialize the testing configuration."""
        Config.init_app(app)
        # Ensure SQLAlchemy always uses the test database URL
        app.config['SQLALCHEMY_DATABASE_URI'] = cls.SQLALCHEMY_DATABASE_URI

# Configuration dictionary
config = {
    'development': DevelopmentConfig,
    'production': ProductionConfig,
    'testing': TestingConfig,
    'default': DevelopmentConfig
}

================
File: backend/src/extensions.py
================
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from apispec import APISpec
from apispec.ext.marshmallow import MarshmallowPlugin
from flask_jwt_extended import JWTManager

# Database
db = SQLAlchemy()
migrate = Migrate()
jwt = JWTManager()

# API documentation
marshmallow_plugin = MarshmallowPlugin()
apispec = APISpec(
    title="FBO LaunchPad API",
    version="1.0.0",
    openapi_version="3.0.2",
    plugins=[marshmallow_plugin],
    info=dict(description="API for FBO LaunchPad")
)

# Initialize resolver for marshmallow plugin
marshmallow_plugin.init_spec(apispec)

================
File: backend/DATABASE_SETUP.md
================
# FBO LaunchPad Database Setup Guide

This guide explains how to set up and seed the FBO LaunchPad database with default users and permissions.

## Quick Start

The easiest way to start the application with a seeded database is to use the provided script:

```bash
cd backend
./reseed_database.sh start
```

This will automatically:
1. Start the PostgreSQL database
2. Run database migrations
3. Seed the database with default users and permissions (if empty)
4. Start the Flask application

## Default Users

The following default users are automatically created when seeding the database:

| Role | Email | Password | Permissions |
|------|-------|----------|-------------|
| **System Administrator** | admin@fbolaunchpad.com | Admin123! | Full system access |
| **Customer Service Representative** | csr@fbolaunchpad.com | CSR123! | Order management, customer management |
| **Line Service Technician (Fueler)** | fueler@fbolaunchpad.com | Fueler123! | Assigned orders, status updates |
| **Member** | member@fbolaunchpad.com | Member123! | Limited view access |

## Database Management Commands

### Using the Convenience Script

The `reseed_database.sh` script provides several commands:

```bash
# Start application (auto-seeds if database is empty)
./reseed_database.sh start

# Force reseed database (WARNING: deletes all data)
./reseed_database.sh reseed

# Fresh start (removes volumes and starts clean)
./reseed_database.sh fresh

# Check status and current users
./reseed_database.sh status

# View application logs
./reseed_database.sh logs

# Stop containers
./reseed_database.sh stop

# Show help
./reseed_database.sh help
```

### Manual Docker Commands

If you prefer to run commands manually:

```bash
# Start the application
docker-compose up -d

# Run database migrations
docker-compose exec backend flask db upgrade

# Seed the database
docker-compose exec backend flask seed run

# Check database status
docker-compose exec backend python -c "
from src.app import create_app
from src.models.user import User
app = create_app()
with app.app_context():
    print(f'Users: {User.query.count()}')
"
```

## Role Permissions

### System Administrator
- All permissions (full system access)

### Customer Service Representative
- Create orders
- View all orders
- Review orders
- Export orders to CSV
- View order statistics
- Edit fuel orders
- View users, trucks, aircraft, customers
- Manage aircraft and customers
- View permissions

### Line Service Technician (Fueler)
- Create orders
- View assigned orders
- Update own order status
- Complete own orders
- View order statistics

### Member
- View order statistics
- View customers
- View aircraft

## Database Structure

The application uses a role-based permission system with the following key tables:

- `users` - User accounts
- `roles` - Available roles
- `permissions` - Available permissions
- `user_roles` - User-role assignments
- `role_permissions` - Role-permission assignments

## Troubleshooting

### Database Connection Issues

1. Ensure PostgreSQL container is running:
   ```bash
   docker-compose ps
   ```

2. Check database logs:
   ```bash
   docker-compose logs db
   ```

### Seeding Issues

1. Check if users already exist:
   ```bash
   ./reseed_database.sh status
   ```

2. Force reseed if needed:
   ```bash
   ./reseed_database.sh reseed
   ```

### Fresh Installation

If you want to start completely fresh:

```bash
# Stop and remove everything
docker-compose down -v

# Start fresh (will auto-seed)
./reseed_database.sh fresh
```

## Environment Variables

The following environment variables control database connection:

- `POSTGRES_USER=fbo_user`
- `POSTGRES_PASSWORD=fbo_password`
- `POSTGRES_DB=fbo_launchpad_dev`
- `DATABASE_URL` (constructed automatically)

## Security Notes

- **Change default passwords** in production environments
- The seed script only creates users if they don't already exist
- All passwords are properly hashed using PBKDF2-SHA256
- Default users are marked as active but can be deactivated through the admin interface

## Development Workflow

For development, the typical workflow is:

1. Start the application: `./reseed_database.sh start`
2. Make changes to models or seeds
3. Create new migration: `docker-compose exec backend flask db migrate -m "description"`
4. Apply migration: `docker-compose exec backend flask db upgrade`
5. If needed, reseed: `./reseed_database.sh reseed`

================
File: backend/docker-compose.yml
================
version: '3.8'

services:
  backend:
    build: .
    ports:
      - "5001:5000"
    volumes:
      - ./src:/app/src
      - ./migrations:/app/migrations
      - ./tests:/app/tests
    env_file:
      - .env
    depends_on:
      - db
    environment:
      - FLASK_APP=src/app.py
      - FLASK_ENV=development
    restart: unless-stopped

  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_USER=fbo_user
      - POSTGRES_PASSWORD=fbo_password
      - POSTGRES_DB=fbo_launchpad_dev
    ports:
      - "5433:5432"
    restart: unless-stopped

volumes:
  postgres_data:

================
File: backend/entrypoint.sh
================
#!/bin/bash
set -e

# Wait for PostgreSQL to be ready
echo "Waiting for PostgreSQL to be ready..."
while ! pg_isready -h db -p 5432 -U fbo_user; do
    echo "PostgreSQL is unavailable - sleeping"
    sleep 2
done

echo "PostgreSQL is ready - proceeding with database setup"

# Set Flask app environment
export FLASK_APP=src/app.py

# Run database migrations
echo "Running database migrations..."
flask db upgrade

# Check if this is a fresh database (no users exist) and seed if needed
echo "Checking if database needs seeding..."
python -c "
from src.app import create_app
from src.extensions import db
from src.models.user import User

app = create_app()
with app.app_context():
    user_count = User.query.count()
    if user_count == 0:
        print('Database is empty, seeding required.')
        exit(1)
    else:
        print(f'Database has {user_count} users, seeding not required.')
        exit(0)
" && echo "Database already seeded" || {
    echo "Seeding database with default data..."
    flask seed run
}

echo "Database setup complete - starting application..."

# Execute the original command
exec "$@"

================
File: backend/reseed_database.sh
================
#!/bin/bash

# FBO LaunchPad Database Reseeding Script
# This script provides convenient commands to manage database seeding

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

print_usage() {
    echo "Usage: $0 [COMMAND]"
    echo ""
    echo "Commands:"
    echo "  start          Start the application (will auto-seed if database is empty)"
    echo "  reseed         Force reseed the database (clears all data and reseeds)"
    echo "  fresh          Stop containers, remove volumes, and start fresh"
    echo "  status         Show status of containers and database"
    echo "  logs           Show application logs"
    echo "  stop           Stop all containers"
    echo ""
    echo "Default accounts that will be created:"
    echo "  Admin:  admin@fbolaunchpad.com / Admin123!"
    echo "  CSR:    csr@fbolaunchpad.com / CSR123!"
    echo "  Fueler: fueler@fbolaunchpad.com / Fueler123!"
    echo "  Member: member@fbolaunchpad.com / Member123!"
}

check_docker() {
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}Error: Docker is not installed or not in PATH${NC}"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
        echo -e "${RED}Error: Docker Compose is not installed${NC}"
        exit 1
    fi
}

get_compose_cmd() {
    if command -v docker-compose &> /dev/null; then
        echo "docker-compose"
    else
        echo "docker compose"
    fi
}

start_application() {
    echo -e "${GREEN}Starting FBO LaunchPad application...${NC}"
    $(get_compose_cmd) up -d
    echo -e "${GREEN}Application started! Database will be auto-seeded if empty.${NC}"
    echo -e "${YELLOW}Checking logs for seeding status...${NC}"
    sleep 5
    $(get_compose_cmd) logs backend | tail -20
}

force_reseed() {
    echo -e "${YELLOW}Force reseeding database...${NC}"
    echo -e "${RED}WARNING: This will delete ALL existing data!${NC}"
    read -p "Are you sure? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${GREEN}Reseeding database...${NC}"
        $(get_compose_cmd) exec backend flask seed run
        echo -e "${GREEN}Database reseeded successfully!${NC}"
    else
        echo -e "${YELLOW}Operation cancelled.${NC}"
    fi
}

fresh_start() {
    echo -e "${YELLOW}Starting fresh (will remove all data and volumes)...${NC}"
    echo -e "${RED}WARNING: This will delete ALL data including the database!${NC}"
    read -p "Are you sure? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${GREEN}Stopping containers...${NC}"
        $(get_compose_cmd) down -v
        echo -e "${GREEN}Starting fresh...${NC}"
        $(get_compose_cmd) up -d
        echo -e "${GREEN}Fresh start complete! Database will be seeded automatically.${NC}"
        sleep 5
        $(get_compose_cmd) logs backend | tail -20
    else
        echo -e "${YELLOW}Operation cancelled.${NC}"
    fi
}

show_status() {
    echo -e "${GREEN}Container Status:${NC}"
    $(get_compose_cmd) ps
    echo ""
    echo -e "${GREEN}Database Connection Test:${NC}"
    $(get_compose_cmd) exec backend python -c "
from src.app import create_app
from src.extensions import db
from src.models.user import User

try:
    app = create_app()
    with app.app_context():
        user_count = User.query.count()
        print(f'Database connection: OK')
        print(f'Total users in database: {user_count}')
        if user_count > 0:
            users = User.query.all()
            print('Existing users:')
            for user in users:
                roles = ', '.join([role.name for role in user.roles])
                print(f'  - {user.email} ({roles})')
except Exception as e:
    print(f'Database connection: FAILED - {e}')
" 2>/dev/null || echo -e "${RED}Cannot connect to database or backend not running${NC}"
}

show_logs() {
    echo -e "${GREEN}Application Logs:${NC}"
    $(get_compose_cmd) logs -f backend
}

stop_containers() {
    echo -e "${GREEN}Stopping containers...${NC}"
    $(get_compose_cmd) down
    echo -e "${GREEN}Containers stopped.${NC}"
}

# Main script logic
check_docker

case "${1:-start}" in
    start)
        start_application
        ;;
    reseed)
        force_reseed
        ;;
    fresh)
        fresh_start
        ;;
    status)
        show_status
        ;;
    logs)
        show_logs
        ;;
    stop)
        stop_containers
        ;;
    help|--help|-h)
        print_usage
        ;;
    *)
        echo -e "${RED}Unknown command: $1${NC}"
        echo ""
        print_usage
        exit 1
        ;;
esac

================
File: backend/setup.py
================
from setuptools import setup, find_packages

setup(
    name="fbo-launchpad-backend",
    version="0.1.0",
    packages=find_packages(),
    install_requires=[
        "flask",
        "flask-sqlalchemy",
        "flask-migrate",
        "psycopg2-binary",
        "python-dotenv",
        "apispec",
        "apispec-webframeworks",
        "marshmallow",
    ],
)

================
File: frontend/app/about/page.tsx
================
"use client"

import Header from "@/components/header"
import Footer from "@/components/footer"
import { useEffect, useState } from "react"
import { Plane, Users, Lightbulb, Target, Award, BarChart2, Code } from "lucide-react"
import Image from "next/image"
import Link from "next/link"
import { Button } from "@/components/ui/button"

export default function AboutPage() {
  // Scroll to top when page loads
  useEffect(() => {
    window.scrollTo(0, 0)
  }, [])

  const [isVisible, setIsVisible] = useState(false)

  useEffect(() => {
    setIsVisible(true)
  }, [])

  return (
    <div className="flex min-h-screen flex-col">
      <Header />

      <main className="flex-1 bg-background">
        {/* Hero Section */}
        <section className="relative py-20 md:py-28 night-sky-gradient overflow-hidden">
          <div className="absolute inset-0 tech-pattern-dark opacity-30"></div>
          <div className="container px-4 md:px-6 relative">
            <div
              className={`max-w-3xl mx-auto text-center transition-all duration-1000 ${
                isVisible ? "opacity-100 translate-y-0" : "opacity-0 translate-y-10"
              }`}
            >
              <div className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-primary/20 text-primary mb-4">
                <Users className="h-4 w-4 mr-1" />
                <span>Our Story</span>
              </div>
              <h1 className="text-3xl md:text-5xl font-bold tracking-tighter text-white mb-6">
                Driven by Experience, Built for Efficiency
              </h1>
              <p className="text-xl text-gray-300 leading-relaxed">
                Transforming FBO operations with innovative technology and deep aviation expertise.
              </p>
            </div>
          </div>

          {/* Animated flight path */}
          <div className="absolute bottom-0 left-0 w-full h-12 overflow-hidden">
            <div className="flight-line w-full h-full"></div>
          </div>
        </section>

        {/* Founders Story Section */}
        <section className="py-16 md:py-24 bg-background relative">
          <div className="absolute inset-0 tech-pattern opacity-10"></div>
          <div className="container px-4 md:px-6 relative">
            <div className="max-w-4xl mx-auto">
              <div className="grid gap-12 md:grid-cols-2 items-center">
                <div
                  className={`relative transition-all duration-1000 delay-300 ${
                    isVisible ? "opacity-100 translate-x-0" : "opacity-0 -translate-x-10"
                  }`}
                >
                  <div className="absolute -inset-1 bg-gradient-to-r from-primary to-accent rounded-lg blur opacity-25"></div>
                  <div className="relative rounded-lg overflow-hidden">
                    <Image
                      src="/aviation-planning.png"
                      alt="FBO LaunchPad founders"
                      width={800}
                      height={600}
                      className="w-full h-auto rounded-lg"
                    />
                  </div>
                </div>
                <div
                  className={`space-y-6 transition-all duration-1000 delay-500 ${
                    isVisible ? "opacity-100 translate-x-0" : "opacity-0 translate-x-10"
                  }`}
                >
                  <h2 className="text-3xl font-bold tracking-tighter">Our Founding Story</h2>
                  <div className="space-y-4">
                    <p className="text-muted-foreground">
                      The story of FBO LaunchPad begins with Josh and Tyler and a shared frustration. As a professional
                      pilot, Josh witnessed firsthand the disconnect within the aviation world: incredible innovation in
                      the skies often met with surprisingly outdated processes on the ground, particularly within
                      Fixed-Base Operators (FBOs).
                    </p>
                    <p className="text-muted-foreground">
                      They saw dedicated FBO teams juggling radio calls, deciphering handwritten notes, and manually
                      inputting data – processes ripe for error and inefficiency. Witnessing the daily challenges of
                      coordinating fuel orders, tracking services, and ensuring accurate billing through often
                      cumbersome, decades-old methods sparked a commitment. Josh and Tyler knew there had to be a better
                      way.
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        {/* Mission Section */}
        <section className="py-16 md:py-24 twilight-gradient relative">
          <div className="absolute inset-0 hexagon-pattern opacity-20"></div>
          <div className="container px-4 md:px-6 relative">
            <div className="max-w-4xl mx-auto text-center mb-12">
              <div className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-primary/20 text-primary mb-4">
                <Target className="h-4 w-4 mr-1" />
                <span>Our Mission</span>
              </div>
              <h2 className="text-3xl font-bold tracking-tighter md:text-4xl text-white mb-6">
                Revolutionizing FBO Operations
              </h2>
              <p className="text-xl text-gray-300 leading-relaxed">
                Combining Josh's aviation expertise with Tyler's business acumen, FBO LaunchPad was founded with a
                simple purpose: To solve the persistent problems of outdated infrastructure and inefficient operations
                by creating smart, user-friendly software tailored specifically for FBOs.
              </p>
            </div>

            <div className="grid gap-8 md:grid-cols-3">
              <div className="bg-white/10 backdrop-blur-md p-6 rounded-xl border border-white/10 card-futuristic">
                <div className="rounded-full bg-primary/20 p-3 w-12 h-12 flex items-center justify-center mb-4">
                  <Lightbulb className="h-6 w-6 text-primary" />
                </div>
                <h3 className="text-xl font-bold mb-3 text-white">Innovation</h3>
                <p className="text-gray-300">
                  We're committed to replacing frustrating workarounds and fragmented systems with a seamless,
                  integrated platform that leverages the latest in AI and machine learning technology.
                </p>
              </div>

              <div className="bg-white/10 backdrop-blur-md p-6 rounded-xl border border-white/10 card-futuristic">
                <div className="rounded-full bg-primary/20 p-3 w-12 h-12 flex items-center justify-center mb-4">
                  <Plane className="h-6 w-6 text-primary rotate-45" />
                </div>
                <h3 className="text-xl font-bold mb-3 text-white">Aviation Expertise</h3>
                <p className="text-gray-300">
                  Our team brings real-world aviation experience and technical knowledge to create solutions that
                  address the unique challenges faced by Fixed-Base Operators.
                </p>
              </div>

              <div className="bg-white/10 backdrop-blur-md p-6 rounded-xl border border-white/10 card-futuristic">
                <div className="rounded-full bg-primary/20 p-3 w-12 h-12 flex items-center justify-center mb-4">
                  <Award className="h-6 w-6 text-primary" />
                </div>
                <h3 className="text-xl font-bold mb-3 text-white">Customer Focus</h3>
                <p className="text-gray-300">
                  We prioritize understanding the real-world challenges FBOs face and building solutions that deliver
                  tangible improvements in efficiency, accuracy, and customer satisfaction.
                </p>
              </div>
            </div>
          </div>
        </section>

        {/* What We Do Section */}
        <section className="py-16 md:py-24 bg-background relative">
          <div className="absolute inset-0 tech-pattern opacity-10"></div>
          <div className="container px-4 md:px-6 relative">
            <div className="max-w-4xl mx-auto">
              <div className="text-center mb-12">
                <h2 className="text-3xl font-bold tracking-tighter md:text-4xl mb-4">What We Do</h2>
                <p className="text-xl text-muted-foreground">
                  FBO LaunchPad isn't just about software; it's about understanding the challenges FBOs face and
                  building the solutions they deserve.
                </p>
              </div>

              <div className="grid gap-8 md:grid-cols-2">
                <div className="border rounded-xl p-6 bg-card">
                  <h3 className="text-xl font-bold mb-3 flex items-center">
                    <span className="text-primary mr-2">01.</span> Aircraft Ownership Monitoring
                  </h3>
                  <p className="text-muted-foreground">
                    Our AI-powered system continuously monitors aircraft registration databases to detect ownership
                    changes, providing real-time alerts to FBOs when aircraft in their fleet change hands.
                  </p>
                </div>

                <div className="border rounded-xl p-6 bg-card">
                  <h3 className="text-xl font-bold mb-3 flex items-center">
                    <span className="text-primary mr-2">02.</span> Comprehensive Alert System
                  </h3>
                  <p className="text-muted-foreground">
                    Our platform delivers a range of critical notifications beyond ownership changes, including
                    fuel transaction monitoring, and customizable updates—all customizable to your FBO's specific needs.
                  </p>
                </div>

                <div className="border rounded-xl p-6 bg-card">
                  <h3 className="text-xl font-bold mb-3 flex items-center">
                    <span className="text-primary mr-2">03.</span> Streamlined Operations
                  </h3>
                  <p className="text-muted-foreground">
                    Our initial focus targets the critical communication and workflow between fuelers and CSRs,
                    automating tasks and eliminating paper trails to improve efficiency and reduce errors.
                  </p>
                </div>

                <div className="border rounded-xl p-6 bg-card">
                  <h3 className="text-xl font-bold mb-3 flex items-center">
                    <span className="text-primary mr-2">04.</span> Comprehensive FBO Platform
                  </h3>
                  <p className="text-muted-foreground">
                    Ultimately, we aim to provide a comprehensive digital hub for all key FBO functions, helping your
                    operation run smoother, faster, and more accurately.
                  </p>
                </div>
              </div>
            </div>
          </div>
        </section>

        {/* Team Section */}
        <section className="py-16 md:py-24 twilight-gradient relative">
          <div className="absolute inset-0 hexagon-pattern opacity-20"></div>
          <div className="container px-4 md:px-6 relative">
            <div className="max-w-4xl mx-auto text-center mb-12">
              <div className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-primary/20 text-primary mb-4">
                <Users className="h-4 w-4 mr-1" />
                <span>Our Team</span>
              </div>
              <h2 className="text-3xl font-bold tracking-tighter md:text-4xl text-white mb-6">
                Meet the Minds Behind FBO LaunchPad
              </h2>
              <p className="text-xl text-gray-300 leading-relaxed">
                Our founders bring complementary skills and expertise to create innovative solutions for the aviation
                industry.
              </p>
            </div>

            <div className="grid gap-8 md:grid-cols-2">
              <div className="bg-white/10 backdrop-blur-md rounded-xl overflow-hidden card-futuristic">
                <div className="aspect-[4/3] relative">
                  <Image
                    src="/images/josh2.jpg"
                    alt="Josh - Co-founder"
                    fill
                    style={{ objectFit: "cover" }}
                    className="transition-all duration-500 hover:scale-105"
                  />
                </div>
                <div className="p-6">
                  <h3 className="text-xl font-bold text-white">Josh</h3>
                  <p className="text-primary mb-3">Co-founder & Technical Lead</p>
                  <div className="space-y-3">
                    <div className="flex items-start gap-2">
                      <Plane className="h-5 w-5 text-primary mt-0.5 rotate-45" />
                      <p className="text-gray-300">
                        Professional pilot with firsthand experience of FBO operational challenges
                      </p>
                    </div>
                    <div className="flex items-start gap-2">
                      <Award className="h-5 w-5 text-primary mt-0.5" />
                      <p className="text-gray-300">Former aviation instructor at Baylor University</p>
                    </div>
                    <div className="flex items-start gap-2">
                      <Code className="h-5 w-5 text-primary mt-0.5" />
                      <p className="text-gray-300">
                        Technical expertise driving our innovative aircraft monitoring solutions
                      </p>
                    </div>
                  </div>
                </div>
              </div>

              <div className="bg-white/10 backdrop-blur-md rounded-xl overflow-hidden card-futuristic">
                <div className="aspect-[4/3] relative">
                  <Image
                    src="/images/tyler4.jpg"
                    alt="Tyler - Co-founder"
                    fill
                    style={{ objectFit: "cover" }}
                    className="transition-all duration-500 hover:scale-105"
                    priority
                  />
                </div>
                <div className="p-6">
                  <h3 className="text-xl font-bold text-white">Tyler</h3>
                  <p className="text-primary mb-3">Co-founder & Business Lead</p>
                  <div className="space-y-3">
                    <div className="flex items-start gap-2">
                      <BarChart2 className="h-5 w-5 text-primary mt-0.5" />
                      <p className="text-gray-300">
                        Business strategist with expertise in project management and finance
                      </p>
                    </div>
                    <div className="flex items-start gap-2">
                      <Target className="h-5 w-5 text-primary mt-0.5" />
                      <p className="text-gray-300">Drives company growth, partnerships, and customer relationships</p>
                    </div>
                    <div className="flex items-start gap-2">
                      <Lightbulb className="h-5 w-5 text-primary mt-0.5" />
                      <p className="text-gray-300">
                        Passionate about transforming traditional industries through innovative business models
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        {/* Complementary Skills Section */}
        <section className="py-16 md:py-24 bg-background relative">
          <div className="absolute inset-0 tech-pattern opacity-10"></div>
          <div className="container px-4 md:px-6 relative">
            <div className="max-w-4xl mx-auto">
              <div className="text-center mb-12">
                <h2 className="text-3xl font-bold tracking-tighter md:text-4xl mb-4">The Perfect Partnership</h2>
                <p className="text-xl text-muted-foreground">
                  Josh and Tyler bring complementary skills that create a powerful foundation for FBO LaunchPad's
                  success.
                </p>
              </div>

              <div className="grid gap-8 md:grid-cols-2">
                <div className="border rounded-xl p-6 bg-card">
                  <h3 className="text-xl font-bold mb-3 flex items-center gap-2">
                    <Plane className="h-5 w-5 text-primary rotate-45" />
                    Aviation Expertise
                  </h3>
                  <p className="text-muted-foreground mb-4">
                    Josh's experience as a pilot at Baylor University and his current role flying for a private company
                    gives him unique insight into the daily challenges faced by FBOs and aircraft operators.
                  </p>
                  <p className="text-muted-foreground">
                    His time teaching aviation further deepened his understanding of the industry's needs and pain
                    points, informing the development of our solutions.
                  </p>
                </div>

                <div className="border rounded-xl p-6 bg-card">
                  <h3 className="text-xl font-bold mb-3 flex items-center gap-2">
                    <BarChart2 className="h-5 w-5 text-primary" />
                    Business Acumen
                  </h3>
                  <p className="text-muted-foreground mb-4">
                    Tyler's background in project management, finance, and sales provides the business foundation needed
                    to transform innovative ideas into viable products and services.
                  </p>
                  <p className="text-muted-foreground">
                    His drive and strategic vision guide FBO LaunchPad's growth, ensuring we deliver exceptional value
                    to our customers while building a sustainable business.
                  </p>
                </div>
              </div>
            </div>
          </div>
        </section>

        {/* CTA Section */}
        <section className="py-16 md:py-24 night-sky-gradient relative">
          <div className="absolute inset-0 tech-pattern-dark opacity-30"></div>
          <div className="container px-4 md:px-6 relative">
            <div className="max-w-3xl mx-auto text-center">
              <h2 className="text-3xl font-bold tracking-tighter md:text-4xl mb-6 text-white">
                Join the FBO LaunchPad Journey
              </h2>
              <p className="text-xl text-gray-300 mb-8">
                Ready to transform your FBO operations with cutting-edge technology? Get in touch with our team to learn
                more about how FBO LaunchPad can help your business thrive.
              </p>
              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <Link href="/request-demo">
                  <Button size="lg" className="bg-primary hover:bg-primary/90 glow-effect">
                    <Plane className="h-4 w-4 mr-2 rotate-45" />
                    Request a Demo
                  </Button>
                </Link>
                <Link href="/request-demo">
                  <Button size="lg" variant="outline" className="border-gray-500 text-white hover:bg-white/10">
                    Contact Us
                  </Button>
                </Link>
              </div>
            </div>
          </div>

          {/* Animated flight path */}
          <div className="absolute bottom-0 left-0 w-full h-12 overflow-hidden">
            <div className="flight-line w-full h-full"></div>
          </div>
        </section>
      </main>

      <Footer />
    </div>
  )
}

================
File: frontend/app/actions/send-email.ts
================
"use server"

import nodemailer from "nodemailer"

interface DemoRequestData {
  name: string
  fboName: string
  email: string
  message: string
}

export async function sendDemoRequestEmail(data: DemoRequestData) {
  try {
    // Create a transporter
    const transporter = nodemailer.createTransport({
      host: process.env.EMAIL_SERVER || "smtp.outlook.com",
      port: Number(process.env.EMAIL_PORT) || 587,
      secure: false, // true for 465, false for other ports
      auth: {
        user: process.env.EMAIL_USER || "your-email@outlook.com", // fallback is just for development
        pass: process.env.EMAIL_PASSWORD || "your-password", // fallback is just for development
      },
    })

    // Email recipients
    const recipients = ["tyler.r.fbo@outlook.com", "josh.m.fbo@outlook.com"]

    // Email content
    const mailOptions = {
      from: process.env.EMAIL_FROM || "noreply@fbolaunchpad.com",
      to: recipients.join(", "),
      subject: `New Demo Request from ${data.name} at ${data.fboName}`,
      html: `
        <h1>New Demo Request</h1>
        <p><strong>Name:</strong> ${data.name}</p>
        <p><strong>FBO Name:</strong> ${data.fboName}</p>
        <p><strong>Email:</strong> ${data.email}</p>
        <p><strong>Message:</strong></p>
        <p>${data.message.replace(/\n/g, "<br>")}</p>
      `,
      text: `
        New Demo Request
        
        Name: ${data.name}
        FBO Name: ${data.fboName}
        Email: ${data.email}
        
        Message:
        ${data.message}
      `,
    }

    // Send the email
    const info = await transporter.sendMail(mailOptions)

    // Also store in localStorage for admin dashboard
    // This is handled in the client component

    return { success: true, messageId: info.messageId }
  } catch (error) {
    console.error("Error sending email:", error)
    return { success: false, error: (error as Error).message }
  }
}

================
File: frontend/app/admin/dashboard/page.tsx
================
"use client"

import { useEffect, useState } from "react"
import { Users, Shield, Truck, UserCheck, TrendingUp, Activity, AlertTriangle } from "lucide-react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import Link from "next/link"

export default function AdminDashboard() {
  const [stats, setStats] = useState({
    totalUsers: 0,
    activeUsers: 0,
    totalRoles: 0,
    totalPermissions: 0,
    activeFuelTrucks: 0,
    totalFuelTrucks: 0,
    activeLSTs: 0,
    totalLSTs: 0,
  })

  const [recentActivity, setRecentActivity] = useState<any[]>([])

  useEffect(() => {
    // Load statistics from localStorage
    const users = JSON.parse(localStorage.getItem("fboUsers") || "[]")
    const roles = JSON.parse(localStorage.getItem("fboRoles") || "[]")
    const permissions = JSON.parse(localStorage.getItem("fboPermissions") || "[]")
    const fuelTrucks = JSON.parse(localStorage.getItem("fboFuelTrucks") || "[]")
    const lsts = JSON.parse(localStorage.getItem("fboLSTs") || "[]")

    setStats({
      totalUsers: users.length,
      activeUsers: users.filter((user: any) => user.is_active !== false).length,
      totalRoles: roles.length,
      totalPermissions: permissions.length,
      activeFuelTrucks: fuelTrucks.filter((truck: any) => truck.is_active).length,
      totalFuelTrucks: fuelTrucks.length,
      activeLSTs: lsts.filter((lst: any) => lst.is_active).length,
      totalLSTs: lsts.length,
    })

    // Mock recent activity
    setRecentActivity([
      {
        id: 1,
        type: "user_created",
        message: "New user John Doe created",
        timestamp: "2 minutes ago",
        severity: "info",
      },
      {
        id: 2,
        type: "role_assigned",
        message: "CSR role assigned to Sarah Johnson",
        timestamp: "15 minutes ago",
        severity: "info",
      },
      {
        id: 3,
        type: "truck_maintenance",
        message: "Fuel truck FT-003 scheduled for maintenance",
        timestamp: "1 hour ago",
        severity: "warning",
      },
      {
        id: 4,
        type: "lst_performance",
        message: "LST Michael Brown completed 15 fuel orders today",
        timestamp: "2 hours ago",
        severity: "success",
      },
    ])
  }, [])

  const quickActions = [
    {
      title: "Add New User",
      description: "Create a new user account",
      href: "/admin/users",
      icon: <Users className="h-5 w-5" />,
      color: "bg-blue-500",
    },
    {
      title: "Manage Permissions",
      description: "Configure role permissions",
      href: "/admin/permissions",
      icon: <Shield className="h-5 w-5" />,
      color: "bg-green-500",
    },
    {
      title: "Add Fuel Truck",
      description: "Register a new fuel truck",
      href: "/admin/fuel-trucks",
      icon: <Truck className="h-5 w-5" />,
      color: "bg-orange-500",
    },
    {
      title: "Add LST",
      description: "Register a new line service technician",
      href: "/admin/lst-management",
      icon: <UserCheck className="h-5 w-5" />,
      color: "bg-purple-500",
    },
  ]

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "success":
        return "text-green-600 bg-green-50"
      case "warning":
        return "text-yellow-600 bg-yellow-50"
      case "error":
        return "text-red-600 bg-red-50"
      default:
        return "text-blue-600 bg-blue-50"
    }
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">Admin Dashboard</h1>
          <p className="text-muted-foreground">Manage your FBO operations and system administration</p>
        </div>
        <div className="text-sm text-muted-foreground">Last updated: {new Date().toLocaleString()}</div>
      </div>

      {/* Statistics Cards */}
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Users</CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.totalUsers}</div>
            <p className="text-xs text-muted-foreground">
              <span className="text-green-600">{stats.activeUsers} active</span>
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Roles & Permissions</CardTitle>
            <Shield className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.totalRoles}</div>
            <p className="text-xs text-muted-foreground">{stats.totalPermissions} permissions defined</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Fuel Trucks</CardTitle>
            <Truck className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.totalFuelTrucks}</div>
            <p className="text-xs text-muted-foreground">
              <span className="text-green-600">{stats.activeFuelTrucks} operational</span>
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">LST Staff</CardTitle>
            <UserCheck className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.totalLSTs}</div>
            <p className="text-xs text-muted-foreground">
              <span className="text-green-600">{stats.activeLSTs} on duty</span>
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Quick Actions */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <TrendingUp className="h-5 w-5" />
            Quick Actions
          </CardTitle>
          <CardDescription>Common administrative tasks and shortcuts</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
            {quickActions.map((action, index) => (
              <Link key={index} href={action.href}>
                <Card className="cursor-pointer transition-all hover:shadow-md hover:scale-105">
                  <CardContent className="p-4">
                    <div className="flex items-center gap-3">
                      <div className={`p-2 rounded-lg ${action.color} text-white`}>{action.icon}</div>
                      <div className="flex-1">
                        <h3 className="font-medium text-sm">{action.title}</h3>
                        <p className="text-xs text-muted-foreground">{action.description}</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </Link>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Recent Activity and System Status */}
      <div className="grid gap-6 lg:grid-cols-2">
        {/* Recent Activity */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Activity className="h-5 w-5" />
              Recent Activity
            </CardTitle>
            <CardDescription>Latest system activities and changes</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {recentActivity.map((activity) => (
                <div key={activity.id} className="flex items-start gap-3 p-3 rounded-lg border">
                  <div className={`w-2 h-2 rounded-full mt-2 ${getSeverityColor(activity.severity)}`} />
                  <div className="flex-1">
                    <p className="text-sm font-medium">{activity.message}</p>
                    <p className="text-xs text-muted-foreground">{activity.timestamp}</p>
                  </div>
                </div>
              ))}
            </div>
            <div className="mt-4 pt-4 border-t">
              <Button variant="outline" className="w-full">
                View All Activity
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* System Status */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <AlertTriangle className="h-5 w-5" />
              System Status
            </CardTitle>
            <CardDescription>Current system health and alerts</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="flex items-center justify-between p-3 rounded-lg border">
                <div className="flex items-center gap-3">
                  <div className="w-2 h-2 rounded-full bg-green-500" />
                  <span className="text-sm font-medium">User Authentication</span>
                </div>
                <Badge variant="outline" className="text-green-600">
                  Operational
                </Badge>
              </div>

              <div className="flex items-center justify-between p-3 rounded-lg border">
                <div className="flex items-center gap-3">
                  <div className="w-2 h-2 rounded-full bg-green-500" />
                  <span className="text-sm font-medium">Permission System</span>
                </div>
                <Badge variant="outline" className="text-green-600">
                  Operational
                </Badge>
              </div>

              <div className="flex items-center justify-between p-3 rounded-lg border">
                <div className="flex items-center gap-3">
                  <div className="w-2 h-2 rounded-full bg-yellow-500" />
                  <span className="text-sm font-medium">Fuel Truck Monitoring</span>
                </div>
                <Badge variant="outline" className="text-yellow-600">
                  Maintenance
                </Badge>
              </div>

              <div className="flex items-center justify-between p-3 rounded-lg border">
                <div className="flex items-center gap-3">
                  <div className="w-2 h-2 rounded-full bg-green-500" />
                  <span className="text-sm font-medium">LST Performance</span>
                </div>
                <Badge variant="outline" className="text-green-600">
                  Operational
                </Badge>
              </div>
            </div>
            <div className="mt-4 pt-4 border-t">
              <Button variant="outline" className="w-full">
                View System Details
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Management Modules Overview */}
      <div className="grid gap-6 lg:grid-cols-2">
        <Card>
          <CardHeader>
            <CardTitle>User & Permission Management</CardTitle>
            <CardDescription>Manage user accounts, roles, and access permissions</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <span className="text-sm">Active Users</span>
                <span className="font-medium">{stats.activeUsers}</span>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-sm">Defined Roles</span>
                <span className="font-medium">{stats.totalRoles}</span>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-sm">Permissions</span>
                <span className="font-medium">{stats.totalPermissions}</span>
              </div>
            </div>
            <div className="mt-4 flex gap-2">
              <Button asChild size="sm" className="flex-1">
                <Link href="/admin/users">Manage Users</Link>
              </Button>
              <Button asChild variant="outline" size="sm" className="flex-1">
                <Link href="/admin/permissions">Permissions</Link>
              </Button>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Operations Management</CardTitle>
            <CardDescription>Oversee fuel trucks and line service technicians</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <span className="text-sm">Active Fuel Trucks</span>
                <span className="font-medium">{stats.activeFuelTrucks}</span>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-sm">On-Duty LSTs</span>
                <span className="font-medium">{stats.activeLSTs}</span>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-sm">Operational Status</span>
                <Badge variant="outline" className="text-green-600">
                  Normal
                </Badge>
              </div>
            </div>
            <div className="mt-4 flex gap-2">
              <Button asChild size="sm" className="flex-1">
                <Link href="/admin/fuel-trucks">Fuel Trucks</Link>
              </Button>
              <Button asChild variant="outline" size="sm" className="flex-1">
                <Link href="/admin/lst-management">LST Management</Link>
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}

================
File: frontend/app/admin/fuel-trucks/loading.tsx
================
export default function Loading() {
  return null
}

================
File: frontend/app/admin/lst-management/loading.tsx
================
export default function Loading() {
  return null
}

================
File: frontend/app/admin/permissions/loading.tsx
================
export default function Loading() {
  return null
}

================
File: frontend/app/admin/users/loading.tsx
================
export default function Loading() {
  return null
}

================
File: frontend/app/admin/users/page.tsx.backup
================
"use client"

import { useState, useEffect } from "react"
import { Users, UserPlus, Search, Filter, MoreHorizontal, Edit, Trash2, Shield, Eye, EyeOff } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { User as ServiceUser, getAllUsers, createUser, updateUser, deleteUser, UserCreateRequest, UserUpdateRequest } from "@/app/services/user-service" // Import service functions
import { toast } from "sonner" // For notifications

// Temporary role mapping (string to ID)
// In a real app, these would come from an API (e.g., /admin/roles)
const roleStringToIdMap: Record<string, number> = {
  admin: 1,
  csr: 2,
  fueler: 3,
  manager: 4, // Assuming 'manager' role exists with ID 4
  lst: 5, // Assuming 'lst' (Line Service Technician) role exists with ID 5
  member: 6, // Assuming 'member' role exists with ID 6
}

// Removed roleIdToStringMap as it's unused

export default function UserManagement() {
  const [users, setUsers] = useState<ServiceUser[]>([]) // Use ServiceUser type
  const [filteredUsers, setFilteredUsers] = useState<ServiceUser[]>([]) // Use ServiceUser type
  const [searchTerm, setSearchTerm] = useState("")
  const [statusFilter, setStatusFilter] = useState<"all" | "active" | "inactive">("all") // Typed status filter
  const [roleFilter, setRoleFilter] = useState("all")
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)
  const [selectedUser, setSelectedUser] = useState<ServiceUser | null>(null) // Use ServiceUser type
  const [showPassword, setShowPassword] = useState(false)
  const [isLoadingUsers, setIsLoadingUsers] = useState(true)
  const [isSubmitting, setIsSubmitting] = useState(false) // For form submissions

  const [newUser, setNewUser] = useState({
    name: "",
    email: "",
    password: "",
    role: "csr", // This will be a string like "csr", to be mapped to role_ids
    is_active: true, // Changed from status
  })

  // This list is for display in dropdowns. The actual role IDs are handled by roleStringToIdMap.
  const displayRoles = [
    { value: "admin", label: "Administrator" },
    { value: "csr", label: "Customer Service Representative" },
    { value: "fueler", label: "Fueling Agent" },
    { value: "manager", label: "Manager" },
    { value: "lst", label: "Line Service Technician" },
    { value: "member", label: "Member" },
  ]

  const fetchUsers = async () => {
    setIsLoadingUsers(true)
    try {
      const fetchedUsers = await getAllUsers()
      setUsers(fetchedUsers)
      setFilteredUsers(fetchedUsers) // Initialize filteredUsers
    } catch (error) {
      console.error("Failed to fetch users:", error)
      toast.error("Failed to load users. Please try again.")
    } finally {
      setIsLoadingUsers(false)
    }
  }

  useEffect(() => {
    fetchUsers()
  }, [])

  useEffect(() => {
    let filtered = users

    if (searchTerm) {
      filtered = filtered.filter(
        (user) =>
          (user.name && user.name.toLowerCase().includes(searchTerm.toLowerCase())) ||
          user.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
          (user.username && user.username.toLowerCase().includes(searchTerm.toLowerCase())),
      )
    }

    if (statusFilter !== "all") {
      const isActiveFilter = statusFilter === "active"
      filtered = filtered.filter((user) => user.is_active === isActiveFilter)
    }

    if (roleFilter !== "all") {
      filtered = filtered.filter((user) => user.roles.includes(roleFilter))
    }

    setFilteredUsers(filtered)
  }, [users, searchTerm, statusFilter, roleFilter])

  const handleCreateUser = async () => {
    setIsSubmitting(true)
    const roleId = roleStringToIdMap[newUser.role]
    if (!roleId) {
      toast.error(`Invalid role selected: ${newUser.role}. Please select a valid role.`)
      setIsSubmitting(false)
      return
    }

    const payload: UserCreateRequest = {
      name: newUser.name,
      email: newUser.email,
      password: newUser.password,
      role_ids: [roleId], // Temporary mapping
      is_active: newUser.is_active,
    }

    try {
      await createUser(payload)
      toast.success("User created successfully!")
      fetchUsers() // Refresh user list
      setNewUser({ name: "", email: "", password: "", role: "csr", is_active: true })
      setIsCreateDialogOpen(false)
    } catch (error: any) {
      console.error("Failed to create user:", error)
      toast.error(`Failed to create user: ${error.message || "Unknown error"}`)
    } finally {
      setIsSubmitting(false)
    }
  }

  const handleEditUser = async () => {
    if (!selectedUser) return
    setIsSubmitting(true)

    const roleId = roleStringToIdMap[selectedUser.roles[0]] // Assuming roles[0] is the primary role string for editing
    if (!roleId && selectedUser.roles.length > 0) {
      // Check if the role string exists in our map
      toast.error(`Invalid role detected: ${selectedUser.roles[0]}. Please select a valid role.`)
      setIsSubmitting(false)
      return
    }

    const payload: UserUpdateRequest = {
      name: selectedUser.name,
      email: selectedUser.email,
      is_active: selectedUser.is_active,
      // Only include role_ids if a valid role was found/selected
      ...(roleId && { role_ids: [roleId] }),
      // Password update would be handled here if a password field is added to the edit form
    }

    try {
      await updateUser(selectedUser.id, payload)
      toast.success("User updated successfully!")
      fetchUsers() // Refresh user list
      setIsEditDialogOpen(false)
      setSelectedUser(null)
    } catch (error: any) {
      console.error("Failed to update user:", error)
      toast.error(`Failed to update user: ${error.message || "Unknown error"}`)
    } finally {
      setIsSubmitting(false)
    }
  }

  const handleDeleteUser = async (userId: number) => {
    // Optional: Add a confirmation dialog here before deleting
    try {
      await deleteUser(userId)
      toast.success("User deleted successfully!")
      fetchUsers() // Refresh user list
    } catch (error: any) {
      console.error("Failed to delete user:", error)
      toast.error(`Failed to delete user: ${error.message || "Unknown error"}`)
    }
  }

  const getRoleLabel = (roleValue: string) => {
    return displayRoles.find((r) => r.value === roleValue)?.label || roleValue
  }

  const getStatusColor = (isActive: boolean) => {
    return isActive ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800"
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">User Management</h1>
          <p className="text-muted-foreground">Manage user accounts, roles, and permissions</p>
        </div>
        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
          <DialogTrigger asChild>
            <Button className="gap-2">
              <UserPlus className="h-4 w-4" />
              Add User
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[425px]">
            <DialogHeader>
              <DialogTitle>Create New User</DialogTitle>
              <DialogDescription>Add a new user to the system with appropriate role and permissions.</DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="grid gap-2">
                <Label htmlFor="name">Full Name</Label>
                <Input
                  id="name"
                  value={newUser.name}
                  onChange={(e) => setNewUser({ ...newUser, name: e.target.value })}
                  placeholder="John Doe"
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="email">Email</Label>
                <Input
                  id="email"
                  type="email"
                  value={newUser.email}
                  onChange={(e) => setNewUser({ ...newUser, email: e.target.value })}
                  placeholder="john@example.com"
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="password">Password</Label>
                <div className="relative">
                  <Input
                    id="password"
                    type={showPassword ? "text" : "password"}
                    value={newUser.password}
                    onChange={(e) => setNewUser({ ...newUser, password: e.target.value })}
                    placeholder="••••••••"
                  />
                  <Button
                    type="button"
                    variant="ghost"
                    size="icon"
                    className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                    onClick={() => setShowPassword(!showPassword)}
                  >
                    {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                  </Button>
                </div>
              </div>
              <div className="grid gap-2">
                <Label htmlFor="role">Role</Label>
                <Select value={newUser.role} onValueChange={(value) => setNewUser({ ...newUser, role: value })}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select a role" />
                  </SelectTrigger>
                  <SelectContent>
                    {displayRoles.map((role) => (
                      <SelectItem key={role.value} value={role.value}>
                        {role.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              {/* Add is_active select for create dialog */}
              <div className="grid gap-2">
                <Label htmlFor="status-create">Status</Label>
                <Select
                  value={newUser.is_active ? "active" : "inactive"}
                  onValueChange={(value) => setNewUser({ ...newUser, is_active: value === "active" })}
                >
                  <SelectTrigger id="status-create">
                    <SelectValue placeholder="Select status" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="active">Active</SelectItem>
                    <SelectItem value="inactive">Inactive</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            <DialogFooter>
              <Button type="button" variant="outline" onClick={() => setIsCreateDialogOpen(false)} disabled={isSubmitting}>
                Cancel
              </Button>
              <Button type="button" onClick={handleCreateUser} disabled={isSubmitting}>
                {isSubmitting ? "Creating..." : "Create User"}
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>

      {/* Filters and Search */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Filter className="h-5 w-5" />
            Filters
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col gap-4 md:flex-row md:items-center">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
              <Input
                placeholder="Search users by name or email..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10"
              />
            </div>
            <Select value={statusFilter} onValueChange={(value: "all" | "active" | "inactive") => setStatusFilter(value)}>
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="Filter by status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Status</SelectItem>
                <SelectItem value="active">Active</SelectItem>
                <SelectItem value="inactive">Inactive</SelectItem>
              </SelectContent>
            </Select>
            <Select value={roleFilter} onValueChange={setRoleFilter}>
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="Filter by role" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Roles</SelectItem>
                {displayRoles.map((role) => (
                  <SelectItem key={role.value} value={role.value}>
                    {role.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </CardContent>
      </Card>

      {/* Users Table */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Users className="h-5 w-5" />
            Users ({filteredUsers.length})
          </CardTitle>
          <CardDescription>Manage user accounts and their access permissions</CardDescription>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>User</TableHead>
                <TableHead>Roles</TableHead> {/* Changed from Role */}
                <TableHead>Status</TableHead>
                {/* <TableHead>Last Login</TableHead>  Removed as not in new User interface */}
                <TableHead>Created At</TableHead> {/* Changed from Created */}
                <TableHead className="text-right">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {isLoadingUsers ? (
                <TableRow>
                  <TableCell colSpan={5} className="text-center">
                    Loading users...
                  </TableCell>
                </TableRow>
              ) : filteredUsers.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={5} className="text-center">
                    No users found.
                  </TableCell>
                </TableRow>
              ) : (
                filteredUsers.map((user) => (
                  <TableRow key={user.id}>
                    <TableCell>
                      <div>
                        <div className="font-medium">{user.name || user.username || "N/A"}</div>
                        <div className="text-sm text-muted-foreground">{user.email}</div>
                      </div>
                    </TableCell>
                    <TableCell>
                      {/* Display multiple roles if available */}
                      {user.roles.map((roleStr) => (
                        <Badge key={roleStr} variant="outline" className="mr-1 mb-1">
                          {getRoleLabel(roleStr)}
                        </Badge>
                      ))}
                    </TableCell>
                    <TableCell>
                      <Badge className={getStatusColor(user.is_active)}>{user.is_active ? "Active" : "Inactive"}</Badge>
                    </TableCell>
                    {/* <TableCell>{user.lastLogin ? new Date(user.lastLogin).toLocaleDateString() : "N/A"}</TableCell> */}
                    <TableCell>{user.created_at ? new Date(user.created_at).toLocaleDateString() : "N/A"}</TableCell>
                    <TableCell className="text-right">
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button variant="ghost" className="h-8 w-8 p-0">
                            <MoreHorizontal className="h-4 w-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                          <DropdownMenuLabel>Actions</DropdownMenuLabel>
                          <DropdownMenuItem
                            onClick={() => {
                              // For edit, we need to map roles array back to a single string for the Select
                              // This assumes the first role is the primary one for editing purposes.
                              const roleForEdit = user.roles.length > 0 ? user.roles[0] : "";
                              setSelectedUser({ ...user, roles: [roleForEdit] }); // Store as array for consistency, but Select uses first element
                              setIsEditDialogOpen(true)
                            }}
                          >
                            <Edit className="mr-2 h-4 w-4" />
                            Edit
                          </DropdownMenuItem>
                          <DropdownMenuItem>
                            <Shield className="mr-2 h-4 w-4" />
                            Manage Roles (Future)
                          </DropdownMenuItem>
                          <DropdownMenuSeparator />
                          <DropdownMenuItem className="text-destructive hover:text-destructive-foreground hover:bg-destructive" onClick={() => handleDeleteUser(user.id)}>
                            <Trash2 className="mr-2 h-4 w-4" />
                            Delete
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </TableCell>
                  </TableRow>
                ))
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>

      {/* Edit User Dialog */}
      <Dialog open={isEditDialogOpen} onOpenChange={(isOpen) => {
        setIsEditDialogOpen(isOpen);
        if (!isOpen) setSelectedUser(null); // Clear selected user when dialog closes
      }}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Edit User</DialogTitle>
            <DialogDescription>Update user information and settings.</DialogDescription>
          </DialogHeader>
          {selectedUser && (
            <div className="grid gap-4 py-4">
              <div className="grid gap-2">
                <Label htmlFor="edit-name">Full Name</Label>
                <Input
                  id="edit-name"
                  value={selectedUser.name || ""}
                  onChange={(e) => setSelectedUser({ ...selectedUser, name: e.target.value })}
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="edit-email">Email</Label>
                <Input
                  id="edit-email"
                  type="email"
                  value={selectedUser.email}
                  onChange={(e) => setSelectedUser({ ...selectedUser, email: e.target.value })}
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="edit-role">Role</Label>
                <Select
                  value={selectedUser.roles[0] || ""} // Edit form uses the first role string
                  onValueChange={(value) => setSelectedUser({ ...selectedUser, roles: [value] })}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select a role" />
                  </SelectTrigger>
                  <SelectContent>
                    {displayRoles.map((role) => (
                      <SelectItem key={role.value} value={role.value}>
                        {role.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              <div className="grid gap-2">
                <Label htmlFor="edit-status">Status</Label>
                <Select
                  value={selectedUser.is_active ? "active" : "inactive"}
                  onValueChange={(value) => setSelectedUser({ ...selectedUser, is_active: value === "active" })}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select status" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="active">Active</SelectItem>
                    <SelectItem value="inactive">Inactive</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              {/* Optionally, add password change field here */}
            </div>
          )}
          <DialogFooter>
            <Button type="button" variant="outline" onClick={() => setIsEditDialogOpen(false)} disabled={isSubmitting}>
              Cancel
            </Button>
            <Button type="button" onClick={handleEditUser} disabled={isSubmitting}>
              {isSubmitting ? "Saving..." : "Save Changes"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}

================
File: frontend/app/admin/users/page.tsx.tmp
================
"use client"

import { useState, useEffect } from "react"
import { Users, UserPlus, Search, Filter, MoreHorizontal, Edit, Trash2, Shield, Eye, EyeOff } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { User as ServiceUser, getAllUsers, createUser, updateUser, deleteUser, UserCreateRequest, UserUpdateRequest } from "@/app/services/user-service" // Import service functions
import { toast } from "sonner" // For notifications

// Temporary role mapping (string to ID)
// In a real app, these would come from an API (e.g., /admin/roles)
const roleStringToIdMap: Record<string, number> = {
  admin: 1,
  csr: 2,
  fueler: 3,
  manager: 4, // Assuming 'manager' role exists with ID 4
  lst: 5, // Assuming 'lst' (Line Service Technician) role exists with ID 5
  member: 6, // Assuming 'member' role exists with ID 6
}

// Removed roleIdToStringMap as it's unused

export default function UserManagement() {
  const [users, setUsers] = useState<ServiceUser[]>([]) // Use ServiceUser type
  const [filteredUsers, setFilteredUsers] = useState<ServiceUser[]>([]) // Use ServiceUser type
  const [searchTerm, setSearchTerm] = useState("")
  const [statusFilter, setStatusFilter] = useState<"all" | "active" | "inactive">("all") // Typed status filter
  const [roleFilter, setRoleFilter] = useState("all")
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)
  const [selectedUser, setSelectedUser] = useState<ServiceUser | null>(null) // Use ServiceUser type
  const [showPassword, setShowPassword] = useState(false)
  const [isLoadingUsers, setIsLoadingUsers] = useState(true)
  const [isSubmitting, setIsSubmitting] = useState(false) // For form submissions

  const [newUser, setNewUser] = useState({
    name: "",
    email: "",
    password: "",
    role: "csr", // This will be a string like "csr", to be mapped to role_ids
    is_active: true, // Changed from status
  })

  // This list is for display in dropdowns. The actual role IDs are handled by roleStringToIdMap.
  const displayRoles = [
    { value: "admin", label: "Administrator" },
    { value: "csr", label: "Customer Service Representative" },
    { value: "fueler", label: "Fueling Agent" },
    { value: "manager", label: "Manager" },
    { value: "lst", label: "Line Service Technician" },
    { value: "member", label: "Member" },
  ]

  const fetchUsers = async () => {
    setIsLoadingUsers(true)
    try {
      const fetchedUsers = await getAllUsers()
      setUsers(fetchedUsers)
      setFilteredUsers(fetchedUsers) // Initialize filteredUsers
    } catch (error) {
      console.error("Failed to fetch users:", error)
      toast.error("Failed to load users. Please try again.")
    } finally {
      setIsLoadingUsers(false)
    }
  }

  useEffect(() => {
    fetchUsers()
  }, [])

  useEffect(() => {
    let filtered = users

    if (searchTerm) {
      filtered = filtered.filter(
        (user) =>
          (user.name && user.name.toLowerCase().includes(searchTerm.toLowerCase())) ||
          user.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
          (user.username && user.username.toLowerCase().includes(searchTerm.toLowerCase())),
      )
    }

    if (statusFilter !== "all") {
      const isActiveFilter = statusFilter === "active"
      filtered = filtered.filter((user) => user.is_active === isActiveFilter)
    }

    if (roleFilter !== "all") {
      filtered = filtered.filter((user) => user.roles.includes(roleFilter))
    }

    setFilteredUsers(filtered)
  }, [users, searchTerm, statusFilter, roleFilter])

  const handleCreateUser = async () => {
    setIsSubmitting(true)
    const roleId = roleStringToIdMap[newUser.role]
    if (!roleId) {
      toast.error(`Invalid role selected: ${newUser.role}. Please select a valid role.`)
      setIsSubmitting(false)
      return
    }

    const payload: UserCreateRequest = {
      name: newUser.name,
      email: newUser.email,
      password: newUser.password,
      role_ids: [roleId], // Temporary mapping
      is_active: newUser.is_active,
    }

    try {
      await createUser(payload)
      toast.success("User created successfully!")
      fetchUsers() // Refresh user list
      setNewUser({ name: "", email: "", password: "", role: "csr", is_active: true })
      setIsCreateDialogOpen(false)
    } catch (error: any) {
      console.error("Failed to create user:", error)
      toast.error(`Failed to create user: ${error.message || "Unknown error"}`)
    } finally {
      setIsSubmitting(false)
    }
  }

  const handleEditUser = async () => {
    if (!selectedUser) return
    setIsSubmitting(true)

    const roleId = roleStringToIdMap[selectedUser.roles[0]] // Assuming roles[0] is the primary role string for editing
    if (!roleId && selectedUser.roles.length > 0) {
      // Check if the role string exists in our map
      toast.error(`Invalid role detected: ${selectedUser.roles[0]}. Please select a valid role.`)
      setIsSubmitting(false)
      return
    }

    const payload: UserUpdateRequest = {
      name: selectedUser.name,
      email: selectedUser.email,
      is_active: selectedUser.is_active,
      // Only include role_ids if a valid role was found/selected
      ...(roleId && { role_ids: [roleId] }),
      // Password update would be handled here if a password field is added to the edit form
    }

    try {
      await updateUser(selectedUser.id, payload)
      toast.success("User updated successfully!")
      fetchUsers() // Refresh user list
      setIsEditDialogOpen(false)
      setSelectedUser(null)
    } catch (error: any) {
      console.error("Failed to update user:", error)
      toast.error(`Failed to update user: ${error.message || "Unknown error"}`)
    } finally {
      setIsSubmitting(false)
    }
  }

  const handleDeleteUser = async (userId: number) => {
    // Optional: Add a confirmation dialog here before deleting
    try {
      await deleteUser(userId)
      toast.success("User deleted successfully!")
      fetchUsers() // Refresh user list
    } catch (error: any) {
      console.error("Failed to delete user:", error)
      toast.error(`Failed to delete user: ${error.message || "Unknown error"}`)
    }
  }

  const getRoleLabel = (roleValue: string) => {
    return displayRoles.find((r) => r.value === roleValue)?.label || roleValue
  }

  const getStatusColor = (isActive: boolean) => {
    return isActive ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800"
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">User Management</h1>
          <p className="text-muted-foreground">Manage user accounts, roles, and permissions</p>
        </div>
        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
          <DialogTrigger asChild>
            <Button className="gap-2">
              <UserPlus className="h-4 w-4" />
              Add User
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[425px]">
            <DialogHeader>
              <DialogTitle>Create New User</DialogTitle>
              <DialogDescription>Add a new user to the system with appropriate role and permissions.</DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="grid gap-2">
                <Label htmlFor="name">Full Name</Label>
                <Input
                  id="name"
                  value={newUser.name}
                  onChange={(e) => setNewUser({ ...newUser, name: e.target.value })}
                  placeholder="John Doe"
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="email">Email</Label>
                <Input
                  id="email"
                  type="email"
                  value={newUser.email}
                  onChange={(e) => setNewUser({ ...newUser, email: e.target.value })}
                  placeholder="john@example.com"
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="password">Password</Label>
                <div className="relative">
                  <Input
                    id="password"
                    type={showPassword ? "text" : "password"}
                    value={newUser.password}
                    onChange={(e) => setNewUser({ ...newUser, password: e.target.value })}
                    placeholder="••••••••"
                  />
                  <Button
                    type="button"
                    variant="ghost"
                    size="icon"
                    className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                    onClick={() => setShowPassword(!showPassword)}
                  >
                    {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                  </Button>
                </div>
              </div>
              <div className="grid gap-2">
                <Label htmlFor="role">Role</Label>
                <Select value={newUser.role} onValueChange={(value) => setNewUser({ ...newUser, role: value })}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select a role" />
                  </SelectTrigger>
                  <SelectContent>
                    {displayRoles.map((role) => (
                      <SelectItem key={role.value} value={role.value}>
                        {role.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              {/* Add is_active select for create dialog */}
              <div className="grid gap-2">
                <Label htmlFor="status-create">Status</Label>
                <Select
                  value={newUser.is_active ? "active" : "inactive"}
                  onValueChange={(value) => setNewUser({ ...newUser, is_active: value === "active" })}
                >
                  <SelectTrigger id="status-create">
                    <SelectValue placeholder="Select status" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="active">Active</SelectItem>
                    <SelectItem value="inactive">Inactive</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            <DialogFooter>
              <Button type="button" variant="outline" onClick={() => setIsCreateDialogOpen(false)} disabled={isSubmitting}>
                Cancel
              </Button>
              <Button type="button" onClick={handleCreateUser} disabled={isSubmitting}>
                {isSubmitting ? "Creating..." : "Create User"}
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>

      {/* Filters and Search */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Filter className="h-5 w-5" />
            Filters
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col gap-4 md:flex-row md:items-center">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
              <Input
                placeholder="Search users by name or email..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10"
              />
            </div>
            <Select value={statusFilter} onValueChange={(value: "all" | "active" | "inactive") => setStatusFilter(value)}>
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="Filter by status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Status</SelectItem>
                <SelectItem value="active">Active</SelectItem>
                <SelectItem value="inactive">Inactive</SelectItem>
              </SelectContent>
            </Select>
            <Select value={roleFilter} onValueChange={setRoleFilter}>
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="Filter by role" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Roles</SelectItem>
                {displayRoles.map((role) => (
                  <SelectItem key={role.value} value={role.value}>
                    {role.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </CardContent>
      </Card>

      {/* Users Table */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Users className="h-5 w-5" />
            Users ({filteredUsers.length})
          </CardTitle>
          <CardDescription>Manage user accounts and their access permissions</CardDescription>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>User</TableHead>
                <TableHead>Roles</TableHead> {/* Changed from Role */}
                <TableHead>Status</TableHead>
                {/* <TableHead>Last Login</TableHead>  Removed as not in new User interface */}
                <TableHead>Created At</TableHead> {/* Changed from Created */}
                <TableHead className="text-right">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {isLoadingUsers ? (
                <TableRow>
                  <TableCell colSpan={5} className="text-center">
                    Loading users...
                  </TableCell>
                </TableRow>
              ) : filteredUsers.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={5} className="text-center">
                    No users found.
                  </TableCell>
                </TableRow>
              ) : (
                filteredUsers.map((user) => (
                  <TableRow key={user.id}>
                    <TableCell>
                      <div>
                        <div className="font-medium">{user.name || user.username || "N/A"}</div>
                        <div className="text-sm text-muted-foreground">{user.email}</div>
                      </div>
                    </TableCell>
                    <TableCell>
                      {/* Display multiple roles if available */}
                      {user.roles.map((roleStr) => (
                        <Badge key={roleStr} variant="outline" className="mr-1 mb-1">
                          {getRoleLabel(roleStr)}
                        </Badge>
                      ))}
                    </TableCell>
                    <TableCell>
                      <Badge className={getStatusColor(user.is_active)}>{user.is_active ? "Active" : "Inactive"}</Badge>
                    </TableCell>
                    {/* <TableCell>{user.lastLogin ? new Date(user.lastLogin).toLocaleDateString() : "N/A"}</TableCell> */}
                    <TableCell>{user.created_at ? new Date(user.created_at).toLocaleDateString() : "N/A"}</TableCell>
                    <TableCell className="text-right">
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button variant="ghost" className="h-8 w-8 p-0">
                            <MoreHorizontal className="h-4 w-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                          <DropdownMenuLabel>Actions</DropdownMenuLabel>
                          <DropdownMenuItem
                            onClick={() => {
                              // For edit, we need to map roles array back to a single string for the Select
                              // This assumes the first role is the primary one for editing purposes.
                              const roleForEdit = user.roles.length > 0 ? user.roles[0] : "";
                              setSelectedUser({ ...user, roles: [roleForEdit] }); // Store as array for consistency, but Select uses first element
                              setIsEditDialogOpen(true)
                            }}
                          >
                            <Edit className="mr-2 h-4 w-4" />
                            Edit
                          </DropdownMenuItem>
                          <DropdownMenuItem>
                            <Shield className="mr-2 h-4 w-4" />
                            Manage Roles (Future)
                          </DropdownMenuItem>
                          <DropdownMenuSeparator />
                          <DropdownMenuItem className="text-destructive hover:text-destructive-foreground hover:bg-destructive" onClick={() => handleDeleteUser(user.id)}>
                            <Trash2 className="mr-2 h-4 w-4" />
                            Delete
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </TableCell>
                  </TableRow>
                ))
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>

      {/* Edit User Dialog */}
      <Dialog open={isEditDialogOpen} onOpenChange={(isOpen) => {
        setIsEditDialogOpen(isOpen);
        if (!isOpen) setSelectedUser(null); // Clear selected user when dialog closes
      }}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Edit User</DialogTitle>
            <DialogDescription>Update user information and settings.</DialogDescription>
          </DialogHeader>
          {selectedUser && (
            <div className="grid gap-4 py-4">
              <div className="grid gap-2">
                <Label htmlFor="edit-name">Full Name</Label>
                <Input
                  id="edit-name"
                  value={selectedUser.name || ""}
                  onChange={(e) => setSelectedUser({ ...selectedUser, name: e.target.value })}
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="edit-email">Email</Label>
                <Input
                  id="edit-email"
                  type="email"
                  value={selectedUser.email}
                  onChange={(e) => setSelectedUser({ ...selectedUser, email: e.target.value })}
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="edit-role">Role</Label>
                <Select
                  value={selectedUser.roles[0] || ""} // Edit form uses the first role string
                  onValueChange={(value) => setSelectedUser({ ...selectedUser, roles: [value] })}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select a role" />
                  </SelectTrigger>
                  <SelectContent>
                    {displayRoles.map((role) => (
                      <SelectItem key={role.value} value={role.value}>
                        {role.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              <div className="grid gap-2">
                <Label htmlFor="edit-status">Status</Label>
                <Select
                  value={selectedUser.is_active ? "active" : "inactive"}
                  onValueChange={(value) => setSelectedUser({ ...selectedUser, is_active: value === "active" })}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select status" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="active">Active</SelectItem>
                    <SelectItem value="inactive">Inactive</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              {/* Optionally, add password change field here */}
            </div>
          )}
          <DialogFooter>
            <Button type="button" variant="outline" onClick={() => setIsEditDialogOpen(false)} disabled={isSubmitting}>
              Cancel
            </Button>
            <Button type="button" onClick={handleEditUser} disabled={isSubmitting}>
              {isSubmitting ? "Saving..." : "Save Changes"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}

================
File: frontend/app/components/access-denied.tsx
================
import { Shield } from "lucide-react"
import { Button } from "@/components/ui/button"
import Link from "next/link"

export default function AccessDenied() {
  return (
    <div className="flex flex-col items-center justify-center min-h-screen p-4 text-center">
      <div className="rounded-full bg-red-100 p-3 mb-4">
        <Shield className="h-12 w-12 text-red-500" />
      </div>
      <h1 className="text-2xl font-bold mb-2">Access Denied</h1>
      <p className="text-muted-foreground mb-6 max-w-md">
        You don't have permission to access this page. Please contact your administrator if you believe this is an
        error.
      </p>
      <div className="flex gap-4">
        <Button asChild>
          <Link href="/">Return to Home</Link>
        </Button>
        <Button variant="outline" asChild>
          <Link href="/login">Login with Different Account</Link>
        </Button>
      </div>
    </div>
  )
}

================
File: frontend/app/components/fee-calculator.tsx
================
"use client"

import type React from "react"
import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import {
  calculateFees,
  type FeeCalculationResult,
  getAllFeeStructures,
  type FeeStructure,
} from "../services/fee-service"
import { getAllAircraft, type Aircraft } from "../services/aircraft-service"
import { AlertCircle, Calculator, DollarSign } from "lucide-react"
import { usePermissions } from "../contexts/permission-context"

interface FeeCalculatorProps {
  aircraftId?: string
  customerId?: string
  fuelType?: string
  quantity?: number
  onCalculationComplete?: (result: FeeCalculationResult) => void
  className?: string
}

const FeeCalculator: React.FC<FeeCalculatorProps> = ({
  aircraftId: initialAircraftId = "",
  customerId: initialCustomerId = "",
  fuelType: initialFuelType = "",
  quantity: initialQuantity = 0,
  onCalculationComplete,
  className,
}) => {
  const [aircraftId, setAircraftId] = useState(initialAircraftId)
  const [customerId, setCustomerId] = useState(initialCustomerId)
  const [fuelType, setFuelType] = useState(initialFuelType)
  const [quantity, setQuantity] = useState(initialQuantity.toString())
  const [feeStructureId, setFeeStructureId] = useState<string>("")

  const [isCalculating, setIsCalculating] = useState(false)
  const [calculationResult, setCalculationResult] = useState<FeeCalculationResult | null>(null)
  const [error, setError] = useState<string | null>(null)

  const [aircraft, setAircraft] = useState<Aircraft[]>([])
  const [feeStructures, setFeeStructures] = useState<FeeStructure[]>([])
  const [isLoading, setIsLoading] = useState(true)

  const { can } = usePermissions()

  // Load aircraft and fee structures
  useEffect(() => {
    const loadData = async () => {
      setIsLoading(true)
      try {
        const [aircraftData, feeStructuresData] = await Promise.all([getAllAircraft(), getAllFeeStructures()])

        setAircraft(aircraftData)
        setFeeStructures(feeStructuresData)

        // Set default fee structure if available
        const defaultStructure = feeStructuresData.find((fs) => fs.isDefault)
        if (defaultStructure) {
          setFeeStructureId(defaultStructure.id)
        }
      } catch (err) {
        console.error("Error loading data:", err)
        setError("Failed to load required data. Please try again.")
      } finally {
        setIsLoading(false)
      }
    }

    loadData()
  }, [])

  const handleCalculate = async () => {
    if (!aircraftId) {
      setError("Please select an aircraft")
      return
    }

    if (!customerId) {
      setError("Please enter a customer ID")
      return
    }

    if (!fuelType) {
      setError("Please select a fuel type")
      return
    }

    if (!quantity || Number.parseFloat(quantity) <= 0) {
      setError("Please enter a valid quantity")
      return
    }

    setError(null)
    setIsCalculating(true)

    try {
      const result = await calculateFees({
        aircraftId,
        customerId,
        fuelType,
        quantity: Number.parseFloat(quantity),
        feeStructureId: feeStructureId || undefined,
      })

      setCalculationResult(result)

      if (onCalculationComplete) {
        onCalculationComplete(result)
      }
    } catch (err) {
      console.error("Calculation error:", err)
      setError("Failed to calculate fees. Please try again.")
      setCalculationResult(null)
    } finally {
      setIsCalculating(false)
    }
  }

  // Format currency
  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat("en-US", {
      style: "currency",
      currency: "USD",
    }).format(amount)
  }

  // Check if user has permission to calculate fees
  const hasCalculationPermission = can("VIEW_BILLING_INFO")

  if (isLoading) {
    return (
      <Card className={className}>
        <CardContent className="flex justify-center items-center py-6">
          <div className="h-8 w-8 border-4 border-primary border-t-transparent rounded-full animate-spin"></div>
          <span className="ml-2">Loading...</span>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card className={className}>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Calculator className="h-5 w-5 text-primary" />
          Fee Calculator
        </CardTitle>
        <CardDescription>Calculate fuel fees based on aircraft, fuel type, and quantity</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="aircraft">Aircraft</Label>
              <Select
                value={aircraftId}
                onValueChange={setAircraftId}
                disabled={isCalculating || !hasCalculationPermission}
              >
                <SelectTrigger id="aircraft">
                  <SelectValue placeholder="Select aircraft" />
                </SelectTrigger>
                <SelectContent>
                  {aircraft.map((a) => (
                    <SelectItem key={a.id} value={a.id}>
                      {a.tailNumber} - {a.model}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="customerId">Customer ID</Label>
              <Input
                id="customerId"
                value={customerId}
                onChange={(e) => setCustomerId(e.target.value)}
                disabled={isCalculating || !hasCalculationPermission}
              />
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="fuelType">Fuel Type</Label>
              <Select
                value={fuelType}
                onValueChange={setFuelType}
                disabled={isCalculating || !hasCalculationPermission}
              >
                <SelectTrigger id="fuelType">
                  <SelectValue placeholder="Select fuel type" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Jet A">Jet A</SelectItem>
                  <SelectItem value="Jet A-1">Jet A-1</SelectItem>
                  <SelectItem value="Avgas 100LL">Avgas 100LL</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="quantity">Quantity (gallons)</Label>
              <Input
                id="quantity"
                type="number"
                min="0"
                step="0.1"
                value={quantity}
                onChange={(e) => setQuantity(e.target.value)}
                disabled={isCalculating || !hasCalculationPermission}
              />
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="feeStructure">Fee Structure</Label>
            <Select
              value={feeStructureId}
              onValueChange={setFeeStructureId}
              disabled={isCalculating || !hasCalculationPermission}
            >
              <SelectTrigger id="feeStructure">
                <SelectValue placeholder="Select fee structure" />
              </SelectTrigger>
              <SelectContent>
                {feeStructures.map((fs) => (
                  <SelectItem key={fs.id} value={fs.id}>
                    {fs.name} {fs.isDefault ? "(Default)" : ""}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          {!hasCalculationPermission && (
            <p className="text-xs text-amber-500 mt-1">You don't have permission to calculate fees</p>
          )}

          {error && (
            <div className="bg-red-500/10 border border-red-500/50 rounded-md p-3 flex items-start gap-2">
              <AlertCircle className="h-5 w-5 text-red-500 mt-0.5 flex-shrink-0" />
              <p className="text-red-500 text-sm">{error}</p>
            </div>
          )}

          <Button onClick={handleCalculate} disabled={isCalculating || !hasCalculationPermission} className="w-full">
            {isCalculating ? (
              <>
                <span className="mr-2">Calculating</span>
                <div className="h-4 w-4 border-2 border-current border-t-transparent rounded-full animate-spin"></div>
              </>
            ) : (
              <>
                <DollarSign className="h-4 w-4 mr-2" />
                Calculate Fees
              </>
            )}
          </Button>

          {calculationResult && (
            <div className="border rounded-md p-4 bg-muted/50">
              <h3 className="font-medium text-lg mb-3 flex items-center gap-2">
                <DollarSign className="h-5 w-5 text-primary" />
                Fee Calculation Result
              </h3>

              <div className="space-y-3">
                <div className="grid grid-cols-2 gap-2">
                  <div className="text-sm font-medium">Base Rate:</div>
                  <div className="text-sm">{formatCurrency(calculationResult.breakdown.baseRate)} per gallon</div>
                </div>
                <div className="grid grid-cols-2 gap-2">
                  <div className="text-sm font-medium">Quantity:</div>
                  <div className="text-sm">{calculationResult.breakdown.quantity} gallons</div>
                </div>
                <div className="grid grid-cols-2 gap-2">
                  <div className="text-sm font-medium">Subtotal:</div>
                  <div className="text-sm">{formatCurrency(calculationResult.subtotal)}</div>
                </div>

                {calculationResult.discounts.length > 0 && (
                  <div className="pt-2">
                    <div className="text-sm font-medium mb-1">Discounts:</div>
                    {calculationResult.discounts.map((discount, index) => (
                      <div key={index} className="grid grid-cols-2 gap-2 pl-4">
                        <div className="text-sm">{discount.name}:</div>
                        <div className="text-sm text-green-600">-{formatCurrency(discount.amount)}</div>
                      </div>
                    ))}
                  </div>
                )}

                {calculationResult.additionalFees.length > 0 && (
                  <div className="pt-2">
                    <div className="text-sm font-medium mb-1">Additional Fees:</div>
                    {calculationResult.additionalFees.map((fee, index) => (
                      <div key={index} className="grid grid-cols-2 gap-2 pl-4">
                        <div className="text-sm">{fee.name}:</div>
                        <div className="text-sm">{formatCurrency(fee.amount)}</div>
                      </div>
                    ))}
                  </div>
                )}

                <div className="grid grid-cols-2 gap-2">
                  <div className="text-sm font-medium">Tax:</div>
                  <div className="text-sm">{formatCurrency(calculationResult.taxAmount)}</div>
                </div>

                <div className="border-t pt-2 mt-2">
                  <div className="grid grid-cols-2 gap-2">
                    <div className="text-base font-bold">Total:</div>
                    <div className="text-base font-bold">{formatCurrency(calculationResult.total)}</div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </CardContent>
      <CardFooter className="text-xs text-muted-foreground">
        Fee calculations are based on the selected fee structure and may include taxes and additional fees
      </CardFooter>
    </Card>
  )
}

export default FeeCalculator

================
File: frontend/app/components/permission-aware.tsx
================
"use client"

import type React from "react"

import { usePermissions } from "../contexts/permission-context"

interface PermissionAwareProps {
  children: React.ReactNode
  // Legacy support
  requiredPermission?: string
  // Enhanced permission options
  requiredPermissions?: string[] // Requires ALL permissions
  anyOfPermissions?: string[] // Requires ANY of these permissions
  // Resource-specific permissions
  resourcePermission?: {
    permission: string
    resourceType: string
    resourceId?: string
  }
  // Action-based permission checking
  action?: {
    action: string
    resourceType: string
    resourceId?: string
  }
  // Advanced permission patterns
  adminOnly?: boolean
  fallback?: React.ReactNode
  showPermissionInfo?: boolean // Debug: show permission info
}

const PermissionAware: React.FC<PermissionAwareProps> = ({ 
  children, 
  requiredPermission,
  requiredPermissions,
  anyOfPermissions,
  resourcePermission,
  action,
  adminOnly = false,
  fallback = null,
  showPermissionInfo = false
}) => {
  const { 
    checkPermission, 
    hasPermission,
    hasAnyPermission, 
    hasAllPermissions,
    hasResourcePermission,
    canPerformAction,
    loading,
    user
  } = usePermissions()

  // Don't render anything while permissions are loading
  if (loading) {
    return null
  }

  let hasRequiredPermission = false
  let permissionCheckInfo = ""

  // Check different permission patterns
  if (adminOnly) {
    // Admin-only check - requires backend admin permissions
    hasRequiredPermission = hasAnyPermission(['ACCESS_ADMIN_DASHBOARD', 'MANAGE_SETTINGS', 'MANAGE_USERS', 'MANAGE_ROLES'])
    permissionCheckInfo = "Admin access check"
  } else if (resourcePermission) {
    // Resource-specific permission check
    hasRequiredPermission = hasResourcePermission(
      resourcePermission.permission,
      resourcePermission.resourceType,
      resourcePermission.resourceId
    )
    permissionCheckInfo = `Resource permission: ${resourcePermission.permission} on ${resourcePermission.resourceType}${resourcePermission.resourceId ? ':' + resourcePermission.resourceId : ''}`
  } else if (action) {
    // Action-based permission check
    hasRequiredPermission = canPerformAction(
      action.action,
      action.resourceType,
      action.resourceId
    )
    permissionCheckInfo = `Action: ${action.action} on ${action.resourceType}${action.resourceId ? ':' + action.resourceId : ''}`
  } else if (requiredPermissions && requiredPermissions.length > 0) {
    // Requires ALL specified permissions
    hasRequiredPermission = hasAllPermissions(requiredPermissions)
    permissionCheckInfo = `All permissions required: ${requiredPermissions.join(', ')}`
  } else if (anyOfPermissions && anyOfPermissions.length > 0) {
    // Requires ANY of the specified permissions
    hasRequiredPermission = hasAnyPermission(anyOfPermissions)
    permissionCheckInfo = `Any permission required: ${anyOfPermissions.join(', ')}`
  } else if (requiredPermission) {
    // Legacy single permission check (backward compatibility)
    hasRequiredPermission = checkPermission(requiredPermission)
    permissionCheckInfo = `Single permission: ${requiredPermission}`
  } else {
    // No permission requirements specified - allow access
    hasRequiredPermission = true
    permissionCheckInfo = "No permission requirements"
  }

  // Debug information
  if (showPermissionInfo && process.env.NODE_ENV === 'development') {
    console.log(`PermissionAware Check:`, {
      hasRequiredPermission,
      permissionCheckInfo,
      userId: user?.id,
      userPermissions: user?.permissions?.slice(0, 5), // Show first 5 permissions
      totalPermissions: user?.permissions?.length
    })
  }

  // Render debug info in development
  const debugInfo = showPermissionInfo && process.env.NODE_ENV === 'development' ? (
    <div className="fixed bottom-4 right-4 bg-black bg-opacity-75 text-white p-2 rounded text-xs z-50 max-w-xs">
      <div className="font-bold">Permission Check:</div>
      <div>Result: {hasRequiredPermission ? '✅ GRANTED' : '❌ DENIED'}</div>
      <div>Check: {permissionCheckInfo}</div>
      <div>User: {user?.username}</div>
    </div>
  ) : null

  return (
    <>
      {hasRequiredPermission ? children : fallback}
      {debugInfo}
    </>
  )
}

export default PermissionAware

// Additional specialized permission-aware components

interface AdminOnlyProps {
  children: React.ReactNode
  fallback?: React.ReactNode
}

export const AdminOnly: React.FC<AdminOnlyProps> = ({ children, fallback = null }) => (
  <PermissionAware adminOnly={true} fallback={fallback}>
    {children}
  </PermissionAware>
)

interface ResourceProtectedProps {
  children: React.ReactNode
  permission: string
  resourceType: string
  resourceId?: string
  fallback?: React.ReactNode
}

export const ResourceProtected: React.FC<ResourceProtectedProps> = ({ 
  children, 
  permission, 
  resourceType, 
  resourceId, 
  fallback = null 
}) => (
  <PermissionAware 
    resourcePermission={{ permission, resourceType, resourceId }}
    fallback={fallback}
  >
    {children}
  </PermissionAware>
)

interface ActionProtectedProps {
  children: React.ReactNode
  action: string
  resourceType: string
  resourceId?: string
  fallback?: React.ReactNode
}

export const ActionProtected: React.FC<ActionProtectedProps> = ({ 
  children, 
  action, 
  resourceType, 
  resourceId, 
  fallback = null 
}) => (
  <PermissionAware 
    action={{ action, resourceType, resourceId }}
    fallback={fallback}
  >
    {children}
  </PermissionAware>
)

interface MultiPermissionProps {
  children: React.ReactNode
  anyOf?: string[]
  allOf?: string[]
  fallback?: React.ReactNode
}

export const MultiPermission: React.FC<MultiPermissionProps> = ({ 
  children, 
  anyOf, 
  allOf, 
  fallback = null 
}) => (
  <PermissionAware 
    anyOfPermissions={anyOf}
    requiredPermissions={allOf}
    fallback={fallback}
  >
    {children}
  </PermissionAware>
)

================
File: frontend/app/components/protected-route.tsx
================
"use client"

import type React from "react"
import { useEffect, useState } from "react"
import { useRouter } from "next/navigation"
import AccessDenied from "./access-denied"
import { usePermissions } from "../contexts/permission-context"

interface ProtectedRouteProps {
  children: React.ReactNode
  // Legacy permission checking
  requiredPermission?: string
  // Enhanced permission options
  requiredPermissions?: string[] // Requires ALL permissions
  anyOfPermissions?: string[] // Requires ANY of these permissions
  // Resource-specific permissions
  resourcePermission?: {
    permission: string
    resourceType: string
    resourceId?: string
  }
  // Role-based convenience checks
  adminOnly?: boolean
  csrOnly?: boolean
  fuelerOnly?: boolean
  memberOnly?: boolean
  // Fallback components
  fallback?: React.ReactNode
  loadingFallback?: React.ReactNode
  redirectTo?: string // Custom redirect instead of /login
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({
  children,
  requiredPermission,
  requiredPermissions,
  anyOfPermissions,
  resourcePermission,
  adminOnly = false,
  csrOnly = false,
  fuelerOnly = false,
  memberOnly = false,
  fallback = <AccessDenied />,
  loadingFallback,
  redirectTo = "/login"
}) => {
  const router = useRouter()
  const [isAuthorized, setIsAuthorized] = useState(false)
  const [isClient, setIsClient] = useState(false)
  const [authLoading, setAuthLoading] = useState(true)

  const { 
    loading: permissionsLoading,
    user,
    hasPermission,
    hasAnyPermission,
    hasAllPermissions,
    hasResourcePermission
  } = usePermissions()

  useEffect(() => {
    setIsClient(true)

    // Wait for permissions to load
    if (permissionsLoading) {
      return
    }

    try {
      // Check if user is authenticated
      if (!user || !user.isLoggedIn) {
        router.push(redirectTo)
        return
      }

      // Determine required permissions based on props
      let hasRequiredAccess = false

      if (adminOnly) {
        // Admin access check
        hasRequiredAccess = hasAnyPermission(['ACCESS_ADMIN_DASHBOARD', 'MANAGE_SETTINGS', 'MANAGE_USERS', 'MANAGE_ROLES'])
      } else if (csrOnly) {
        // CSR access check
        hasRequiredAccess = hasAnyPermission(['ACCESS_CSR_DASHBOARD', 'VIEW_ALL_ORDERS', 'CREATE_ORDER'])
      } else if (fuelerOnly) {
        // Fueler access check
        hasRequiredAccess = hasAnyPermission(['ACCESS_FUELER_DASHBOARD', 'PERFORM_FUELING_TASK', 'UPDATE_OWN_ORDER_STATUS'])
      } else if (memberOnly) {
        // Basic member access - just need to be authenticated with active account
        hasRequiredAccess = user.is_active
      } else if (resourcePermission) {
        // Resource-specific permission check
        hasRequiredAccess = hasResourcePermission(
          resourcePermission.permission,
          resourcePermission.resourceType,
          resourcePermission.resourceId
        )
      } else if (requiredPermissions && requiredPermissions.length > 0) {
        // Requires ALL specified permissions
        hasRequiredAccess = hasAllPermissions(requiredPermissions)
      } else if (anyOfPermissions && anyOfPermissions.length > 0) {
        // Requires ANY of the specified permissions
        hasRequiredAccess = hasAnyPermission(anyOfPermissions)
      } else if (requiredPermission) {
        // Legacy single permission check
        hasRequiredAccess = hasPermission(requiredPermission)
      } else {
        // No specific permission required - just being authenticated is enough
        hasRequiredAccess = true
      }

      setIsAuthorized(hasRequiredAccess)
      setAuthLoading(false)

      // Redirect if not authorized and not showing fallback
      if (!hasRequiredAccess && !fallback) {
        router.push(redirectTo)
      }

    } catch (error) {
      console.error("Error checking authorization:", error)
      router.push(redirectTo)
    }
  }, [
    router, 
    permissionsLoading, 
    user,
    requiredPermission,
    requiredPermissions,
    anyOfPermissions,
    resourcePermission,
    adminOnly,
    csrOnly,
    fuelerOnly,
    memberOnly,
    hasPermission,
    hasAnyPermission,
    hasAllPermissions,
    hasResourcePermission,
    fallback,
    redirectTo
  ])

  // Show loading while permissions are being fetched or client is hydrating
  if (!isClient || permissionsLoading || authLoading) {
    if (loadingFallback) {
      return <>{loadingFallback}</>
    }
    
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="flex flex-col items-center space-y-4">
          <div className="h-8 w-8 border-4 border-primary border-t-transparent rounded-full animate-spin"></div>
          <p className="text-sm text-muted-foreground">Checking permissions...</p>
        </div>
      </div>
    )
  }

  // Show children if authorized, otherwise show fallback
  return isAuthorized ? <>{children}</> : <>{fallback}</>
}

export default ProtectedRoute

// Convenience components for common access patterns

interface AdminRouteProps {
  children: React.ReactNode
  fallback?: React.ReactNode
  redirectTo?: string
}

export const AdminRoute: React.FC<AdminRouteProps> = ({ children, fallback, redirectTo }) => (
  <ProtectedRoute adminOnly={true} fallback={fallback} redirectTo={redirectTo}>
    {children}
  </ProtectedRoute>
)

interface CSRRouteProps {
  children: React.ReactNode
  fallback?: React.ReactNode
  redirectTo?: string
}

export const CSRRoute: React.FC<CSRRouteProps> = ({ children, fallback, redirectTo }) => (
  <ProtectedRoute csrOnly={true} fallback={fallback} redirectTo={redirectTo}>
    {children}
  </ProtectedRoute>
)

interface FuelerRouteProps {
  children: React.ReactNode
  fallback?: React.ReactNode
  redirectTo?: string
}

export const FuelerRoute: React.FC<FuelerRouteProps> = ({ children, fallback, redirectTo }) => (
  <ProtectedRoute fuelerOnly={true} fallback={fallback} redirectTo={redirectTo}>
    {children}
  </ProtectedRoute>
)

interface MemberRouteProps {
  children: React.ReactNode
  fallback?: React.ReactNode
  redirectTo?: string
}

export const MemberRoute: React.FC<MemberRouteProps> = ({ children, fallback, redirectTo }) => (
  <ProtectedRoute memberOnly={true} fallback={fallback} redirectTo={redirectTo}>
    {children}
  </ProtectedRoute>
)

================
File: frontend/app/csr/dashboard/loading.tsx
================
export default function Loading() {
  return (
    <div className="min-h-screen flex items-center justify-center bg-background">
      <div className="flex flex-col items-center gap-4">
        <div className="h-8 w-8 border-4 border-primary border-t-transparent rounded-full animate-spin"></div>
        <p>Loading CSR dashboard...</p>
      </div>
    </div>
  )
}

================
File: frontend/app/csr/export/loading.tsx
================
export default function Loading() {
  return (
    <div className="min-h-screen flex items-center justify-center bg-background">
      <div className="flex flex-col items-center gap-4">
        <div className="h-8 w-8 border-4 border-primary border-t-transparent rounded-full animate-spin"></div>
        <p>Loading...</p>
      </div>
    </div>
  )
}

================
File: frontend/app/csr/export/page.tsx
================
"use client"

import { useEffect, useState } from "react"
import { useRouter } from "next/navigation"
import {
  ArrowLeft,
  Plane,
  Download,
  Calendar,
  Filter,
  WifiOff,
  FileText,
  Receipt,
  CheckCircle,
  Clock,
  AlertCircle,
  Loader2,
} from "lucide-react"
import { motion } from "framer-motion"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"
import { isAuthenticated } from "@/app/services/auth-service"
import {
  exportFuelOrdersUrl,
  getFuelOrders,
  convertFuelOrdersToCSV,
  filterFuelOrders,
  downloadCSV,
} from "@/app/services/fuel-order-service"
import { isOfflineMode } from "@/app/services/utils"
import Link from "next/link"

// Mock receipt data for export
const mockReceipts = [
  {
    id: 1,
    receiptNumber: "RCP-2024-001",
    fuelOrderId: 1,
    tailNumber: "N123AB",
    customer: "Delta Airlines",
    fuelType: "Jet A",
    quantity: 500,
    amount: 2750.0,
    paymentMethod: "Corporate Account",
    status: "PAID",
    createdAt: "2024-01-15T10:30:00Z",
    fuelerName: "Mike Johnson",
    location: "Gate A1",
  },
  {
    id: 2,
    receiptNumber: "RCP-2024-002",
    fuelOrderId: 2,
    tailNumber: "N456CD",
    customer: "United Airlines",
    fuelType: "Jet A",
    quantity: 750,
    amount: 4125.0,
    paymentMethod: "Credit Card",
    status: "PAID",
    createdAt: "2024-01-15T14:45:00Z",
    fuelerName: "Sarah Wilson",
    location: "Gate B3",
  },
  {
    id: 3,
    receiptNumber: "RCP-2024-003",
    fuelOrderId: 3,
    tailNumber: "N789EF",
    customer: "American Airlines",
    fuelType: "Jet A",
    quantity: 300,
    amount: 1650.0,
    paymentMethod: "Corporate Account",
    status: "PENDING",
    createdAt: "2024-01-16T09:15:00Z",
    fuelerName: "Tom Davis",
    location: "Gate C2",
  },
]

export default function ExportDataPage() {
  const router = useRouter()
  const [isLoading, setIsLoading] = useState(true)
  const [isExporting, setIsExporting] = useState(false)
  const [exportProgress, setExportProgress] = useState(0)
  const [exportStatus, setExportStatus] = useState<"idle" | "processing" | "success" | "error">("idle")

  // Form state for fuel orders
  const [fuelOrderStartDate, setFuelOrderStartDate] = useState("")
  const [fuelOrderEndDate, setFuelOrderEndDate] = useState("")
  const [fuelOrderStatus, setFuelOrderStatus] = useState("")

  // Form state for receipts
  const [receiptStartDate, setReceiptStartDate] = useState("")
  const [receiptEndDate, setReceiptEndDate] = useState("")
  const [receiptStatus, setReceiptStatus] = useState("")
  const [receiptPaymentMethod, setReceiptPaymentMethod] = useState("")

  // Statistics
  const [fuelOrderStats, setFuelOrderStats] = useState({
    total: 0,
    pending: 0,
    inProgress: 0,
    completed: 0,
  })

  const [receiptStats, setReceiptStats] = useState({
    total: 0,
    paid: 0,
    pending: 0,
    totalAmount: 0,
  })

  useEffect(() => {
    // Check if user is logged in and is CSR
    if (!isAuthenticated()) {
      router.push("/login")
      return
    }

    const userData = localStorage.getItem("fboUser")
    if (userData) {
      const parsedUser = JSON.parse(userData)
      if (!parsedUser.isLoggedIn || parsedUser.role !== "csr") {
        router.push("/login")
        return
      }
    }

    // Load statistics
    loadStatistics()
    setIsLoading(false)
  }, [router])

  const loadStatistics = async () => {
    try {
      // Load fuel order statistics
      const fuelOrders = await getFuelOrders()
      const fuelStats = {
        total: fuelOrders.length,
        pending: fuelOrders.filter((order) => order.status === "PENDING").length,
        inProgress: fuelOrders.filter((order) => order.status === "IN_PROGRESS").length,
        completed: fuelOrders.filter((order) => order.status === "COMPLETED").length,
      }
      setFuelOrderStats(fuelStats)

      // Load receipt statistics
      const receiptStats = {
        total: mockReceipts.length,
        paid: mockReceipts.filter((receipt) => receipt.status === "PAID").length,
        pending: mockReceipts.filter((receipt) => receipt.status === "PENDING").length,
        totalAmount: mockReceipts.reduce((sum, receipt) => sum + receipt.amount, 0),
      }
      setReceiptStats(receiptStats)
    } catch (error) {
      console.error("Error loading statistics:", error)
    }
  }

  const simulateProgress = () => {
    setExportProgress(0)
    const interval = setInterval(() => {
      setExportProgress((prev) => {
        if (prev >= 100) {
          clearInterval(interval)
          return 100
        }
        return prev + 10
      })
    }, 200)
  }

  const handleExportFuelOrders = async () => {
    setIsExporting(true)
    setExportStatus("processing")
    simulateProgress()

    try {
      if (isOfflineMode()) {
        // Get local fuel orders
        const allFuelOrders = await getFuelOrders()

        // Filter based on criteria
        const filteredOrders = filterFuelOrders(
          allFuelOrders,
          fuelOrderStartDate || undefined,
          fuelOrderEndDate || undefined,
          fuelOrderStatus || undefined,
        )

        // Convert to CSV
        const csvContent = convertFuelOrdersToCSV(filteredOrders)

        // Generate filename with current date
        const date = new Date().toISOString().split("T")[0]
        const filename = `fuel-orders-export-${date}.csv`

        // Simulate processing time
        await new Promise((resolve) => setTimeout(resolve, 2000))

        // Download the CSV
        downloadCSV(csvContent, filename)
        setExportStatus("success")
      } else {
        // Use the online export method
        const exportUrl = exportFuelOrdersUrl(fuelOrderStartDate, fuelOrderEndDate, fuelOrderStatus)
        window.open(exportUrl, "_blank")
        setExportStatus("success")
      }
    } catch (error) {
      console.error("Export error:", error)
      setExportStatus("error")
    } finally {
      setIsExporting(false)
      setTimeout(() => {
        setExportStatus("idle")
        setExportProgress(0)
      }, 3000)
    }
  }

  const handleExportReceipts = async () => {
    setIsExporting(true)
    setExportStatus("processing")
    simulateProgress()

    try {
      // Filter receipts based on criteria
      let filteredReceipts = mockReceipts

      if (receiptStartDate) {
        filteredReceipts = filteredReceipts.filter(
          (receipt) => new Date(receipt.createdAt) >= new Date(receiptStartDate),
        )
      }

      if (receiptEndDate) {
        const endDateTime = new Date(receiptEndDate)
        endDateTime.setHours(23, 59, 59, 999)
        filteredReceipts = filteredReceipts.filter((receipt) => new Date(receipt.createdAt) <= endDateTime)
      }

      if (receiptStatus && receiptStatus !== "ALL") {
        filteredReceipts = filteredReceipts.filter((receipt) => receipt.status === receiptStatus)
      }

      if (receiptPaymentMethod && receiptPaymentMethod !== "ALL") {
        filteredReceipts = filteredReceipts.filter((receipt) => receipt.paymentMethod === receiptPaymentMethod)
      }

      // Convert to CSV
      const csvContent = convertReceiptsToCSV(filteredReceipts)

      // Generate filename with current date
      const date = new Date().toISOString().split("T")[0]
      const filename = `receipts-export-${date}.csv`

      // Simulate processing time
      await new Promise((resolve) => setTimeout(resolve, 2000))

      // Download the CSV
      downloadCSV(csvContent, filename)
      setExportStatus("success")
    } catch (error) {
      console.error("Export error:", error)
      setExportStatus("error")
    } finally {
      setIsExporting(false)
      setTimeout(() => {
        setExportStatus("idle")
        setExportProgress(0)
      }, 3000)
    }
  }

  const convertReceiptsToCSV = (receipts: any[]): string => {
    if (receipts.length === 0) {
      return ""
    }

    // Define CSV headers
    const headers = [
      "Receipt ID",
      "Receipt Number",
      "Fuel Order ID",
      "Tail Number",
      "Customer",
      "Fuel Type",
      "Quantity (Gallons)",
      "Amount",
      "Payment Method",
      "Status",
      "Created At",
      "Fueler Name",
      "Location",
    ]

    // Create CSV content
    const csvContent = [
      headers.join(","),
      ...receipts.map((receipt) =>
        [
          receipt.id,
          receipt.receiptNumber,
          receipt.fuelOrderId,
          receipt.tailNumber,
          receipt.customer,
          receipt.fuelType,
          receipt.quantity,
          receipt.amount,
          receipt.paymentMethod,
          receipt.status,
          receipt.createdAt,
          receipt.fuelerName,
          receipt.location,
        ].join(","),
      ),
    ].join("\n")

    return csvContent
  }

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-background">
        <motion.div
          className="flex flex-col items-center gap-4"
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.5 }}
        >
          <motion.div
            className="h-8 w-8 border-4 border-[#2A628F] border-t-transparent rounded-full"
            animate={{
              rotate: 360,
              transition: {
                repeat: Number.POSITIVE_INFINITY,
                duration: 1,
                ease: "linear",
              },
            }}
          />
          <p className="text-[#3A4356] dark:text-[#CBD5E0]">Loading...</p>
        </motion.div>
      </div>
    )
  }

  const offline = isOfflineMode()

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <header className="border-b bg-background/80 backdrop-blur-md sticky top-0 z-40">
        <div className="container flex h-16 items-center px-4 justify-between">
          <div className="flex items-center gap-2">
            <Plane className="h-6 w-6 text-[#2A628F] rotate-45" />
            <span className="text-xl font-bold text-[#3A4356] dark:text-[#F8FAFC]">FBO LaunchPad</span>
            <Badge variant="secondary" className="bg-[#2A628F]/10 text-[#2A628F] ml-2">
              CSR
            </Badge>
          </div>
          {offline && (
            <motion.div
              className="flex items-center gap-2 bg-amber-500/10 text-amber-500 px-3 py-1 rounded-md"
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.3 }}
            >
              <WifiOff className="h-4 w-4" />
              <span className="text-xs font-medium">Offline Mode</span>
            </motion.div>
          )}
        </div>
      </header>

      <main className="container px-4 md:px-6 py-6 md:py-8">
        <div className="flex flex-col gap-6 max-w-6xl mx-auto">
          {/* Navigation */}
          <motion.div
            className="flex items-center gap-2"
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3 }}
          >
            <Button variant="ghost" size="sm" asChild>
              <Link href="/csr/dashboard">
                <ArrowLeft className="h-4 w-4 mr-1" /> Back to Dashboard
              </Link>
            </Button>
          </motion.div>

          {/* Page Header */}
          <motion.div
            className="text-center space-y-2"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.1 }}
          >
            <h1 className="text-3xl font-bold text-[#3A4356] dark:text-[#F8FAFC]">Export Data</h1>
            <p className="text-[#3A4356] dark:text-[#CBD5E0] max-w-2xl mx-auto">
              Export fuel orders and receipts data in CSV format. Use filters to customize your export and download data
              for analysis.
            </p>
          </motion.div>

          {/* Export Status */}
          {exportStatus !== "idle" && (
            <motion.div
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -10 }}
              className="max-w-md mx-auto"
            >
              <Card className="border-l-4 border-l-[#2A628F]">
                <CardContent className="pt-6">
                  <div className="flex items-center gap-3">
                    {exportStatus === "processing" && (
                      <>
                        <Loader2 className="h-5 w-5 animate-spin text-[#2A628F]" />
                        <div className="flex-1">
                          <p className="text-sm font-medium text-[#3A4356] dark:text-[#F8FAFC]">Processing export...</p>
                          <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2 mt-2">
                            <div
                              className="bg-[#2A628F] h-2 rounded-full transition-all duration-300"
                              style={{ width: `${exportProgress}%` }}
                            />
                          </div>
                          <p className="text-xs text-[#3A4356] dark:text-[#CBD5E0] mt-1">{exportProgress}% complete</p>
                        </div>
                      </>
                    )}
                    {exportStatus === "success" && (
                      <>
                        <CheckCircle className="h-5 w-5 text-green-500" />
                        <p className="text-sm font-medium text-green-700 dark:text-green-400">
                          Export completed successfully!
                        </p>
                      </>
                    )}
                    {exportStatus === "error" && (
                      <>
                        <AlertCircle className="h-5 w-5 text-red-500" />
                        <p className="text-sm font-medium text-red-700 dark:text-red-400">
                          Export failed. Please try again.
                        </p>
                      </>
                    )}
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          )}

          {/* Export Tabs */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.2 }}
          >
            <Tabs defaultValue="fuel-orders" className="w-full">
              <TabsList className="grid w-full grid-cols-2 max-w-md mx-auto">
                <TabsTrigger value="fuel-orders" className="flex items-center gap-2">
                  <FileText className="h-4 w-4" />
                  Fuel Orders
                </TabsTrigger>
                <TabsTrigger value="receipts" className="flex items-center gap-2">
                  <Receipt className="h-4 w-4" />
                  Receipts
                </TabsTrigger>
              </TabsList>

              {/* Fuel Orders Export */}
              <TabsContent value="fuel-orders" className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                  {/* Statistics Cards */}
                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.3, delay: 0.1 }}
                  >
                    <Card className="hover:shadow-md transition-shadow">
                      <CardContent className="p-4">
                        <div className="flex items-center gap-3">
                          <div className="p-2 bg-[#2A628F]/10 rounded-lg">
                            <FileText className="h-5 w-5 text-[#2A628F]" />
                          </div>
                          <div>
                            <p className="text-2xl font-bold text-[#3A4356] dark:text-[#F8FAFC]">
                              {fuelOrderStats.total}
                            </p>
                            <p className="text-sm text-[#3A4356] dark:text-[#CBD5E0]">Total Orders</p>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </motion.div>

                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.3, delay: 0.2 }}
                  >
                    <Card className="hover:shadow-md transition-shadow">
                      <CardContent className="p-4">
                        <div className="flex items-center gap-3">
                          <div className="p-2 bg-amber-500/10 rounded-lg">
                            <Clock className="h-5 w-5 text-amber-500" />
                          </div>
                          <div>
                            <p className="text-2xl font-bold text-[#3A4356] dark:text-[#F8FAFC]">
                              {fuelOrderStats.pending}
                            </p>
                            <p className="text-sm text-[#3A4356] dark:text-[#CBD5E0]">Pending</p>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </motion.div>

                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.3, delay: 0.3 }}
                  >
                    <Card className="hover:shadow-md transition-shadow">
                      <CardContent className="p-4">
                        <div className="flex items-center gap-3">
                          <div className="p-2 bg-blue-500/10 rounded-lg">
                            <Loader2 className="h-5 w-5 text-blue-500" />
                          </div>
                          <div>
                            <p className="text-2xl font-bold text-[#3A4356] dark:text-[#F8FAFC]">
                              {fuelOrderStats.inProgress}
                            </p>
                            <p className="text-sm text-[#3A4356] dark:text-[#CBD5E0]">In Progress</p>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </motion.div>

                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.3, delay: 0.4 }}
                  >
                    <Card className="hover:shadow-md transition-shadow">
                      <CardContent className="p-4">
                        <div className="flex items-center gap-3">
                          <div className="p-2 bg-green-500/10 rounded-lg">
                            <CheckCircle className="h-5 w-5 text-green-500" />
                          </div>
                          <div>
                            <p className="text-2xl font-bold text-[#3A4356] dark:text-[#F8FAFC]">
                              {fuelOrderStats.completed}
                            </p>
                            <p className="text-sm text-[#3A4356] dark:text-[#CBD5E0]">Completed</p>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </motion.div>
                </div>

                {/* Export Form */}
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.5, delay: 0.3 }}
                >
                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <FileText className="h-5 w-5 text-[#2A628F]" />
                        Export Fuel Orders
                      </CardTitle>
                      <CardDescription>
                        {offline
                          ? "Download fuel order data as CSV (offline mode - using local data)"
                          : "Download fuel order data as CSV"}
                      </CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div className="space-y-2">
                          <Label htmlFor="fuel_start_date">Start Date</Label>
                          <div className="relative">
                            <Calendar className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                            <Input
                              id="fuel_start_date"
                              type="date"
                              className="pl-10"
                              value={fuelOrderStartDate}
                              onChange={(e) => setFuelOrderStartDate(e.target.value)}
                            />
                          </div>
                        </div>

                        <div className="space-y-2">
                          <Label htmlFor="fuel_end_date">End Date</Label>
                          <div className="relative">
                            <Calendar className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                            <Input
                              id="fuel_end_date"
                              type="date"
                              className="pl-10"
                              value={fuelOrderEndDate}
                              onChange={(e) => setFuelOrderEndDate(e.target.value)}
                            />
                          </div>
                        </div>

                        <div className="space-y-2">
                          <Label htmlFor="fuel_status">Order Status</Label>
                          <div className="relative">
                            <Filter className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                            <Select value={fuelOrderStatus} onValueChange={setFuelOrderStatus}>
                              <SelectTrigger className="pl-10">
                                <SelectValue placeholder="All statuses" />
                              </SelectTrigger>
                              <SelectContent>
                                <SelectItem value="ALL">All statuses</SelectItem>
                                <SelectItem value="PENDING">Pending</SelectItem>
                                <SelectItem value="IN_PROGRESS">In Progress</SelectItem>
                                <SelectItem value="COMPLETED">Completed</SelectItem>
                                <SelectItem value="REVIEWED">Reviewed</SelectItem>
                              </SelectContent>
                            </Select>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                    <CardFooter className="flex justify-between">
                      <Button variant="outline" asChild>
                        <Link href="/csr/dashboard">Cancel</Link>
                      </Button>
                      <Button onClick={handleExportFuelOrders} className="gap-2" disabled={isExporting}>
                        {isExporting ? <Loader2 className="h-4 w-4 animate-spin" /> : <Download className="h-4 w-4" />}
                        Export Fuel Orders
                      </Button>
                    </CardFooter>
                  </Card>
                </motion.div>
              </TabsContent>

              {/* Receipts Export */}
              <TabsContent value="receipts" className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                  {/* Statistics Cards */}
                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.3, delay: 0.1 }}
                  >
                    <Card className="hover:shadow-md transition-shadow">
                      <CardContent className="p-4">
                        <div className="flex items-center gap-3">
                          <div className="p-2 bg-[#2A628F]/10 rounded-lg">
                            <Receipt className="h-5 w-5 text-[#2A628F]" />
                          </div>
                          <div>
                            <p className="text-2xl font-bold text-[#3A4356] dark:text-[#F8FAFC]">
                              {receiptStats.total}
                            </p>
                            <p className="text-sm text-[#3A4356] dark:text-[#CBD5E0]">Total Receipts</p>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </motion.div>

                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.3, delay: 0.2 }}
                  >
                    <Card className="hover:shadow-md transition-shadow">
                      <CardContent className="p-4">
                        <div className="flex items-center gap-3">
                          <div className="p-2 bg-green-500/10 rounded-lg">
                            <CheckCircle className="h-5 w-5 text-green-500" />
                          </div>
                          <div>
                            <p className="text-2xl font-bold text-[#3A4356] dark:text-[#F8FAFC]">{receiptStats.paid}</p>
                            <p className="text-sm text-[#3A4356] dark:text-[#CBD5E0]">Paid</p>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </motion.div>

                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.3, delay: 0.3 }}
                  >
                    <Card className="hover:shadow-md transition-shadow">
                      <CardContent className="p-4">
                        <div className="flex items-center gap-3">
                          <div className="p-2 bg-amber-500/10 rounded-lg">
                            <Clock className="h-5 w-5 text-amber-500" />
                          </div>
                          <div>
                            <p className="text-2xl font-bold text-[#3A4356] dark:text-[#F8FAFC]">
                              {receiptStats.pending}
                            </p>
                            <p className="text-sm text-[#3A4356] dark:text-[#CBD5E0]">Pending</p>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </motion.div>

                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.3, delay: 0.4 }}
                  >
                    <Card className="hover:shadow-md transition-shadow">
                      <CardContent className="p-4">
                        <div className="flex items-center gap-3">
                          <div className="p-2 bg-emerald-500/10 rounded-lg">
                            <span className="text-emerald-500 font-bold text-lg">$</span>
                          </div>
                          <div>
                            <p className="text-2xl font-bold text-[#3A4356] dark:text-[#F8FAFC]">
                              ${receiptStats.totalAmount.toLocaleString()}
                            </p>
                            <p className="text-sm text-[#3A4356] dark:text-[#CBD5E0]">Total Revenue</p>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </motion.div>
                </div>

                {/* Export Form */}
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.5, delay: 0.3 }}
                >
                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <Receipt className="h-5 w-5 text-[#2A628F]" />
                        Export Receipts
                      </CardTitle>
                      <CardDescription>Download receipt data as CSV with filtering options</CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="space-y-2">
                          <Label htmlFor="receipt_start_date">Start Date</Label>
                          <div className="relative">
                            <Calendar className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                            <Input
                              id="receipt_start_date"
                              type="date"
                              className="pl-10"
                              value={receiptStartDate}
                              onChange={(e) => setReceiptStartDate(e.target.value)}
                            />
                          </div>
                        </div>

                        <div className="space-y-2">
                          <Label htmlFor="receipt_end_date">End Date</Label>
                          <div className="relative">
                            <Calendar className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                            <Input
                              id="receipt_end_date"
                              type="date"
                              className="pl-10"
                              value={receiptEndDate}
                              onChange={(e) => setReceiptEndDate(e.target.value)}
                            />
                          </div>
                        </div>

                        <div className="space-y-2">
                          <Label htmlFor="receipt_status">Receipt Status</Label>
                          <div className="relative">
                            <Filter className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                            <Select value={receiptStatus} onValueChange={setReceiptStatus}>
                              <SelectTrigger className="pl-10">
                                <SelectValue placeholder="All statuses" />
                              </SelectTrigger>
                              <SelectContent>
                                <SelectItem value="ALL">All statuses</SelectItem>
                                <SelectItem value="PAID">Paid</SelectItem>
                                <SelectItem value="PENDING">Pending</SelectItem>
                                <SelectItem value="CANCELLED">Cancelled</SelectItem>
                              </SelectContent>
                            </Select>
                          </div>
                        </div>

                        <div className="space-y-2">
                          <Label htmlFor="payment_method">Payment Method</Label>
                          <div className="relative">
                            <Filter className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                            <Select value={receiptPaymentMethod} onValueChange={setReceiptPaymentMethod}>
                              <SelectTrigger className="pl-10">
                                <SelectValue placeholder="All methods" />
                              </SelectTrigger>
                              <SelectContent>
                                <SelectItem value="ALL">All methods</SelectItem>
                                <SelectItem value="Corporate Account">Corporate Account</SelectItem>
                                <SelectItem value="Credit Card">Credit Card</SelectItem>
                                <SelectItem value="Cash">Cash</SelectItem>
                                <SelectItem value="Check">Check</SelectItem>
                              </SelectContent>
                            </Select>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                    <CardFooter className="flex justify-between">
                      <Button variant="outline" asChild>
                        <Link href="/csr/dashboard">Cancel</Link>
                      </Button>
                      <Button onClick={handleExportReceipts} className="gap-2" disabled={isExporting}>
                        {isExporting ? <Loader2 className="h-4 w-4 animate-spin" /> : <Download className="h-4 w-4" />}
                        Export Receipts
                      </Button>
                    </CardFooter>
                  </Card>
                </motion.div>
              </TabsContent>
            </Tabs>
          </motion.div>

          {/* Instructions */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.4 }}
          >
            <Card className="bg-blue-50 dark:bg-blue-950/20 border-blue-200 dark:border-blue-800">
              <CardHeader>
                <CardTitle className="text-blue-800 dark:text-blue-200 text-lg">Export Instructions</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                  <div>
                    <h4 className="font-semibold text-blue-800 dark:text-blue-200 mb-2">📊 Data Filtering</h4>
                    <ul className="space-y-1 text-blue-700 dark:text-blue-300">
                      <li>• Use date ranges to filter by creation date</li>
                      <li>• Filter by status to focus on specific order types</li>
                      <li>• Leave filters empty to export all data</li>
                    </ul>
                  </div>
                  <div>
                    <h4 className="font-semibold text-blue-800 dark:text-blue-200 mb-2">💾 File Format</h4>
                    <ul className="space-y-1 text-blue-700 dark:text-blue-300">
                      <li>• Files are exported in CSV format</li>
                      <li>• Compatible with Excel, Google Sheets</li>
                      <li>• Includes all relevant data fields</li>
                    </ul>
                  </div>
                </div>
              </CardContent>
            </Card>
          </motion.div>
        </div>
      </main>
    </div>
  )
}

================
File: frontend/app/csr/fuel-orders/[id]/loading.tsx
================
export default function Loading() {
  return (
    <div className="min-h-screen flex items-center justify-center bg-background">
      <div className="flex flex-col items-center gap-4">
        <div className="h-8 w-8 border-4 border-primary border-t-transparent rounded-full animate-spin"></div>
        <p>Loading fuel order details...</p>
      </div>
    </div>
  )
}

================
File: frontend/app/csr/fuel-orders/[id]/page.tsx
================
"use client"

import { useEffect, useState } from "react"
import { useRouter, useParams } from "next/navigation"
import { ArrowLeft, Plane, CheckCircle, Clock, AlertCircle } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Textarea } from "@/components/ui/textarea"
import { Badge } from "@/components/ui/badge"
import { isAuthenticated } from "@/app/services/auth-service"
import { type FuelOrderDisplay, getFuelOrder, reviewFuelOrder } from "@/app/services/fuel-order-service"
import Link from "next/link"

export default function FuelOrderDetailPage() {
  const router = useRouter()
  const params = useParams()
  const orderId = Number(params.id)

  const [isLoading, setIsLoading] = useState(true)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [fuelOrder, setFuelOrder] = useState<FuelOrderDisplay | null>(null)
  const [reviewNotes, setReviewNotes] = useState("")

  useEffect(() => {
    // Check if user is logged in and is CSR
    if (!isAuthenticated()) {
      router.push("/login")
      return
    }

    const userData = localStorage.getItem("fboUser")
    if (userData) {
      const parsedUser = JSON.parse(userData)
      
      // Check if user has CSR role - handle both array and string formats (same as CSR layout)
      const userRoles = parsedUser.roles || []
      const hasCSRRole = Array.isArray(userRoles) 
        ? userRoles.some(role => role.toLowerCase().includes("customer service") || role.toLowerCase().includes("csr"))
        : false
        
      if (!parsedUser.isLoggedIn || !hasCSRRole) {
        router.push("/login")
        return
      }
    }

    // Load fuel order details
    const loadFuelOrder = async () => {
      try {
        const order = await getFuelOrder(orderId)
        setFuelOrder(order)
      } catch (error) {
        console.error("Error loading fuel order:", error)
        setError("Failed to load fuel order details. Please try again.")
      } finally {
        setIsLoading(false)
      }
    }

    loadFuelOrder()
  }, [router, orderId])

  const handleReviewOrder = async () => {
    if (!fuelOrder) return

    setError(null)
    setIsSubmitting(true)

    try {
      const updatedOrder = await reviewFuelOrder(fuelOrder.id, {
        approved: true,
        review_notes: reviewNotes
      })
      setFuelOrder(updatedOrder)
    } catch (error) {
      console.error("Error reviewing fuel order:", error)
      setError(error instanceof Error ? error.message : "Failed to review fuel order. Please try again.")
    } finally {
      setIsSubmitting(false)
    }
  }

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "PENDING":
        return (
          <Badge variant="outline" className="bg-yellow-500/10 text-yellow-600 border-yellow-200">
            Pending
          </Badge>
        )
      case "IN_PROGRESS":
        return (
          <Badge variant="outline" className="bg-blue-500/10 text-blue-600 border-blue-200">
            In Progress
          </Badge>
        )
      case "COMPLETED":
        return (
          <Badge variant="outline" className="bg-green-500/10 text-green-600 border-green-200">
            Completed
          </Badge>
        )
      case "REVIEWED":
        return (
          <Badge variant="outline" className="bg-purple-500/10 text-purple-600 border-purple-200">
            Reviewed
          </Badge>
        )
      default:
        return <Badge variant="outline">{status}</Badge>
    }
  }

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-background">
        <div className="flex flex-col items-center gap-4">
          <div className="h-8 w-8 border-4 border-primary border-t-transparent rounded-full animate-spin"></div>
          <p>Loading fuel order details...</p>
        </div>
      </div>
    )
  }

  if (!fuelOrder) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-background">
        <div className="flex flex-col items-center gap-4 text-center max-w-md">
          <AlertCircle className="h-12 w-12 text-red-500" />
          <h2 className="text-2xl font-bold">Fuel Order Not Found</h2>
          <p className="text-muted-foreground">
            The fuel order you're looking for doesn't exist or you don't have permission to view it.
          </p>
          <Button asChild>
            <Link href="/csr/dashboard">Return to Dashboard</Link>
          </Button>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-background">
      <header className="border-b bg-background/80 backdrop-blur-md sticky top-0 z-40">
        <div className="container flex h-16 items-center px-4">
          <div className="flex items-center gap-2">
            <Plane className="h-6 w-6 text-primary rotate-45" />
            <span className="text-xl font-bold">FBO LaunchPad</span>
            <span className="bg-blue-500/10 text-blue-500 text-xs px-2 py-1 rounded-md ml-2">CSR</span>
          </div>
        </div>
      </header>

      <main className="container px-4 md:px-6 py-6 md:py-8">
        <div className="flex flex-col gap-6 max-w-3xl mx-auto">
          <div className="flex items-center gap-2">
            <Button variant="ghost" size="sm" asChild>
              <Link href="/csr/dashboard">
                <ArrowLeft className="h-4 w-4 mr-1" /> Back to Dashboard
              </Link>
            </Button>
          </div>

          <Card>
            <CardHeader>
              <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
                <div>
                  <CardTitle>Fuel Order #{fuelOrder.id}</CardTitle>
                  <CardDescription>Created on {new Date(fuelOrder.created_at).toLocaleString()}</CardDescription>
                </div>
                <div>{getStatusBadge(fuelOrder.status)}</div>
              </div>
            </CardHeader>
            <CardContent className="space-y-6">
              {error && (
                <div className="bg-red-500/10 border border-red-500/50 rounded-md p-3 flex items-start gap-2">
                  <AlertCircle className="h-5 w-5 text-red-500 mt-0.5 flex-shrink-0" />
                  <p className="text-red-500 text-sm">{error}</p>
                </div>
              )}

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h3 className="text-lg font-medium mb-2">Order Details</h3>
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">Fuel Type:</span>
                      <span className="font-medium">{fuelOrder.fuel_type}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">Quantity:</span>
                      <span className="font-medium">{fuelOrder.quantity} gallons</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">Status:</span>
                      <span>{getStatusBadge(fuelOrder.status)}</span>
                    </div>
                    {fuelOrder.notes && (
                      <div className="pt-2">
                        <span className="text-muted-foreground">Notes:</span>
                        <p className="mt-1 text-sm border rounded-md p-2">{fuelOrder.notes}</p>
                      </div>
                    )}
                  </div>
                </div>

                <div>
                  <h3 className="text-lg font-medium mb-2">Assignment</h3>
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">Aircraft:</span>
                      <span className="font-medium">{fuelOrder.aircraft?.tail_number || "N/A"}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">Customer:</span>
                      <span className="font-medium">{fuelOrder.customer?.name || "N/A"}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">Assigned LST:</span>
                      <span className="font-medium">{fuelOrder.assigned_lst?.name || "N/A"}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">Truck ID:</span>
                      <span className="font-medium">{fuelOrder.assigned_truck_id}</span>
                    </div>
                  </div>
                </div>
              </div>

              {fuelOrder.status === "COMPLETED" && (
                <div className="pt-4 border-t">
                  <h3 className="text-lg font-medium mb-2">Review Order</h3>
                  <p className="text-sm text-muted-foreground mb-2">
                    This order has been completed by the LST. Please review and confirm the details.
                  </p>
                  <div className="space-y-2">
                    <Textarea
                      placeholder="Add review notes (optional)"
                      value={reviewNotes}
                      onChange={(e) => setReviewNotes(e.target.value)}
                      disabled={fuelOrder.status === "REVIEWED"}
                    />
                  </div>
                </div>
              )}

              {fuelOrder.status === "REVIEWED" && fuelOrder.review_notes && (
                <div className="pt-4 border-t">
                  <h3 className="text-lg font-medium mb-2">Review Notes</h3>
                  <div className="bg-muted/50 p-3 rounded-md">
                    <p className="text-sm">{fuelOrder.review_notes}</p>
                    <p className="text-xs text-muted-foreground mt-2">
                      Reviewed on {fuelOrder.reviewed_at ? new Date(fuelOrder.reviewed_at).toLocaleString() : "N/A"}
                    </p>
                  </div>
                </div>
              )}
            </CardContent>
            <CardFooter className="flex justify-between">
              <Button variant="outline" asChild>
                <Link href="/csr/dashboard">Back</Link>
              </Button>

              {fuelOrder.status === "COMPLETED" && (
                <Button onClick={handleReviewOrder} disabled={isSubmitting} className="gap-2">
                  {isSubmitting ? (
                    <>
                      <span>Processing...</span>
                      <div className="h-4 w-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                    </>
                  ) : (
                    <>
                      <CheckCircle className="h-4 w-4 mr-1" />
                      Mark as Reviewed
                    </>
                  )}
                </Button>
              )}

              {fuelOrder.status === "PENDING" && (
                <div className="flex items-center gap-2 text-muted-foreground">
                  <Clock className="h-4 w-4" />
                  <span className="text-sm">Waiting for LST to process</span>
                </div>
              )}

              {fuelOrder.status === "IN_PROGRESS" && (
                <div className="flex items-center gap-2 text-muted-foreground">
                  <Clock className="h-4 w-4" />
                  <span className="text-sm">Fueling in progress</span>
                </div>
              )}
            </CardFooter>
          </Card>
        </div>
      </main>
    </div>
  )
}

================
File: frontend/app/csr/fuel-orders/new/loading.tsx
================
export default function Loading() {
  return (
    <div className="min-h-screen flex items-center justify-center bg-background">
      <div className="flex flex-col items-center gap-4">
        <div className="h-8 w-8 border-4 border-primary border-t-transparent rounded-full animate-spin"></div>
        <p>Loading...</p>
      </div>
    </div>
  )
}

================
File: frontend/app/csr/fuel-orders/loading.tsx
================
export default function Loading() {
  return null
}

================
File: frontend/app/csr/fuel-orders/page.tsx
================
"use client"

import { useState, useEffect } from "react"
import Link from "next/link"
import { Plus, Search, Download, Eye, Edit, Trash2, MoreHorizontal } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"

interface FuelOrder {
  id: string
  orderNumber: string
  aircraft: {
    tailNumber: string
    type: string
  }
  customer: {
    name: string
    company: string
  }
  fuelType: string
  quantity: number
  unitPrice: number
  totalAmount: number
  status: "pending" | "in-progress" | "completed" | "cancelled"
  requestedDate: string
  completedDate?: string
  notes?: string
}

export default function FuelOrdersPage() {
  const [fuelOrders, setFuelOrders] = useState<FuelOrder[]>([])
  const [filteredOrders, setFilteredOrders] = useState<FuelOrder[]>([])
  const [searchTerm, setSearchTerm] = useState("")
  const [statusFilter, setStatusFilter] = useState<string>("all")
  const [isLoading, setIsLoading] = useState(true)
  const [isNewOrderDialogOpen, setIsNewOrderDialogOpen] = useState(false)

  // New order form state
  const [newOrder, setNewOrder] = useState({
    tailNumber: "",
    aircraftType: "",
    customerName: "",
    customerCompany: "",
    fuelType: "100LL",
    quantity: "",
    unitPrice: "",
    notes: "",
  })

  useEffect(() => {
    // Simulate API call
    const fetchFuelOrders = async () => {
      setIsLoading(true)
      // Mock data
      const mockOrders: FuelOrder[] = [
        {
          id: "1",
          orderNumber: "FO-2024-001",
          aircraft: { tailNumber: "N123AB", type: "Cessna 172" },
          customer: { name: "John Smith", company: "Smith Aviation" },
          fuelType: "100LL",
          quantity: 50,
          unitPrice: 6.5,
          totalAmount: 325.0,
          status: "completed",
          requestedDate: "2024-01-15",
          completedDate: "2024-01-15",
          notes: "Standard refuel",
        },
        {
          id: "2",
          orderNumber: "FO-2024-002",
          aircraft: { tailNumber: "N456CD", type: "Piper Cherokee" },
          customer: { name: "Jane Doe", company: "Doe Flying Club" },
          fuelType: "100LL",
          quantity: 75,
          unitPrice: 6.5,
          totalAmount: 487.5,
          status: "in-progress",
          requestedDate: "2024-01-16",
          notes: "Priority fuel request",
        },
        {
          id: "3",
          orderNumber: "FO-2024-003",
          aircraft: { tailNumber: "N789EF", type: "Beechcraft Bonanza" },
          customer: { name: "Mike Johnson", company: "Johnson Enterprises" },
          fuelType: "Jet A",
          quantity: 200,
          unitPrice: 5.75,
          totalAmount: 1150.0,
          status: "pending",
          requestedDate: "2024-01-17",
        },
      ]

      setFuelOrders(mockOrders)
      setFilteredOrders(mockOrders)
      setIsLoading(false)
    }

    fetchFuelOrders()
  }, [])

  useEffect(() => {
    let filtered = fuelOrders

    // Filter by search term
    if (searchTerm) {
      filtered = filtered.filter(
        (order) =>
          order.orderNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||
          order.aircraft.tailNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||
          order.customer.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
          order.customer.company.toLowerCase().includes(searchTerm.toLowerCase()),
      )
    }

    // Filter by status
    if (statusFilter !== "all") {
      filtered = filtered.filter((order) => order.status === statusFilter)
    }

    setFilteredOrders(filtered)
  }, [searchTerm, statusFilter, fuelOrders])

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "completed":
        return <Badge className="bg-green-100 text-green-800 hover:bg-green-100">Completed</Badge>
      case "in-progress":
        return <Badge className="bg-blue-100 text-blue-800 hover:bg-blue-100">In Progress</Badge>
      case "pending":
        return <Badge className="bg-yellow-100 text-yellow-800 hover:bg-yellow-100">Pending</Badge>
      case "cancelled":
        return <Badge className="bg-red-100 text-red-800 hover:bg-red-100">Cancelled</Badge>
      default:
        return <Badge variant="secondary">{status}</Badge>
    }
  }

  const handleCreateOrder = () => {
    // Create new order logic
    const order: FuelOrder = {
      id: (fuelOrders.length + 1).toString(),
      orderNumber: `FO-2024-${String(fuelOrders.length + 1).padStart(3, "0")}`,
      aircraft: {
        tailNumber: newOrder.tailNumber,
        type: newOrder.aircraftType,
      },
      customer: {
        name: newOrder.customerName,
        company: newOrder.customerCompany,
      },
      fuelType: newOrder.fuelType,
      quantity: Number.parseFloat(newOrder.quantity),
      unitPrice: Number.parseFloat(newOrder.unitPrice),
      totalAmount: Number.parseFloat(newOrder.quantity) * Number.parseFloat(newOrder.unitPrice),
      status: "pending",
      requestedDate: new Date().toISOString().split("T")[0],
      notes: newOrder.notes,
    }

    setFuelOrders([order, ...fuelOrders])
    setIsNewOrderDialogOpen(false)

    // Reset form
    setNewOrder({
      tailNumber: "",
      aircraftType: "",
      customerName: "",
      customerCompany: "",
      fuelType: "100LL",
      quantity: "",
      unitPrice: "",
      notes: "",
    })
  }

  const exportToCSV = () => {
    const headers = [
      "Order Number",
      "Tail Number",
      "Aircraft Type",
      "Customer",
      "Company",
      "Fuel Type",
      "Quantity",
      "Unit Price",
      "Total",
      "Status",
      "Requested Date",
    ]
    const csvContent = [
      headers.join(","),
      ...filteredOrders.map((order) =>
        [
          order.orderNumber,
          order.aircraft.tailNumber,
          order.aircraft.type,
          order.customer.name,
          order.customer.company,
          order.fuelType,
          order.quantity,
          order.unitPrice,
          order.totalAmount,
          order.status,
          order.requestedDate,
        ].join(","),
      ),
    ].join("\n")

    const blob = new Blob([csvContent], { type: "text/csv" })
    const url = window.URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = "fuel-orders.csv"
    a.click()
    window.URL.revokeObjectURL(url)
  }

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <div className="flex flex-col items-center gap-4">
          <div className="h-8 w-8 border-4 border-primary border-t-transparent rounded-full animate-spin"></div>
          <p>Loading fuel orders...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Fuel Orders</h1>
          <p className="text-muted-foreground">Manage and track all fuel orders</p>
        </div>
        <div className="flex gap-2">
          <Button onClick={exportToCSV} variant="outline" className="gap-2">
            <Download className="h-4 w-4" />
            Export CSV
          </Button>
          <Dialog open={isNewOrderDialogOpen} onOpenChange={setIsNewOrderDialogOpen}>
            <DialogTrigger asChild>
              <Button className="gap-2">
                <Plus className="h-4 w-4" />
                New Fuel Order
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-2xl">
              <DialogHeader>
                <DialogTitle>Create New Fuel Order</DialogTitle>
                <DialogDescription>Fill in the details below to create a new fuel order.</DialogDescription>
              </DialogHeader>
              <div className="grid gap-4 py-4">
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="tailNumber">Tail Number</Label>
                    <Input
                      id="tailNumber"
                      placeholder="N123AB"
                      value={newOrder.tailNumber}
                      onChange={(e) => setNewOrder({ ...newOrder, tailNumber: e.target.value })}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="aircraftType">Aircraft Type</Label>
                    <Input
                      id="aircraftType"
                      placeholder="Cessna 172"
                      value={newOrder.aircraftType}
                      onChange={(e) => setNewOrder({ ...newOrder, aircraftType: e.target.value })}
                    />
                  </div>
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="customerName">Customer Name</Label>
                    <Input
                      id="customerName"
                      placeholder="John Smith"
                      value={newOrder.customerName}
                      onChange={(e) => setNewOrder({ ...newOrder, customerName: e.target.value })}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="customerCompany">Company</Label>
                    <Input
                      id="customerCompany"
                      placeholder="Smith Aviation"
                      value={newOrder.customerCompany}
                      onChange={(e) => setNewOrder({ ...newOrder, customerCompany: e.target.value })}
                    />
                  </div>
                </div>
                <div className="grid grid-cols-3 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="fuelType">Fuel Type</Label>
                    <Select
                      value={newOrder.fuelType}
                      onValueChange={(value) => setNewOrder({ ...newOrder, fuelType: value })}
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="100LL">100LL</SelectItem>
                        <SelectItem value="Jet A">Jet A</SelectItem>
                        <SelectItem value="Jet A-1">Jet A-1</SelectItem>
                        <SelectItem value="Mogas">Mogas</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="quantity">Quantity (gallons)</Label>
                    <Input
                      id="quantity"
                      type="number"
                      placeholder="50"
                      value={newOrder.quantity}
                      onChange={(e) => setNewOrder({ ...newOrder, quantity: e.target.value })}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="unitPrice">Unit Price ($)</Label>
                    <Input
                      id="unitPrice"
                      type="number"
                      step="0.01"
                      placeholder="6.50"
                      value={newOrder.unitPrice}
                      onChange={(e) => setNewOrder({ ...newOrder, unitPrice: e.target.value })}
                    />
                  </div>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="notes">Notes (Optional)</Label>
                  <Textarea
                    id="notes"
                    placeholder="Any special instructions or notes..."
                    value={newOrder.notes}
                    onChange={(e) => setNewOrder({ ...newOrder, notes: e.target.value })}
                  />
                </div>
                <div className="flex justify-end gap-2 pt-4">
                  <Button variant="outline" onClick={() => setIsNewOrderDialogOpen(false)}>
                    Cancel
                  </Button>
                  <Button onClick={handleCreateOrder}>Create Order</Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>
        </div>
      </div>

      {/* Filters */}
      <Card>
        <CardHeader>
          <CardTitle>Filter Orders</CardTitle>
          <CardDescription>Search and filter fuel orders by various criteria</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col gap-4 md:flex-row md:items-center">
            <div className="flex-1">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
                <Input
                  placeholder="Search by order number, tail number, customer..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10"
                />
              </div>
            </div>
            <div className="flex gap-2">
              <Select value={statusFilter} onValueChange={setStatusFilter}>
                <SelectTrigger className="w-[180px]">
                  <SelectValue placeholder="Filter by status" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Statuses</SelectItem>
                  <SelectItem value="pending">Pending</SelectItem>
                  <SelectItem value="in-progress">In Progress</SelectItem>
                  <SelectItem value="completed">Completed</SelectItem>
                  <SelectItem value="cancelled">Cancelled</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Orders Table */}
      <Card>
        <CardHeader>
          <CardTitle>Orders ({filteredOrders.length})</CardTitle>
          <CardDescription>
            {statusFilter === "all" ? "All fuel orders" : `${statusFilter} fuel orders`}
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="rounded-md border">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Order #</TableHead>
                  <TableHead>Aircraft</TableHead>
                  <TableHead>Customer</TableHead>
                  <TableHead>Fuel Type</TableHead>
                  <TableHead>Quantity</TableHead>
                  <TableHead>Total</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead>Date</TableHead>
                  <TableHead className="w-[70px]">Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredOrders.length === 0 ? (
                  <TableRow>
                    <TableCell colSpan={9} className="text-center py-8">
                      No fuel orders found
                    </TableCell>
                  </TableRow>
                ) : (
                  filteredOrders.map((order) => (
                    <TableRow key={order.id}>
                      <TableCell className="font-medium">{order.orderNumber}</TableCell>
                      <TableCell>
                        <div>
                          <div className="font-medium">{order.aircraft.tailNumber}</div>
                          <div className="text-sm text-muted-foreground">{order.aircraft.type}</div>
                        </div>
                      </TableCell>
                      <TableCell>
                        <div>
                          <div className="font-medium">{order.customer.name}</div>
                          <div className="text-sm text-muted-foreground">{order.customer.company}</div>
                        </div>
                      </TableCell>
                      <TableCell>{order.fuelType}</TableCell>
                      <TableCell>{order.quantity} gal</TableCell>
                      <TableCell>${order.totalAmount.toFixed(2)}</TableCell>
                      <TableCell>{getStatusBadge(order.status)}</TableCell>
                      <TableCell>{order.requestedDate}</TableCell>
                      <TableCell>
                        <DropdownMenu>
                          <DropdownMenuTrigger asChild>
                            <Button variant="ghost" className="h-8 w-8 p-0">
                              <MoreHorizontal className="h-4 w-4" />
                            </Button>
                          </DropdownMenuTrigger>
                          <DropdownMenuContent align="end">
                            <DropdownMenuLabel>Actions</DropdownMenuLabel>
                            <DropdownMenuItem asChild>
                              <Link href={`/csr/fuel-orders/${order.id}`}>
                                <Eye className="mr-2 h-4 w-4" />
                                View Details
                              </Link>
                            </DropdownMenuItem>
                            <DropdownMenuItem>
                              <Edit className="mr-2 h-4 w-4" />
                              Edit Order
                            </DropdownMenuItem>
                            <DropdownMenuSeparator />
                            <DropdownMenuItem className="text-red-600">
                              <Trash2 className="mr-2 h-4 w-4" />
                              Cancel Order
                            </DropdownMenuItem>
                          </DropdownMenuContent>
                        </DropdownMenu>
                      </TableCell>
                    </TableRow>
                  ))
                )}
              </TableBody>
            </Table>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

================
File: frontend/app/csr/receipts/[id]/loading.tsx
================
import { Skeleton } from "@/components/ui/skeleton"

export default function ReceiptLoading() {
  return (
    <div className="min-h-screen bg-background">
      <header className="border-b bg-background/80 backdrop-blur-md sticky top-0 z-40">
        <div className="container flex h-16 items-center justify-between px-4">
          <div className="flex items-center gap-2">
            <Skeleton className="h-6 w-6 rounded-full" />
            <Skeleton className="h-6 w-32" />
          </div>
          <div className="flex items-center gap-4">
            <Skeleton className="h-9 w-24 rounded-md" />
            <Skeleton className="h-9 w-24 rounded-md" />
          </div>
        </div>
      </header>

      <main className="container px-4 md:px-6 py-6 md:py-8">
        <div className="flex flex-col gap-6 max-w-3xl mx-auto">
          <div className="flex items-center justify-between">
            <Skeleton className="h-10 w-48" />
            <Skeleton className="h-5 w-24" />
          </div>

          <div className="border-2 rounded-lg">
            <div className="border-b p-6">
              <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
                <div className="flex items-center gap-2">
                  <Skeleton className="h-8 w-8 rounded-full" />
                  <div>
                    <Skeleton className="h-8 w-40 mb-2" />
                    <Skeleton className="h-4 w-32" />
                  </div>
                </div>
                <div className="flex flex-col items-end">
                  <Skeleton className="h-7 w-32 mb-2" />
                  <Skeleton className="h-4 w-40" />
                </div>
              </div>
            </div>

            <div className="p-6">
              <div className="space-y-6">
                <Skeleton className="h-20 w-full rounded-md" />

                <div>
                  <Skeleton className="h-7 w-48 mb-2" />
                  <Skeleton className="h-32 w-full rounded-md" />
                </div>

                <div>
                  <Skeleton className="h-7 w-48 mb-2" />
                  <Skeleton className="h-32 w-full rounded-md" />
                </div>

                <div>
                  <Skeleton className="h-7 w-48 mb-2" />
                  <Skeleton className="h-32 w-full rounded-md" />
                </div>

                <div>
                  <Skeleton className="h-7 w-48 mb-2" />
                  <Skeleton className="h-32 w-full rounded-md" />
                </div>
              </div>
            </div>

            <div className="border-t p-6">
              <div className="flex justify-between">
                <Skeleton className="h-5 w-64" />
                <Skeleton className="h-5 w-32" />
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>
  )
}

================
File: frontend/app/csr/receipts/[id]/page.tsx
================
"use client"

import { useEffect, useState } from "react"
import { useRouter, useParams } from "next/navigation"
import { Plane, ArrowLeft, Printer, CheckCircle } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card"
import Link from "next/link"

export default function FuelingReceipt() {
  const router = useRouter()
  const params = useParams()
  const [user, setUser] = useState<any>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [order, setOrder] = useState<any>(null)
  const [notFound, setNotFound] = useState(false)

  useEffect(() => {
    // Check if user is logged in and is CSR
    const userData = localStorage.getItem("fboUser")
    if (!userData) {
      router.push("/login")
      return
    }

    const parsedUser = JSON.parse(userData)
    if (!parsedUser.isLoggedIn || parsedUser.role !== "csr") {
      router.push("/login")
      return
    }

    setUser(parsedUser)

    // Load fuel order
    const orderId = params.id
    const storedOrders = localStorage.getItem("fboFuelOrders")

    if (storedOrders) {
      const orders = JSON.parse(storedOrders)
      const foundOrder = orders.find((o: any) => o.id.toString() === orderId)

      if (foundOrder) {
        setOrder(foundOrder)
      } else {
        setNotFound(true)
      }
    } else {
      setNotFound(true)
    }

    setIsLoading(false)
  }, [router, params.id])

  const handlePrint = () => {
    window.print()
  }

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-background">
        <div className="flex flex-col items-center gap-4">
          <div className="h-8 w-8 border-4 border-primary border-t-transparent rounded-full animate-spin"></div>
          <p>Loading receipt...</p>
        </div>
      </div>
    )
  }

  if (notFound) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-background">
        <div className="flex flex-col items-center gap-4">
          <div className="h-16 w-16 rounded-full bg-red-100 flex items-center justify-center">
            <span className="text-red-500 text-2xl">!</span>
          </div>
          <h1 className="text-2xl font-bold">Receipt Not Found</h1>
          <p className="text-muted-foreground">The requested fueling receipt could not be found.</p>
          <Button asChild>
            <Link href="/csr/dashboard">
              <ArrowLeft className="h-4 w-4 mr-2" /> Back to Dashboard
            </Link>
          </Button>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-background">
      {/* Header - hidden when printing */}
      <header className="border-b bg-background/80 backdrop-blur-md sticky top-0 z-40 print:hidden">
        <div className="container flex h-16 items-center justify-between px-4">
          <div className="flex items-center gap-2">
            <Plane className="h-6 w-6 text-primary rotate-45" />
            <span className="text-xl font-bold">FBO LaunchPad</span>
            <span className="bg-blue-500/10 text-blue-500 text-xs px-2 py-1 rounded-md ml-2">CSR</span>
          </div>

          <div className="flex items-center gap-4">
            <Button variant="outline" size="sm" onClick={() => router.push("/csr/dashboard")} className="gap-2">
              <ArrowLeft className="h-4 w-4" />
              <span>Back to Dashboard</span>
            </Button>
            <Button variant="outline" size="sm" onClick={handlePrint} className="gap-2">
              <Printer className="h-4 w-4" />
              <span className="hidden md:inline-block">Print</span>
            </Button>
          </div>
        </div>
      </header>

      <main className="container px-4 md:px-6 py-6 md:py-8">
        <div className="flex flex-col gap-6 max-w-3xl mx-auto">
          <div className="flex items-center justify-between print:hidden">
            <h1 className="text-3xl font-bold">Fueling Receipt</h1>
            <div className="text-sm text-muted-foreground">Receipt #{order.id}</div>
          </div>

          <Card className="border-2">
            {/* Receipt Header */}
            <CardHeader className="border-b bg-muted/30">
              <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
                <div className="flex items-center gap-2">
                  <Plane className="h-8 w-8 text-primary rotate-45" />
                  <div>
                    <CardTitle className="text-2xl">FBO LaunchPad</CardTitle>
                    <CardDescription>Fueling Receipt</CardDescription>
                  </div>
                </div>
                <div className="flex flex-col items-end">
                  <div className="text-xl font-bold">Receipt #{order.id}</div>
                  <div className="text-sm text-muted-foreground">{new Date(order.completedAt).toLocaleString()}</div>
                </div>
              </div>
            </CardHeader>

            {/* Receipt Content */}
            <CardContent className="pt-6">
              <div className="space-y-6">
                {/* Status Banner */}
                <div className="bg-green-50 border border-green-200 rounded-md p-4 flex items-center gap-3">
                  <CheckCircle className="h-6 w-6 text-green-500" />
                  <div>
                    <p className="font-medium text-green-800">Fueling Completed</p>
                    <p className="text-sm text-green-700">
                      Fueling was completed on {new Date(order.completedAt).toLocaleDateString()} at{" "}
                      {new Date(order.completedAt).toLocaleTimeString()}
                    </p>
                  </div>
                </div>

                {/* Aircraft Information */}
                <div>
                  <h3 className="text-lg font-semibold mb-2">Aircraft Information</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 border rounded-md p-4 bg-muted/10">
                    <div>
                      <p className="text-sm text-muted-foreground">Tail Number</p>
                      <p className="font-medium">{order.tailNumber}</p>
                    </div>
                    <div>
                      <p className="text-sm text-muted-foreground">Aircraft Type</p>
                      <p className="font-medium">{order.aircraftType}</p>
                    </div>
                    <div>
                      <p className="text-sm text-muted-foreground">Customer</p>
                      <p className="font-medium">{order.customer}</p>
                    </div>
                    <div>
                      <p className="text-sm text-muted-foreground">Location</p>
                      <p className="font-medium">{order.gate}</p>
                    </div>
                  </div>
                </div>

                {/* Fueling Details */}
                <div>
                  <h3 className="text-lg font-semibold mb-2">Fueling Details</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 border rounded-md p-4 bg-muted/10">
                    <div>
                      <p className="text-sm text-muted-foreground">Fuel Type</p>
                      <p className="font-medium">{order.fuelType}</p>
                    </div>
                    <div>
                      <p className="text-sm text-muted-foreground">Requested Quantity</p>
                      <p className="font-medium">{order.requestedQuantity} gallons</p>
                    </div>
                    <div>
                      <p className="text-sm text-muted-foreground">Actual Quantity</p>
                      <p className="font-medium">{order.actualQuantity} gallons</p>
                    </div>
                    <div>
                      <p className="text-sm text-muted-foreground">Difference</p>
                      <p className="font-medium">
                        {(Number.parseFloat(order.actualQuantity) - Number.parseFloat(order.requestedQuantity)).toFixed(
                          2,
                        )}{" "}
                        gallons
                      </p>
                    </div>
                  </div>
                </div>

                {/* Notes */}
                {(order.notes || order.completionNotes) && (
                  <div>
                    <h3 className="text-lg font-semibold mb-2">Notes</h3>
                    <div className="border rounded-md p-4 bg-muted/10">
                      {order.notes && (
                        <div className="mb-4">
                          <p className="text-sm text-muted-foreground">Order Notes</p>
                          <p>{order.notes}</p>
                        </div>
                      )}
                      {order.completionNotes && (
                        <div>
                          <p className="text-sm text-muted-foreground">Completion Notes</p>
                          <p>{order.completionNotes}</p>
                        </div>
                      )}
                    </div>
                  </div>
                )}

                {/* Fueler Information */}
                <div>
                  <h3 className="text-lg font-semibold mb-2">Fueler Information</h3>
                  <div className="border rounded-md p-4 bg-muted/10">
                    <div>
                      <p className="text-sm text-muted-foreground">Fueler</p>
                      <p className="font-medium">{order.fuelerName || "Unknown"}</p>
                    </div>
                  </div>
                </div>

                {/* Billing Information */}
                <div>
                  <h3 className="text-lg font-semibold mb-2">Billing Information</h3>
                  <div className="border rounded-md p-4 bg-muted/10">
                    <div className="space-y-4">
                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <p className="text-sm text-muted-foreground">Unit Price</p>
                          <p className="font-medium">$5.25 per gallon</p>
                        </div>
                        <div>
                          <p className="text-sm text-muted-foreground">Subtotal</p>
                          <p className="font-medium">${(Number.parseFloat(order.actualQuantity) * 5.25).toFixed(2)}</p>
                        </div>
                      </div>
                      <div className="border-t pt-4">
                        <div className="flex justify-between">
                          <p className="font-medium">Total</p>
                          <p className="font-bold">${(Number.parseFloat(order.actualQuantity) * 5.25).toFixed(2)}</p>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>

            <CardFooter className="border-t bg-muted/30 flex justify-between">
              <div className="text-sm text-muted-foreground">
                This receipt was generated automatically by FBO LaunchPad
              </div>
              <div className="text-sm font-medium">Receipt ID: {order.id}</div>
            </CardFooter>
          </Card>
        </div>
      </main>
    </div>
  )
}

================
File: frontend/app/csr/receipts/loading.tsx
================
"use client"

import { motion } from "framer-motion"
import { Plane, Receipt } from "lucide-react"
import { Badge } from "@/components/ui/badge"

export default function ReceiptsLoading() {
  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <header className="border-b bg-background/80 backdrop-blur-md sticky top-0 z-40">
        <div className="container flex h-16 items-center px-4 justify-between">
          <div className="flex items-center gap-2">
            <Plane className="h-6 w-6 text-[#2A628F] rotate-45" />
            <span className="text-xl font-bold text-[#3A4356] dark:text-[#F8FAFC]">FBO LaunchPad</span>
            <Badge variant="secondary" className="bg-[#2A628F]/10 text-[#2A628F] ml-2">
              CSR
            </Badge>
          </div>
        </div>
      </header>

      <main className="container px-4 md:px-6 py-6 md:py-8">
        <div className="flex flex-col gap-6 max-w-7xl mx-auto">
          {/* Loading Animation */}
          <motion.div
            className="flex flex-col items-center justify-center py-20"
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ duration: 0.5 }}
          >
            <motion.div
              className="flex items-center gap-3 mb-6"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: 0.2 }}
            >
              <div className="p-3 bg-[#2A628F]/10 rounded-lg">
                <Receipt className="h-8 w-8 text-[#2A628F]" />
              </div>
              <div>
                <h2 className="text-2xl font-bold text-[#3A4356] dark:text-[#F8FAFC]">Loading Receipts</h2>
                <p className="text-[#3A4356] dark:text-[#CBD5E0]">Please wait while we fetch your data...</p>
              </div>
            </motion.div>

            <motion.div
              className="h-8 w-8 border-4 border-[#2A628F] border-t-transparent rounded-full"
              animate={{
                rotate: 360,
                transition: {
                  repeat: Number.POSITIVE_INFINITY,
                  duration: 1,
                  ease: "linear",
                },
              }}
            />

            {/* Loading Skeleton */}
            <motion.div
              className="w-full max-w-4xl mt-12 space-y-4"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 0.5, delay: 0.5 }}
            >
              {/* Statistics Cards Skeleton */}
              <div className="grid grid-cols-1 md:grid-cols-5 gap-4 mb-8">
                {[...Array(5)].map((_, i) => (
                  <div key={i} className="h-20 bg-muted rounded-lg animate-pulse" />
                ))}
              </div>

              {/* Search Bar Skeleton */}
              <div className="h-12 bg-muted rounded-lg animate-pulse mb-4" />

              {/* Table Skeleton */}
              <div className="space-y-3">
                <div className="h-12 bg-muted rounded-lg animate-pulse" />
                {[...Array(8)].map((_, i) => (
                  <div key={i} className="h-16 bg-muted/50 rounded-lg animate-pulse" />
                ))}
              </div>
            </motion.div>
          </motion.div>
        </div>
      </main>
    </div>
  )
}

================
File: frontend/app/csr/receipts/page.tsx
================
"use client"

import { useEffect, useState, useMemo } from "react"
import { useRouter } from "next/navigation"
import {
  ArrowLeft,
  Plane,
  Search,
  Download,
  Calendar,
  WifiOff,
  Receipt,
  CheckCircle,
  Clock,
  RefreshCw,
  Eye,
  MoreHorizontal,
  ArrowUpDown,
  ArrowUp,
  ArrowDown,
  FileText,
  HelpCircle,
  X,
  SlidersHorizontal,
  DollarSign,
} from "lucide-react"
import { motion, AnimatePresence } from "framer-motion"
import { format } from "date-fns"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Badge } from "@/components/ui/badge"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { Calendar as CalendarComponent } from "@/components/ui/calendar"
import { isAuthenticated } from "@/app/services/auth-service"
import {
  getReceipts,
  filterReceipts,
  sortReceipts,
  convertReceiptsToCSV,
  downloadReceiptsCSV,
  getReceiptStatistics,
} from "@/app/services/receipt-service"
import { isOfflineMode, formatCurrency, formatDateTime } from "@/app/services/utils"
import Link from "next/link"

const ITEMS_PER_PAGE = 10

export default function ReceiptsPage() {
  const router = useRouter()
  const [isLoading, setIsLoading] = useState(true)
  const [receipts, setReceipts] = useState([])
  const [filteredReceipts, setFilteredReceipts] = useState([])

  // Search and filter state
  const [searchTerm, setSearchTerm] = useState("")
  const [statusFilter, setStatusFilter] = useState("ALL")
  const [paymentMethodFilter, setPaymentMethodFilter] = useState("ALL")
  const [startDate, setStartDate] = useState()
  const [endDate, setEndDate] = useState()
  const [showFilters, setShowFilters] = useState(false)

  // Sorting state
  const [sortBy, setSortBy] = useState("createdAt")
  const [sortOrder, setSortOrder] = useState("asc")

  // Pagination state
  const [currentPage, setCurrentPage] = useState(1)

  // UI state
  const [isExporting, setIsExporting] = useState(false)
  const [selectedReceipt, setSelectedReceipt] = useState(null)

  useEffect(() => {
    // Check if user is logged in and is CSR
    if (!isAuthenticated()) {
      router.push("/login")
      return
    }

    const userData = localStorage.getItem("fboUser")
    if (userData) {
      const parsedUser = JSON.parse(userData)
      if (!parsedUser.isLoggedIn || parsedUser.role !== "csr") {
        router.push("/login")
        return
      }
    }

    loadReceipts()
  }, [router])

  const loadReceipts = async () => {
    try {
      setIsLoading(true)
      const receiptData = await getReceipts()
      setReceipts(receiptData)
    } catch (error) {
      console.error("Error loading receipts:", error)
    } finally {
      setIsLoading(false)
    }
  }

  // Apply filters and search
  useEffect(() => {
    let filtered = filterReceipts(
      receipts,
      searchTerm,
      startDate ? format(startDate, "yyyy-MM-dd") : undefined,
      endDate ? format(endDate, "yyyy-MM-dd") : undefined,
      statusFilter,
      paymentMethodFilter,
    )

    filtered = sortReceipts(filtered, sortBy, sortOrder)
    setFilteredReceipts(filtered)
    setCurrentPage(1) // Reset to first page when filters change
  }, [receipts, searchTerm, startDate, endDate, statusFilter, paymentMethodFilter, sortBy, sortOrder])

  // Pagination
  const totalPages = Math.ceil(filteredReceipts.length / ITEMS_PER_PAGE)
  const paginatedReceipts = useMemo(() => {
    const startIndex = (currentPage - 1) * ITEMS_PER_PAGE
    return filteredReceipts.slice(startIndex, startIndex + ITEMS_PER_PAGE)
  }, [filteredReceipts, currentPage])

  // Statistics
  const statistics = useMemo(() => getReceiptStatistics(filteredReceipts), [filteredReceipts])

  const handleSort = (column) => {
    if (sortBy === column) {
      setSortOrder(sortOrder === "asc" ? "desc" : "asc")
    } else {
      setSortBy(column)
      setSortOrder("asc")
    }
  }

  const handleExport = async () => {
    setIsExporting(true)
    try {
      const csvContent = convertReceiptsToCSV(filteredReceipts)
      const date = new Date().toISOString().split("T")[0]
      const filename = `receipts-export-${date}.csv`
      downloadReceiptsCSV(csvContent, filename)
    } catch (error) {
      console.error("Export error:", error)
    } finally {
      setIsExporting(false)
    }
  }

  const clearFilters = () => {
    setSearchTerm("")
    setStatusFilter("ALL")
    setPaymentMethodFilter("ALL")
    setStartDate(undefined)
    setEndDate(undefined)
  }

  const getStatusBadge = (status) => {
    switch (status) {
      case "PAID":
        return <Badge className="bg-green-100 text-green-800 hover:bg-green-100">Paid</Badge>
      case "PENDING":
        return <Badge className="bg-yellow-100 text-yellow-800 hover:bg-yellow-100">Pending</Badge>
      case "REFUNDED":
        return <Badge className="bg-red-100 text-red-800 hover:bg-red-100">Refunded</Badge>
      default:
        return <Badge variant="secondary">{status}</Badge>
    }
  }

  const getSortIcon = (column) => {
    if (sortBy !== column) {
      return <ArrowUpDown className="h-4 w-4" />
    }
    return sortOrder === "asc" ? <ArrowUp className="h-4 w-4" /> : <ArrowDown className="h-4 w-4" />
  }

  const activeFiltersCount = [
    searchTerm,
    statusFilter !== "ALL" ? statusFilter : null,
    paymentMethodFilter !== "ALL" ? paymentMethodFilter : null,
    startDate,
    endDate,
  ].filter(Boolean).length

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-background">
        <motion.div
          className="flex flex-col items-center gap-4"
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.5 }}
        >
          <motion.div
            className="h-8 w-8 border-4 border-[#2A628F] border-t-transparent rounded-full"
            animate={{
              rotate: 360,
              transition: {
                repeat: Number.POSITIVE_INFINITY,
                duration: 1,
                ease: "linear",
              },
            }}
          />
          <p className="text-[#3A4356] dark:text-[#CBD5E0]">Loading receipts...</p>
        </motion.div>
      </div>
    )
  }

  const offline = isOfflineMode()

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <header className="border-b bg-background/80 backdrop-blur-md sticky top-0 z-40">
        <div className="container flex h-16 items-center px-4 justify-between">
          <div className="flex items-center gap-2">
            <Plane className="h-6 w-6 text-[#2A628F] rotate-45" />
            <span className="text-xl font-bold text-[#3A4356] dark:text-[#F8FAFC]">FBO LaunchPad</span>
            <Badge variant="secondary" className="bg-[#2A628F]/10 text-[#2A628F] ml-2">
              CSR
            </Badge>
          </div>
          {offline && (
            <motion.div
              className="flex items-center gap-2 bg-amber-500/10 text-amber-500 px-3 py-1 rounded-md"
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.3 }}
            >
              <WifiOff className="h-4 w-4" />
              <span className="text-xs font-medium">Offline Mode</span>
            </motion.div>
          )}
        </div>
      </header>

      <main className="container px-4 md:px-6 py-6 md:py-8">
        <div className="flex flex-col gap-6 max-w-7xl mx-auto">
          {/* Navigation */}
          <motion.div
            className="flex items-center gap-2"
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3 }}
          >
            <Button variant="ghost" size="sm" asChild>
              <Link href="/csr/dashboard">
                <ArrowLeft className="h-4 w-4 mr-1" /> Back to Dashboard
              </Link>
            </Button>
          </motion.div>

          {/* Page Header */}
          <motion.div
            className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.1 }}
          >
            <div>
              <h1 className="text-3xl font-bold text-[#3A4356] dark:text-[#F8FAFC]">Receipts Management</h1>
              <p className="text-[#3A4356] dark:text-[#CBD5E0] mt-1">Manage and track all fuel receipt transactions</p>
            </div>
            <div className="flex items-center gap-2">
              <Dialog>
                <DialogTrigger asChild>
                  <Button variant="outline" size="sm">
                    <HelpCircle className="h-4 w-4 mr-1" />
                    Help
                  </Button>
                </DialogTrigger>
                <DialogContent>
                  <DialogHeader>
                    <DialogTitle>Receipts Management Help</DialogTitle>
                    <DialogDescription>Learn how to effectively manage receipts in the system.</DialogDescription>
                  </DialogHeader>
                  <div className="space-y-4">
                    <div>
                      <h4 className="font-semibold mb-2">Search & Filter</h4>
                      <ul className="text-sm space-y-1 text-muted-foreground">
                        <li>• Search by receipt number, tail number, customer, or fueler name</li>
                        <li>• Filter by status, payment method, and date range</li>
                        <li>• Use the filter toggle to show/hide advanced options</li>
                      </ul>
                    </div>
                    <div>
                      <h4 className="font-semibold mb-2">Sorting & Export</h4>
                      <ul className="text-sm space-y-1 text-muted-foreground">
                        <li>• Click column headers to sort data</li>
                        <li>• Export filtered results to CSV format</li>
                        <li>• View detailed receipt information</li>
                      </ul>
                    </div>
                  </div>
                </DialogContent>
              </Dialog>
              <Button onClick={handleExport} disabled={isExporting} className="gap-2">
                {isExporting ? <RefreshCw className="h-4 w-4 animate-spin" /> : <Download className="h-4 w-4" />}
                Export CSV
              </Button>
            </div>
          </motion.div>

          {/* Statistics Cards */}
          <motion.div
            className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.2 }}
          >
            <Card className="hover:shadow-md transition-shadow">
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
                  <div className="p-2 bg-[#2A628F]/10 rounded-lg">
                    <Receipt className="h-5 w-5 text-[#2A628F]" />
                  </div>
                  <div>
                    <p className="text-2xl font-bold text-[#3A4356] dark:text-[#F8FAFC]">{statistics.total}</p>
                    <p className="text-sm text-[#3A4356] dark:text-[#CBD5E0]">Total Receipts</p>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="hover:shadow-md transition-shadow">
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
                  <div className="p-2 bg-green-500/10 rounded-lg">
                    <CheckCircle className="h-5 w-5 text-green-500" />
                  </div>
                  <div>
                    <p className="text-2xl font-bold text-[#3A4356] dark:text-[#F8FAFC]">{statistics.paid}</p>
                    <p className="text-sm text-[#3A4356] dark:text-[#CBD5E0]">Paid</p>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="hover:shadow-md transition-shadow">
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
                  <div className="p-2 bg-yellow-500/10 rounded-lg">
                    <Clock className="h-5 w-5 text-yellow-500" />
                  </div>
                  <div>
                    <p className="text-2xl font-bold text-[#3A4356] dark:text-[#F8FAFC]">{statistics.pending}</p>
                    <p className="text-sm text-[#3A4356] dark:text-[#CBD5E0]">Pending</p>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="hover:shadow-md transition-shadow">
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
                  <div className="p-2 bg-red-500/10 rounded-lg">
                    <RefreshCw className="h-5 w-5 text-red-500" />
                  </div>
                  <div>
                    <p className="text-2xl font-bold text-[#3A4356] dark:text-[#F8FAFC]">{statistics.refunded}</p>
                    <p className="text-sm text-[#3A4356] dark:text-[#CBD5E0]">Refunded</p>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="hover:shadow-md transition-shadow">
              <CardContent className="p-4">
                <div className="flex items-center gap-3">
                  <div className="p-2 bg-emerald-500/10 rounded-lg">
                    <DollarSign className="h-5 w-5 text-emerald-500" />
                  </div>
                  <div>
                    <p className="text-2xl font-bold text-[#3A4356] dark:text-[#F8FAFC]">
                      {formatCurrency(statistics.totalAmount)}
                    </p>
                    <p className="text-sm text-[#3A4356] dark:text-[#CBD5E0]">Total Revenue</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </motion.div>

          {/* Search and Filters */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.3 }}
          >
            <Card>
              <CardHeader className="pb-4">
                <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
                  <div className="flex items-center gap-2">
                    <Search className="h-5 w-5 text-[#2A628F]" />
                    <CardTitle>Search & Filter Receipts</CardTitle>
                    {activeFiltersCount > 0 && (
                      <Badge variant="secondary" className="bg-[#2A628F]/10 text-[#2A628F]">
                        {activeFiltersCount} active
                      </Badge>
                    )}
                  </div>
                  <div className="flex items-center gap-2">
                    <Button variant="outline" size="sm" onClick={() => setShowFilters(!showFilters)} className="gap-2">
                      <SlidersHorizontal className="h-4 w-4" />
                      {showFilters ? "Hide" : "Show"} Filters
                    </Button>
                    {activeFiltersCount > 0 && (
                      <Button variant="outline" size="sm" onClick={clearFilters} className="gap-2">
                        <X className="h-4 w-4" />
                        Clear
                      </Button>
                    )}
                  </div>
                </div>
              </CardHeader>
              <CardContent className="space-y-4">
                {/* Search Bar */}
                <div className="relative">
                  <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                  <Input
                    placeholder="Search by receipt number, tail number, customer, or fueler name..."
                    className="pl-10"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                  />
                </div>

                {/* Advanced Filters */}
                <AnimatePresence>
                  {showFilters && (
                    <motion.div
                      initial={{ opacity: 0, height: 0 }}
                      animate={{ opacity: 1, height: "auto" }}
                      exit={{ opacity: 0, height: 0 }}
                      transition={{ duration: 0.3 }}
                      className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 pt-4 border-t"
                    >
                      <div className="space-y-2">
                        <Label>Start Date</Label>
                        <Popover>
                          <PopoverTrigger asChild>
                            <Button variant="outline" className="w-full justify-start text-left font-normal">
                              <Calendar className="mr-2 h-4 w-4" />
                              {startDate ? format(startDate, "PPP") : "Pick a date"}
                            </Button>
                          </PopoverTrigger>
                          <PopoverContent className="w-auto p-0" align="start">
                            <CalendarComponent
                              mode="single"
                              selected={startDate}
                              onSelect={setStartDate}
                              initialFocus
                            />
                          </PopoverContent>
                        </Popover>
                      </div>

                      <div className="space-y-2">
                        <Label>End Date</Label>
                        <Popover>
                          <PopoverTrigger asChild>
                            <Button variant="outline" className="w-full justify-start text-left font-normal">
                              <Calendar className="mr-2 h-4 w-4" />
                              {endDate ? format(endDate, "PPP") : "Pick a date"}
                            </Button>
                          </PopoverTrigger>
                          <PopoverContent className="w-auto p-0" align="start">
                            <CalendarComponent mode="single" selected={endDate} onSelect={setEndDate} initialFocus />
                          </PopoverContent>
                        </Popover>
                      </div>

                      <div className="space-y-2">
                        <Label>Status</Label>
                        <Select value={statusFilter} onValueChange={setStatusFilter}>
                          <SelectTrigger>
                            <SelectValue placeholder="All statuses" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="ALL">All statuses</SelectItem>
                            <SelectItem value="PAID">Paid</SelectItem>
                            <SelectItem value="PENDING">Pending</SelectItem>
                            <SelectItem value="REFUNDED">Refunded</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>

                      <div className="space-y-2">
                        <Label>Payment Method</Label>
                        <Select value={paymentMethodFilter} onValueChange={setPaymentMethodFilter}>
                          <SelectTrigger>
                            <SelectValue placeholder="All methods" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="ALL">All methods</SelectItem>
                            <SelectItem value="Corporate Account">Corporate Account</SelectItem>
                            <SelectItem value="Credit Card">Credit Card</SelectItem>
                            <SelectItem value="Cash">Cash</SelectItem>
                            <SelectItem value="Check">Check</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </motion.div>
                  )}
                </AnimatePresence>
              </CardContent>
            </Card>
          </motion.div>

          {/* Results Summary */}
          <motion.div
            className="flex items-center justify-between text-sm text-[#3A4356] dark:text-[#CBD5E0]"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.3, delay: 0.4 }}
          >
            <span>
              Showing {paginatedReceipts.length} of {filteredReceipts.length} receipts
              {activeFiltersCount > 0 && ` (filtered from ${receipts.length} total)`}
            </span>
            <span>Total Value: {formatCurrency(statistics.totalAmount)}</span>
          </motion.div>

          {/* Receipts Table */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.4 }}
          >
            <Card>
              <CardContent className="p-0">
                <div className="overflow-x-auto">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead className="w-[120px]">
                          <Button
                            variant="ghost"
                            size="sm"
                            className="h-auto p-0 font-semibold"
                            onClick={() => handleSort("receiptNumber")}
                          >
                            Receipt #{getSortIcon("receiptNumber")}
                          </Button>
                        </TableHead>
                        <TableHead>
                          <Button
                            variant="ghost"
                            size="sm"
                            className="h-auto p-0 font-semibold"
                            onClick={() => handleSort("tailNumber")}
                          >
                            Tail Number
                            {getSortIcon("tailNumber")}
                          </Button>
                        </TableHead>
                        <TableHead>
                          <Button
                            variant="ghost"
                            size="sm"
                            className="h-auto p-0 font-semibold"
                            onClick={() => handleSort("customer")}
                          >
                            Customer
                            {getSortIcon("customer")}
                          </Button>
                        </TableHead>
                        <TableHead>Fuel Type</TableHead>
                        <TableHead className="text-right">Quantity</TableHead>
                        <TableHead className="text-right">
                          <Button
                            variant="ghost"
                            size="sm"
                            className="h-auto p-0 font-semibold"
                            onClick={() => handleSort("amount")}
                          >
                            Amount
                            {getSortIcon("amount")}
                          </Button>
                        </TableHead>
                        <TableHead>Payment Method</TableHead>
                        <TableHead>
                          <Button
                            variant="ghost"
                            size="sm"
                            className="h-auto p-0 font-semibold"
                            onClick={() => handleSort("status")}
                          >
                            Status
                            {getSortIcon("status")}
                          </Button>
                        </TableHead>
                        <TableHead>
                          <Button
                            variant="ghost"
                            size="sm"
                            className="h-auto p-0 font-semibold"
                            onClick={() => handleSort("createdAt")}
                          >
                            Date
                            {getSortIcon("createdAt")}
                          </Button>
                        </TableHead>
                        <TableHead className="w-[50px]"></TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {paginatedReceipts.length === 0 ? (
                        <TableRow>
                          <TableCell colSpan={10} className="text-center py-8">
                            <div className="flex flex-col items-center gap-2">
                              <Receipt className="h-8 w-8 text-muted-foreground" />
                              <p className="text-muted-foreground">
                                {activeFiltersCount > 0 ? "No receipts match your filters" : "No receipts found"}
                              </p>
                              {activeFiltersCount > 0 && (
                                <Button variant="outline" size="sm" onClick={clearFilters}>
                                  Clear filters
                                </Button>
                              )}
                            </div>
                          </TableCell>
                        </TableRow>
                      ) : (
                        paginatedReceipts.map((receipt, index) => (
                          <motion.tr
                            key={receipt.id}
                            initial={{ opacity: 0, y: 20 }}
                            animate={{ opacity: 1, y: 0 }}
                            transition={{ duration: 0.3, delay: index * 0.05 }}
                            className="hover:bg-muted/50"
                          >
                            <TableCell className="font-medium">{receipt.receiptNumber}</TableCell>
                            <TableCell>{receipt.tailNumber}</TableCell>
                            <TableCell>{receipt.customer}</TableCell>
                            <TableCell>{receipt.fuelType}</TableCell>
                            <TableCell className="text-right">{receipt.quantity.toLocaleString()} gal</TableCell>
                            <TableCell className="text-right font-medium">{formatCurrency(receipt.amount)}</TableCell>
                            <TableCell>{receipt.paymentMethod}</TableCell>
                            <TableCell>{getStatusBadge(receipt.status)}</TableCell>
                            <TableCell>{formatDateTime(receipt.createdAt)}</TableCell>
                            <TableCell>
                              <DropdownMenu>
                                <DropdownMenuTrigger asChild>
                                  <Button variant="ghost" size="sm" className="h-8 w-8 p-0">
                                    <MoreHorizontal className="h-4 w-4" />
                                  </Button>
                                </DropdownMenuTrigger>
                                <DropdownMenuContent align="end">
                                  <DropdownMenuItem onClick={() => setSelectedReceipt(receipt)}>
                                    <Eye className="h-4 w-4 mr-2" />
                                    View Details
                                  </DropdownMenuItem>
                                  <DropdownMenuItem asChild>
                                    <Link href={`/csr/receipts/${receipt.id}`}>
                                      <FileText className="h-4 w-4 mr-2" />
                                      Edit Receipt
                                    </Link>
                                  </DropdownMenuItem>
                                </DropdownMenuContent>
                              </DropdownMenu>
                            </TableCell>
                          </motion.tr>
                        ))
                      )}
                    </TableBody>
                  </Table>
                </div>
              </CardContent>
            </Card>
          </motion.div>

          {/* Pagination */}
          {totalPages > 1 && (
            <motion.div
              className="flex items-center justify-between"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 0.3, delay: 0.5 }}
            >
              <div className="text-sm text-muted-foreground">
                Page {currentPage} of {totalPages}
              </div>
              <div className="flex items-center gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                  disabled={currentPage === 1}
                >
                  Previous
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                  disabled={currentPage === totalPages}
                >
                  Next
                </Button>
              </div>
            </motion.div>
          )}
        </div>
      </main>

      {/* Receipt Details Dialog */}
      <Dialog open={!!selectedReceipt} onOpenChange={() => setSelectedReceipt(null)}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Receipt Details</DialogTitle>
            <DialogDescription>
              {selectedReceipt && `Receipt ${selectedReceipt.receiptNumber} - ${selectedReceipt.customer}`}
            </DialogDescription>
          </DialogHeader>
          {selectedReceipt && (
            <div className="space-y-6">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label className="text-sm font-medium text-muted-foreground">Receipt Number</Label>
                  <p className="font-medium">{selectedReceipt.receiptNumber}</p>
                </div>
                <div>
                  <Label className="text-sm font-medium text-muted-foreground">Status</Label>
                  <div className="mt-1">{getStatusBadge(selectedReceipt.status)}</div>
                </div>
                <div>
                  <Label className="text-sm font-medium text-muted-foreground">Tail Number</Label>
                  <p className="font-medium">{selectedReceipt.tailNumber}</p>
                </div>
                <div>
                  <Label className="text-sm font-medium text-muted-foreground">Customer</Label>
                  <p className="font-medium">{selectedReceipt.customer}</p>
                </div>
                <div>
                  <Label className="text-sm font-medium text-muted-foreground">Fuel Type</Label>
                  <p>{selectedReceipt.fuelType}</p>
                </div>
                <div>
                  <Label className="text-sm font-medium text-muted-foreground">Quantity</Label>
                  <p>{selectedReceipt.quantity.toLocaleString()} gallons</p>
                </div>
                <div>
                  <Label className="text-sm font-medium text-muted-foreground">Amount</Label>
                  <p className="font-medium text-lg">{formatCurrency(selectedReceipt.amount)}</p>
                </div>
                <div>
                  <Label className="text-sm font-medium text-muted-foreground">Payment Method</Label>
                  <p>{selectedReceipt.paymentMethod}</p>
                </div>
                <div>
                  <Label className="text-sm font-medium text-muted-foreground">Fueler</Label>
                  <p>{selectedReceipt.fuelerName}</p>
                </div>
                <div>
                  <Label className="text-sm font-medium text-muted-foreground">Location</Label>
                  <p>{selectedReceipt.location}</p>
                </div>
                <div>
                  <Label className="text-sm font-medium text-muted-foreground">Created</Label>
                  <p>{formatDateTime(selectedReceipt.createdAt)}</p>
                </div>
                {selectedReceipt.updatedAt && (
                  <div>
                    <Label className="text-sm font-medium text-muted-foreground">Updated</Label>
                    <p>{formatDateTime(selectedReceipt.updatedAt)}</p>
                  </div>
                )}
              </div>

              {selectedReceipt.notes && (
                <div>
                  <Label className="text-sm font-medium text-muted-foreground">Notes</Label>
                  <p className="mt-1 p-3 bg-muted rounded-md">{selectedReceipt.notes}</p>
                </div>
              )}

              {selectedReceipt.status === "REFUNDED" && (
                <div className="p-4 bg-red-50 dark:bg-red-950/20 rounded-lg border border-red-200 dark:border-red-800">
                  <h4 className="font-semibold text-red-800 dark:text-red-200 mb-2">Refund Information</h4>
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <Label className="text-sm font-medium text-red-700 dark:text-red-300">Refund Amount</Label>
                      <p className="font-medium">{formatCurrency(selectedReceipt.refundAmount || 0)}</p>
                    </div>
                    <div>
                      <Label className="text-sm font-medium text-red-700 dark:text-red-300">Refunded At</Label>
                      <p>{selectedReceipt.refundedAt ? formatDateTime(selectedReceipt.refundedAt) : "N/A"}</p>
                    </div>
                  </div>
                  {selectedReceipt.refundReason && (
                    <div className="mt-2">
                      <Label className="text-sm font-medium text-red-700 dark:text-red-300">Refund Reason</Label>
                      <p className="mt-1">{selectedReceipt.refundReason}</p>
                    </div>
                  )}
                </div>
              )}

              <div className="flex justify-end gap-2">
                <Button variant="outline" onClick={() => setSelectedReceipt(null)}>
                  Close
                </Button>
                <Button asChild>
                  <Link href={`/csr/receipts/${selectedReceipt.id}`}>Edit Receipt</Link>
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  )
}

================
File: frontend/app/csr-login/loading.tsx
================
export default function Loading() {
  return (
    <div className="min-h-screen flex items-center justify-center bg-background">
      <div className="flex flex-col items-center gap-4">
        <div className="h-8 w-8 border-4 border-primary border-t-transparent rounded-full animate-spin"></div>
        <p>Loading CSR login...</p>
      </div>
    </div>
  )
}

================
File: frontend/app/csr-login/page.tsx
================
"use client"

import type React from "react"

import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import Header from "@/components/header"
import Footer from "@/components/footer"
import Image from "next/image"
import { useEffect, useState } from "react"
import { Lock, User, Eye, EyeOff, AlertCircle, Users } from "lucide-react"
import Link from "next/link"
import { useRouter } from "next/navigation"

export default function CSRLoginPage() {
  const router = useRouter()

  // Scroll to top when page loads
  useEffect(() => {
    window.scrollTo(0, 0)
  }, [])

  const [isVisible, setIsVisible] = useState(false)
  const [showPassword, setShowPassword] = useState(false)
  const [email, setEmail] = useState("")
  const [password, setPassword] = useState("")
  const [error, setError] = useState("")
  const [isLoading, setIsLoading] = useState(false)

  useEffect(() => {
    setIsVisible(true)
  }, [])

  // Admin credentials
  const ADMIN_EMAIL = "fbosaas@gmail.com"
  const ADMIN_PASSWORD = "b4H6a4JJT2V*ccUCb_69"

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault()
    setError("")
    setIsLoading(true)

    // Simulate network delay
    await new Promise((resolve) => setTimeout(resolve, 1000))

    // Check if admin credentials
    if (email === ADMIN_EMAIL && password === ADMIN_PASSWORD) {
      localStorage.setItem(
        "fboUser",
        JSON.stringify({
          email: ADMIN_EMAIL,
          role: "csr",
          name: "Super User",
          isLoggedIn: true,
        }),
      )
      router.push("/csr/dashboard")
      return
    }

    // Check if CSR exists in any member's staff list
    const allMembers = JSON.parse(localStorage.getItem("fboUsers") || "[]")
    let foundMember = null
    let foundCSR = null

    for (const member of allMembers) {
      const staffKey = `${member.email}_staffMembers`
      const staffMembers = JSON.parse(localStorage.getItem(staffKey) || "[]")

      const csr = staffMembers.find(
        (staff: any) => staff.email === email && staff.role === "csr" && staff.status === "active",
      )

      if (csr) {
        foundMember = member
        foundCSR = csr
        break
      }
    }

    if (foundCSR) {
      // For simplicity, we're not checking passwords in this demo
      // In a real app, you would verify the password here
      localStorage.setItem(
        "fboUser",
        JSON.stringify({
          email: foundCSR.email,
          role: "csr",
          name: foundCSR.name,
          memberId: foundMember.id,
          isLoggedIn: true,
        }),
      )
      router.push("/csr/dashboard")
    } else {
      setError("Invalid email or inactive CSR account")
    }

    setIsLoading(false)
  }

  return (
    <div className="flex min-h-screen flex-col">
      <Header />

      <main className="flex-1 relative">
        {/* Background Image with Overlay */}
        <div className="absolute inset-0 z-0 overflow-hidden">
          <Image
            src="/images/aviation-data-background.png"
            alt="Aviation data background"
            fill
            style={{ objectFit: "cover" }}
            priority
          />
          <div className="absolute inset-0 bg-black/30 backdrop-blur-sm"></div>
        </div>

        <div className="container px-4 md:px-6 relative z-10 py-12 md:py-24">
          <div className="flex flex-col items-center justify-center space-y-8 text-center">
            <div
              className={`space-y-4 max-w-[600px] mx-auto transition-all duration-1000 ${isVisible ? "opacity-100 translate-y-0" : "opacity-0 translate-y-10"}`}
            >
              <div className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-primary/20 text-primary mb-2">
                <Users className="h-4 w-4 mr-1" />
                <span>CSR Access</span>
              </div>
              <h1 className="text-3xl font-bold tracking-tighter md:text-5xl text-white">CSR Login</h1>
              <p className="text-gray-200 md:text-xl/relaxed text-center">
                Access your CSR dashboard to manage customer interactions.
              </p>
            </div>
            <div
              className={`w-full max-w-md mx-auto transition-all duration-1000 delay-300 ${isVisible ? "opacity-100 translate-y-0" : "opacity-0 translate-y-10"}`}
            >
              <Card className="bg-white/10 backdrop-blur-md border-gray-800/20 shadow-lg card-futuristic">
                <CardHeader>
                  <CardTitle className="text-white">CSR Login</CardTitle>
                  <CardDescription className="text-gray-300">
                    Enter your credentials to access your CSR dashboard
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <form className="grid gap-3 md:gap-4" onSubmit={handleLogin}>
                    {error && (
                      <div className="bg-red-500/10 border border-red-500/50 rounded-md p-3 flex items-start gap-2">
                        <AlertCircle className="h-5 w-5 text-red-500 mt-0.5 flex-shrink-0" />
                        <p className="text-red-500 text-sm">{error}</p>
                      </div>
                    )}
                    <div className="grid gap-2">
                      <Label htmlFor="email" className="text-white">
                        Email
                      </Label>
                      <div className="relative">
                        <User className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                        <Input
                          id="email"
                          placeholder="name@example.com"
                          type="email"
                          className="pl-10 bg-white/80 text-gray-900"
                          required
                          value={email}
                          onChange={(e) => setEmail(e.target.value)}
                        />
                      </div>
                    </div>
                    <div className="grid gap-2">
                      <div className="flex items-center justify-between">
                        <Label htmlFor="password" className="text-white">
                          Password
                        </Label>
                        <Link href="#" className="text-sm text-primary underline-offset-4 hover:underline">
                          Forgot password?
                        </Link>
                      </div>
                      <div className="relative">
                        <Lock className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                        <Input
                          id="password"
                          type={showPassword ? "text" : "password"}
                          className="pl-10 pr-10 bg-white/80 text-gray-900"
                          required
                          value={password}
                          onChange={(e) => setPassword(e.target.value)}
                        />
                        <button
                          type="button"
                          onClick={() => setShowPassword(!showPassword)}
                          className="absolute right-3 top-3 text-gray-400 hover:text-gray-600"
                        >
                          {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                          <span className="sr-only">{showPassword ? "Hide password" : "Show password"}</span>
                        </button>
                      </div>
                    </div>
                    <Button
                      className="w-full bg-primary hover:bg-primary/90 glow-effect"
                      type="submit"
                      disabled={isLoading}
                    >
                      {isLoading ? (
                        <>
                          <span className="mr-2">Logging in</span>
                          <div className="h-4 w-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                        </>
                      ) : (
                        <span className="flex items-center justify-center">Log In</span>
                      )}
                    </Button>
                  </form>
                </CardContent>
                <CardFooter className="flex flex-col space-y-4">
                  <div className="text-sm text-gray-300 text-center">
                    <Link href="/login" className="text-primary hover:underline">
                      Back to main login
                    </Link>
                  </div>
                </CardFooter>
              </Card>
            </div>
          </div>
        </div>

        {/* Animated flight path */}
        <div className="absolute bottom-0 left-0 w-full h-12 overflow-hidden">
          <div className="flight-line w-full h-full"></div>
        </div>
      </main>

      <Footer />
    </div>
  )
}

================
File: frontend/app/faq/loading.tsx
================
export default function Loading() {
  return null
}

================
File: frontend/app/faq/page.tsx
================
"use client"

import Header from "@/components/header"
import Footer from "@/components/footer"
import { useEffect, useState } from "react"
import { HelpCircle, ChevronDown, ChevronUp, Plane, Search } from "lucide-react"
import { Button } from "@/components/ui/button"
import Link from "next/link"
import { Input } from "@/components/ui/input"

export default function FAQPage() {
  // Scroll to top when page loads
  useEffect(() => {
    window.scrollTo(0, 0)
  }, [])

  const [isVisible, setIsVisible] = useState(false)
  const [searchQuery, setSearchQuery] = useState("")
  const [expandedQuestions, setExpandedQuestions] = useState<Record<string, boolean>>({})

  useEffect(() => {
    setIsVisible(true)
  }, [])

  const toggleQuestion = (id: string) => {
    setExpandedQuestions((prev) => ({
      ...prev,
      [id]: !prev[id],
    }))
  }

  const faqCategories = [
    {
      title: "General Questions",
      questions: [
        {
          id: "what-is-fbo-launchpad",
          question: "What is FBO LaunchPad?",
          answer:
            "FBO LaunchPad is an AI-powered platform designed specifically for Fixed-Base Operators (FBOs) to monitor aircraft ownership changes in real-time. Our system continuously tracks aircraft registration data and alerts FBOs when ownership changes are detected, helping to streamline operations, improve billing accuracy, and enhance customer service.",
        },
        {
          id: "how-does-it-work",
          question: "How does FBO LaunchPad work?",
          answer:
            "Our platform uses advanced AI and machine learning algorithms to monitor official aircraft registration databases. When you add aircraft tail numbers to your account, our system continuously checks for ownership changes. When a change is detected, you receive instant notifications through your dashboard and email, allowing you to update your records immediately.",
        },
        {
          id: "who-is-it-for",
          question: "Who is FBO LaunchPad designed for?",
          answer:
            "FBO LaunchPad is specifically designed for Fixed-Base Operators (FBOs) of all sizes. Whether you're a small regional FBO or a large multi-location operation, our platform helps you maintain accurate aircraft ownership records, improve billing efficiency, and enhance your operational workflow.",
        },
      ],
    },
    {
      title: "Features & Benefits",
      questions: [
        {
          id: "key-features",
          question: "What are the key features of FBO LaunchPad?",
          answer: (
            <>
              <p className="mb-2">FBO LaunchPad offers several key features designed to streamline FBO operations:</p>
              <ul className="list-disc pl-6 space-y-1">
                <li>Real-time aircraft ownership monitoring and alerts</li>
                <li>Automated verification of aircraft registration data</li>
                <li>Instant notifications when ownership changes are detected</li>
                <li>User-friendly dashboard for tracking all monitored aircraft</li>
                <li>Secure cloud-based platform accessible from anywhere</li>
                <li>Integration capabilities with existing FBO management software</li>
              </ul>
            </>
          ),
        },
        {
          id: "main-benefits",
          question: "What are the main benefits of using FBO LaunchPad?",
          answer: (
            <>
              <p className="mb-2">Using FBO LaunchPad provides numerous benefits for FBOs:</p>
              <ul className="list-disc pl-6 space-y-1">
                <li>Reduced billing errors by ensuring invoices go to the current aircraft owner</li>
                <li>Saved time by eliminating manual ownership verification processes</li>
                <li>Improved cash flow through more accurate and timely billing</li>
                <li>Enhanced security by always knowing the current responsible party</li>
                <li>Better customer relationships through proactive communication with new owners</li>
                <li>Streamlined operations with accurate, up-to-date aircraft information</li>
              </ul>
            </>
          ),
        },
        {
          id: "aircraft-types",
          question: "What types of aircraft can be monitored?",
          answer:
            "FBO LaunchPad can monitor any aircraft with a valid registration number (tail number) in the FAA registry or other supported international aircraft registries. This includes private jets, turboprops, piston aircraft, helicopters, and commercial aircraft.",
        },
      ],
    },
    {
      title: "Technical & Implementation",
      questions: [
        {
          id: "implementation-time",
          question: "How long does it take to implement FBO LaunchPad?",
          answer:
            "Implementation is quick and straightforward. Most FBOs are up and running within 1-2 business days. The process involves setting up your account, adding your aircraft tail numbers to the monitoring system, and brief training for your team members. Our support team is available to assist throughout the implementation process.",
        },
        {
          id: "technical-requirements",
          question: "What are the technical requirements for using FBO LaunchPad?",
          answer:
            "FBO LaunchPad is a cloud-based solution that works on any modern web browser. There's no need for special hardware or software installation. You simply need a computer, tablet, or smartphone with internet access. We also offer mobile apps for iOS and Android for on-the-go access.",
        },
        {
          id: "integration-capabilities",
          question: "Can FBO LaunchPad integrate with our existing FBO management software?",
          answer:
            "Yes, FBO LaunchPad is designed with integration capabilities in mind. We offer API access that allows for seamless integration with most popular FBO management systems. Our team can work with you to determine the best integration approach for your specific software environment.",
        },
      ],
    },
    {
      title: "Pricing & Subscription",
      questions: [
        {
          id: "pricing-model",
          question: "How is FBO LaunchPad priced?",
          answer:
            "FBO LaunchPad uses a subscription-based pricing model based on the number of aircraft you need to monitor. We offer tiered plans to accommodate FBOs of all sizes, from small operations to large multi-location businesses. Contact our sales team for a customized quote based on your specific needs.",
        },
        {
          id: "contract-length",
          question: "Is there a long-term contract requirement?",
          answer:
            "We offer flexible subscription options. While we do provide discounts for annual commitments, we also offer month-to-month plans for FBOs who prefer that flexibility. There are no hidden fees or long-term obligations unless you choose an annual plan.",
        },
        {
          id: "free-trial",
          question: "Do you offer a free trial?",
          answer:
            "Yes, we offer a 14-day free trial that allows you to experience the full functionality of FBO LaunchPad. During the trial, you can monitor up to 10 aircraft and receive real-time alerts. This gives you a hands-on opportunity to see how our platform can benefit your operation before making a commitment.",
        },
      ],
    },
    {
      title: "Data Security & Privacy",
      questions: [
        {
          id: "data-security",
          question: "How secure is my data with FBO LaunchPad?",
          answer:
            "Data security is a top priority at FBO LaunchPad. We use industry-standard encryption protocols, secure cloud infrastructure, and regular security audits to protect your data. All information is transmitted using secure HTTPS connections, and our databases are protected by multiple layers of security measures.",
        },
        {
          id: "data-ownership",
          question: "Who owns the data in the FBO LaunchPad system?",
          answer:
            "You maintain ownership of all your data within the FBO LaunchPad system. We act as a data processor, not a data controller. We do not sell or share your data with third parties. Our role is simply to provide the service that helps you monitor aircraft ownership changes.",
        },
        {
          id: "privacy-compliance",
          question: "Is FBO LaunchPad compliant with privacy regulations?",
          answer:
            "Yes, FBO LaunchPad is designed with privacy compliance in mind. We adhere to relevant data protection regulations including GDPR and CCPA where applicable. Our privacy practices are transparent and detailed in our Privacy Policy, which you can review at any time.",
        },
      ],
    },
    {
      title: "Support & Training",
      questions: [
        {
          id: "support-options",
          question: "What support options are available?",
          answer: (
            <>
              <p className="mb-2">We offer comprehensive support through multiple channels:</p>
              <ul className="list-disc pl-6 space-y-1">
                <li>Email support with guaranteed response times</li>
                <li>Live chat support during business hours</li>
                <li>Phone support for urgent issues</li>
                <li>Comprehensive knowledge base and video tutorials</li>
                <li>Regular webinars and training sessions</li>
              </ul>
              <p className="mt-2">
                Premium support plans with dedicated account managers are available for larger FBOs.
              </p>
            </>
          ),
        },
        {
          id: "training-provided",
          question: "What training is provided for new users?",
          answer:
            "All new customers receive complimentary onboarding training for their team members. This includes live demonstration sessions, access to our video tutorial library, and personalized guidance from our customer success team. We also provide detailed documentation and regular webinars to help you maximize the value of FBO LaunchPad.",
        },
        {
          id: "system-updates",
          question: "How often is the system updated?",
          answer:
            "FBO LaunchPad is continuously improved with regular updates. Minor enhancements and bug fixes are deployed seamlessly without service interruption. Major feature updates are typically released quarterly, with advance notice and documentation provided to all customers. We value customer feedback and many of our updates are based on suggestions from our user community.",
        },
      ],
    },
  ]

  const filteredFAQs = searchQuery
    ? faqCategories
        .map((category) => ({
          ...category,
          questions: category.questions.filter(
            (q) =>
              q.question.toLowerCase().includes(searchQuery.toLowerCase()) ||
              (typeof q.answer === "string" && q.answer.toLowerCase().includes(searchQuery.toLowerCase())),
          ),
        }))
        .filter((category) => category.questions.length > 0)
    : faqCategories

  return (
    <div className="flex min-h-screen flex-col">
      <Header />

      <main className="flex-1 bg-background">
        <div className="relative py-12 md:py-16 bg-primary/10 dark:bg-primary/5 border-b">
          <div className="absolute inset-0 tech-pattern opacity-10"></div>
          <div className="container px-4 md:px-6 relative">
            <div
              className={`max-w-3xl mx-auto transition-all duration-1000 ${
                isVisible ? "opacity-100 translate-y-0" : "opacity-0 translate-y-10"
              }`}
            >
              <div className="flex items-center gap-2 mb-4">
                <HelpCircle className="h-6 w-6 text-primary" />
                <h1 className="text-3xl font-bold tracking-tighter md:text-4xl">Frequently Asked Questions</h1>
              </div>
              <p className="text-muted-foreground md:text-lg">
                Find answers to common questions about FBO LaunchPad and how it can help your FBO operations.
              </p>
            </div>
          </div>
        </div>

        <div className="container px-4 md:px-6 py-12 md:py-16">
          <div className="max-w-3xl mx-auto">
            {/* Search Bar */}
            <div className="mb-8">
              <div className="relative">
                <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                <Input
                  type="search"
                  placeholder="Search for questions..."
                  className="pl-10"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                />
              </div>
            </div>

            {/* FAQ Content */}
            <div className="space-y-10">
              {filteredFAQs.map((category) =>
                category.questions.length > 0 ? (
                  <div key={category.title} className="space-y-4">
                    <h2 className="text-2xl font-bold">{category.title}</h2>
                    <div className="space-y-4">
                      {category.questions.map((item) => (
                        <div
                          key={item.id}
                          className="border rounded-lg overflow-hidden transition-all duration-200 hover:border-primary/50"
                        >
                          <button
                            className="flex justify-between items-center w-full p-4 text-left"
                            onClick={() => toggleQuestion(item.id)}
                            aria-expanded={expandedQuestions[item.id]}
                          >
                            <span className="font-medium text-lg">{item.question}</span>
                            {expandedQuestions[item.id] ? (
                              <ChevronUp className="h-5 w-5 text-primary flex-shrink-0" />
                            ) : (
                              <ChevronDown className="h-5 w-5 text-muted-foreground flex-shrink-0" />
                            )}
                          </button>
                          {expandedQuestions[item.id] && (
                            <div className="p-4 pt-0 border-t">
                              <div className="prose dark:prose-invert max-w-none">
                                {typeof item.answer === "string" ? <p>{item.answer}</p> : item.answer}
                              </div>
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  </div>
                ) : null,
              )}

              {filteredFAQs.length === 0 && (
                <div className="text-center py-10">
                  <HelpCircle className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                  <h3 className="text-xl font-medium mb-2">No matching questions found</h3>
                  <p className="text-muted-foreground mb-6">
                    We couldn't find any questions matching your search. Try different keywords or browse all
                    categories.
                  </p>
                  <Button variant="outline" onClick={() => setSearchQuery("")}>
                    Clear Search
                  </Button>
                </div>
              )}
            </div>

            {/* Still Have Questions Section */}
            <div className="mt-16 p-6 border rounded-xl bg-primary/5 text-center">
              <h2 className="text-xl font-bold mb-2">Still Have Questions?</h2>
              <p className="text-muted-foreground mb-4">
                We're here to help. Contact our team for personalized assistance with any questions about FBO LaunchPad.
              </p>
              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <Link href="/request-demo">
                  <Button className="w-full sm:w-auto">
                    <Plane className="h-4 w-4 mr-2 rotate-45" />
                    Request a Demo
                  </Button>
                </Link>
                <Link href="/request-demo">
                  <Button variant="outline" className="w-full sm:w-auto">
                    Contact Support
                  </Button>
                </Link>
              </div>
            </div>
          </div>
        </div>
      </main>

      <Footer />
    </div>
  )
}

================
File: frontend/app/fueler/completed/page.tsx
================
"use client"

import { useEffect, useState } from "react"
import { CheckCircle, FileText } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import Link from "next/link"

// Local storage key for fuel orders
const FUEL_ORDERS_STORAGE_KEY = "fboFuelOrders"

export default function CompletedOrdersPage() {
  const [user, setUser] = useState<any>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [completedOrders, setCompletedOrders] = useState<any[]>([])
  const [timeFilter, setTimeFilter] = useState<"today" | "week" | "all">("all")

  useEffect(() => {
    // Check if user is logged in and is Fueler
    const userData = localStorage.getItem("fboUser")
    if (!userData) {
      return
    }

    const parsedUser = JSON.parse(userData)
    if (!parsedUser.isLoggedIn || parsedUser.role !== "fueler") {
      return
    }

    setUser(parsedUser)
    setIsLoading(false)
  }, [])

  useEffect(() => {
    if (!isLoading) {
      // Load fuel orders from localStorage
      const storedOrders = localStorage.getItem(FUEL_ORDERS_STORAGE_KEY)
      if (storedOrders) {
        const allOrders = JSON.parse(storedOrders)
        setCompletedOrders(allOrders.filter((order: any) => order.status === "COMPLETED"))
      }
    }
  }, [isLoading])

  const getFilteredOrders = () => {
    const now = new Date()
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate())
    const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000)

    switch (timeFilter) {
      case "today":
        return completedOrders.filter((order) => new Date(order.completedAt) >= today)
      case "week":
        return completedOrders.filter((order) => new Date(order.completedAt) >= weekAgo)
      case "all":
      default:
        return completedOrders
    }
  }

  const filteredOrders = getFilteredOrders()

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-[60vh]">
        <div className="flex flex-col items-center gap-4">
          <div className="h-8 w-8 border-4 border-primary border-t-transparent rounded-full animate-spin"></div>
          <p>Loading completed orders...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="flex flex-col gap-6">
      <div className="flex items-center justify-between">
        <h1 className="text-3xl font-bold">Completed Fuel Orders</h1>
        <div className="flex items-center gap-2">
          <CheckCircle className="h-5 w-5 text-green-500" />
          <span className="font-medium">{filteredOrders.length} completed orders</span>
        </div>
      </div>

      <div className="flex gap-2">
        <Button
          variant={timeFilter === "today" ? "default" : "outline"}
          size="sm"
          onClick={() => setTimeFilter("today")}
        >
          Today
        </Button>
        <Button variant={timeFilter === "week" ? "default" : "outline"} size="sm" onClick={() => setTimeFilter("week")}>
          This Week
        </Button>
        <Button variant={timeFilter === "all" ? "default" : "outline"} size="sm" onClick={() => setTimeFilter("all")}>
          All Time
        </Button>
      </div>

      {filteredOrders.length === 0 ? (
        <Card>
          <CardContent className="flex flex-col items-center justify-center py-12">
            <CheckCircle className="h-12 w-12 text-muted-foreground mb-4" />
            <h3 className="text-xl font-medium mb-2">No Completed Orders</h3>
            <p className="text-muted-foreground text-center max-w-md">
              There are no completed fuel orders for the selected time period.
            </p>
            <div className="flex gap-4 mt-6">
              <Button asChild variant="outline">
                <Link href="/fueler/dashboard">Return to Dashboard</Link>
              </Button>
              <Button asChild>
                <Link href="/fueler/pending-orders">View Pending Orders</Link>
              </Button>
            </div>
          </CardContent>
        </Card>
      ) : (
        <div className="grid grid-cols-1 gap-4">
          {filteredOrders
            .sort((a, b) => new Date(b.completedAt).getTime() - new Date(a.completedAt).getTime())
            .map((order) => (
              <Card key={order.id} className="overflow-hidden">
                <CardHeader className="pb-2 bg-muted/50">
                  <div className="flex justify-between items-start">
                    <div>
                      <CardTitle className="text-lg">Tail Number: {order.tailNumber}</CardTitle>
                      <CardDescription>{order.aircraftType}</CardDescription>
                    </div>
                    <Badge variant="outline" className="bg-green-500/10 text-green-600 border-green-200">
                      Completed
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent className="pt-4">
                  <div className="space-y-2">
                    <div className="grid grid-cols-2 gap-2">
                      <div className="text-sm font-medium">Customer:</div>
                      <div className="text-sm">{order.customer}</div>
                    </div>
                    <div className="grid grid-cols-2 gap-2">
                      <div className="text-sm font-medium">Fuel Type:</div>
                      <div className="text-sm">{order.fuelType}</div>
                    </div>
                    <div className="grid grid-cols-2 gap-2">
                      <div className="text-sm font-medium">Requested Quantity:</div>
                      <div className="text-sm">{order.requestedQuantity} gallons</div>
                    </div>
                    <div className="grid grid-cols-2 gap-2">
                      <div className="text-sm font-medium">Actual Quantity:</div>
                      <div className="text-sm">{order.actualQuantity} gallons</div>
                    </div>
                    <div className="grid grid-cols-2 gap-2">
                      <div className="text-sm font-medium">Location:</div>
                      <div className="text-sm">{order.gate}</div>
                    </div>
                    {order.completionNotes && (
                      <div className="grid grid-cols-2 gap-2">
                        <div className="text-sm font-medium">Completion Notes:</div>
                        <div className="text-sm">{order.completionNotes}</div>
                      </div>
                    )}
                  </div>
                </CardContent>
                <CardFooter className="border-t bg-muted/30 flex justify-between">
                  <div className="text-sm text-muted-foreground">
                    Completed: {new Date(order.completedAt).toLocaleString()}
                  </div>
                  <Button size="sm" variant="outline" asChild>
                    <Link href={`/fueler/receipts/${order.id}`}>
                      <FileText className="h-4 w-4 mr-1" /> View Receipt
                    </Link>
                  </Button>
                </CardFooter>
              </Card>
            ))}
        </div>
      )}
    </div>
  )
}

================
File: frontend/app/fueler/dashboard/loading.tsx
================
export default function Loading() {
  return (
    <div className="min-h-screen flex items-center justify-center bg-background">
      <div className="flex flex-col items-center gap-4">
        <div className="h-8 w-8 border-4 border-primary border-t-transparent rounded-full animate-spin"></div>
        <p>Loading Fueler dashboard...</p>
      </div>
    </div>
  )
}

================
File: frontend/app/fueler/dashboard/page.tsx
================
"use client"

import { useEffect, useState } from "react"
import { Droplet, CheckCircle, FileText } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import Link from "next/link"

// Mock fuel orders for demo
const MOCK_FUEL_ORDERS = [
  {
    id: 101,
    tailNumber: "N12345",
    aircraftType: "Boeing 737",
    customer: "Example Airlines",
    fuelType: "Jet A",
    requestedQuantity: "1000",
    status: "PENDING",
    createdAt: new Date(Date.now() - 3600000).toISOString(), // 1 hour ago
    notes: "Priority fueling needed",
    gate: "A12",
  },
  {
    id: 102,
    tailNumber: "N54321",
    aircraftType: "Airbus A320",
    customer: "Test Airways",
    fuelType: "Jet A",
    requestedQuantity: "1500",
    status: "PENDING",
    createdAt: new Date(Date.now() - 7200000).toISOString(), // 2 hours ago
    notes: "Standard fueling",
    gate: "B5",
  },
  {
    id: 103,
    tailNumber: "N98765",
    aircraftType: "Cessna 172",
    customer: "Private Owner",
    fuelType: "Avgas",
    requestedQuantity: "50",
    status: "IN_PROGRESS",
    createdAt: new Date(Date.now() - 1800000).toISOString(), // 30 minutes ago
    notes: "Pilot will be present",
    gate: "GA Terminal",
  },
  {
    id: 104,
    tailNumber: "N11111",
    aircraftType: "Gulfstream G650",
    customer: "Executive Jets",
    fuelType: "Jet A",
    requestedQuantity: "2000",
    status: "COMPLETED",
    createdAt: new Date(Date.now() - 86400000).toISOString(), // 1 day ago
    completedAt: new Date(Date.now() - 82800000).toISOString(), // 23 hours ago
    actualQuantity: "2100",
    notes: "Full tank requested",
    gate: "Private Terminal",
    fuelerId: 1,
    fuelerName: "John Smith",
  },
  {
    id: 105,
    tailNumber: "N22222",
    aircraftType: "Bombardier Global 7500",
    customer: "Luxury Air",
    fuelType: "Jet A",
    requestedQuantity: "2500",
    status: "COMPLETED",
    createdAt: new Date(Date.now() - 172800000).toISOString(), // 2 days ago
    completedAt: new Date(Date.now() - 169200000).toISOString(), // 47 hours ago
    actualQuantity: "2450",
    notes: "Top off tanks",
    gate: "Private Terminal",
    fuelerId: 1,
    fuelerName: "John Smith",
  },
]

// Local storage key for fuel orders
const FUEL_ORDERS_STORAGE_KEY = "fboFuelOrders"

export default function FuelerDashboard() {
  const [user, setUser] = useState<any>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [fuelOrders, setFuelOrders] = useState<any[]>([])
  const [activeTab, setActiveTab] = useState("pending")
  const [selectedOrder, setSelectedOrder] = useState<any>(null)
  const [isCompletingOrder, setIsCompletingOrder] = useState(false)
  const [actualQuantity, setActualQuantity] = useState("")
  const [completionNotes, setCompletionNotes] = useState("")
  const [error, setError] = useState("")

  useEffect(() => {
    // Check if user is logged in and is Fueler
    const userData = localStorage.getItem("fboUser")
    if (!userData) {
      return
    }

    const parsedUser = JSON.parse(userData)
    if (!parsedUser.isLoggedIn || parsedUser.role !== "fueler") {
      return
    }

    setUser(parsedUser)
    setIsLoading(false)
  }, [])

  useEffect(() => {
    if (!isLoading) {
      // Load fuel orders from localStorage or use mock data
      const storedOrders = localStorage.getItem(FUEL_ORDERS_STORAGE_KEY)
      if (storedOrders) {
        setFuelOrders(JSON.parse(storedOrders))
      } else {
        // Initialize with mock data
        setFuelOrders(MOCK_FUEL_ORDERS)
        localStorage.setItem(FUEL_ORDERS_STORAGE_KEY, JSON.stringify(MOCK_FUEL_ORDERS))
      }
    }
  }, [isLoading])

  const handleTabChange = (value: string) => {
    setActiveTab(value)
  }

  const startFueling = (order: any) => {
    // Update order status to IN_PROGRESS
    const updatedOrders = fuelOrders.map((o) => (o.id === order.id ? { ...o, status: "IN_PROGRESS" } : o))
    setFuelOrders(updatedOrders)
    localStorage.setItem(FUEL_ORDERS_STORAGE_KEY, JSON.stringify(updatedOrders))
  }

  const openCompletionDialog = (order: any) => {
    setSelectedOrder(order)
    setActualQuantity(order.requestedQuantity)
    setCompletionNotes("")
    setError("")
    setIsCompletingOrder(true)
  }

  const completeFueling = () => {
    if (!actualQuantity || Number.parseFloat(actualQuantity) <= 0) {
      setError("Please enter a valid fuel quantity")
      return
    }

    // Update order status to COMPLETED
    const now = new Date().toISOString()
    const updatedOrders = fuelOrders.map((o) =>
      o.id === selectedOrder.id
        ? {
            ...o,
            status: "COMPLETED",
            completedAt: now,
            actualQuantity,
            completionNotes,
            fuelerId: 1,
            fuelerName: user?.name || "Fueler",
          }
        : o,
    )

    setFuelOrders(updatedOrders)
    localStorage.setItem(FUEL_ORDERS_STORAGE_KEY, JSON.stringify(updatedOrders))
    setIsCompletingOrder(false)
    setSelectedOrder(null)
  }

  const getFilteredOrders = () => {
    switch (activeTab) {
      case "pending":
        return fuelOrders.filter((o) => o.status === "PENDING")
      case "in_progress":
        return fuelOrders.filter((o) => o.status === "IN_PROGRESS")
      case "completed":
        return fuelOrders.filter((o) => o.status === "COMPLETED")
      default:
        return fuelOrders
    }
  }

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "PENDING":
        return (
          <Badge variant="outline" className="bg-yellow-500/10 text-yellow-600 border-yellow-200">
            Pending
          </Badge>
        )
      case "IN_PROGRESS":
        return (
          <Badge variant="outline" className="bg-blue-500/10 text-blue-600 border-blue-200">
            In Progress
          </Badge>
        )
      case "COMPLETED":
        return (
          <Badge variant="outline" className="bg-green-500/10 text-green-600 border-green-200">
            Completed
          </Badge>
        )
      default:
        return <Badge variant="outline">{status}</Badge>
    }
  }

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-[60vh]">
        <div className="flex flex-col items-center gap-4">
          <div className="h-8 w-8 border-4 border-primary border-t-transparent rounded-full animate-spin"></div>
          <p>Loading dashboard...</p>
        </div>
      </div>
    )
  }

  const filteredOrders = getFilteredOrders()

  return (
    <div className="flex flex-col gap-6">
      <div className="flex items-center justify-between">
        <h1 className="text-3xl font-bold">Fueler Dashboard</h1>
        <div className="text-sm text-muted-foreground">Welcome, {user?.name || "Fueler"}</div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-lg">Pending Tasks</CardTitle>
            <CardDescription>Aircraft waiting for fueling</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <Droplet className="h-8 w-8 text-green-500" />
                <div>
                  <div className="text-2xl font-bold">{fuelOrders.filter((o) => o.status === "PENDING").length}</div>
                  <div className="text-xs text-muted-foreground">Pending fueling</div>
                </div>
              </div>
              <Button size="sm" onClick={() => setActiveTab("pending")}>
                View All
              </Button>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-lg">In Progress</CardTitle>
            <CardDescription>Currently fueling</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <Droplet className="h-8 w-8 text-blue-500" />
                <div>
                  <div className="text-2xl font-bold">
                    {fuelOrders.filter((o) => o.status === "IN_PROGRESS").length}
                  </div>
                  <div className="text-xs text-muted-foreground">In progress</div>
                </div>
              </div>
              <Button size="sm" onClick={() => setActiveTab("in_progress")}>
                View All
              </Button>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-lg">Completed Today</CardTitle>
            <CardDescription>Today's completed fueling</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <CheckCircle className="h-8 w-8 text-green-500" />
                <div>
                  <div className="text-2xl font-bold">
                    {
                      fuelOrders.filter(
                        (o) =>
                          o.status === "COMPLETED" &&
                          new Date(o.completedAt).toDateString() === new Date().toDateString(),
                      ).length
                    }
                  </div>
                  <div className="text-xs text-muted-foreground">Completed today</div>
                </div>
              </div>
              <Button size="sm" onClick={() => setActiveTab("completed")}>
                View All
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader>
          <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
            <div>
              <CardTitle>Fuel Orders</CardTitle>
              <CardDescription>Manage aircraft fueling tasks</CardDescription>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <Tabs defaultValue="pending" value={activeTab} onValueChange={handleTabChange}>
            <TabsList className="mb-4">
              <TabsTrigger value="pending">Pending</TabsTrigger>
              <TabsTrigger value="in_progress">In Progress</TabsTrigger>
              <TabsTrigger value="completed">Completed</TabsTrigger>
            </TabsList>

            <TabsContent value={activeTab} className="mt-0">
              {filteredOrders.length === 0 ? (
                <div className="text-center py-8 text-muted-foreground">No fuel orders found</div>
              ) : (
                <div className="flex flex-col space-y-4">
                  {filteredOrders
                    .sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime())
                    .map((order) => (
                      <Card key={order.id} className="overflow-hidden">
                        <CardHeader className="pb-2 bg-muted/50">
                          <div className="flex justify-between items-start">
                            <div>
                              <CardTitle className="text-lg">Fuel Tail Number: {order.tailNumber}</CardTitle>
                              <CardDescription>{order.aircraftType}</CardDescription>
                            </div>
                            {getStatusBadge(order.status)}
                            {new Date(order.createdAt).getTime() < Date.now() - 3600000 && (
                              <Badge variant="outline" className="ml-2 bg-red-500/10 text-red-600 border-red-200">
                                Priority
                              </Badge>
                            )}
                          </div>
                        </CardHeader>
                        <CardContent className="pt-4">
                          <div className="space-y-2">
                            <div className="grid grid-cols-2 gap-2">
                              <div className="text-sm font-medium">Customer:</div>
                              <div className="text-sm">{order.customer}</div>
                            </div>
                            <div className="grid grid-cols-2 gap-2">
                              <div className="text-sm font-medium">Fuel Type:</div>
                              <div className="text-sm">{order.fuelType}</div>
                            </div>
                            <div className="grid grid-cols-2 gap-2">
                              <div className="text-sm font-medium">Requested Quantity:</div>
                              <div className="text-sm">{order.requestedQuantity} gallons</div>
                            </div>
                            {order.status === "COMPLETED" && (
                              <div className="grid grid-cols-2 gap-2">
                                <div className="text-sm font-medium">Actual Quantity:</div>
                                <div className="text-sm">{order.actualQuantity} gallons</div>
                              </div>
                            )}
                            <div className="grid grid-cols-2 gap-2">
                              <div className="text-sm font-medium">Location:</div>
                              <div className="text-sm">{order.gate}</div>
                            </div>
                            {order.notes && (
                              <div className="grid grid-cols-2 gap-2">
                                <div className="text-sm font-medium">Notes:</div>
                                <div className="text-sm">{order.notes}</div>
                              </div>
                            )}
                            {order.status === "COMPLETED" && order.completionNotes && (
                              <div className="grid grid-cols-2 gap-2">
                                <div className="text-sm font-medium">Completion Notes:</div>
                                <div className="text-sm">{order.completionNotes}</div>
                              </div>
                            )}
                          </div>
                        </CardContent>
                        <CardFooter className="border-t bg-muted/30 flex justify-between">
                          <div className="text-sm text-muted-foreground">
                            {order.status === "COMPLETED"
                              ? `Completed: ${new Date(order.completedAt).toLocaleString()}`
                              : `Created: ${new Date(order.createdAt).toLocaleString()}`}
                          </div>
                          <div>
                            {order.status === "PENDING" && (
                              <Button size="sm" onClick={() => startFueling(order)}>
                                Start Fueling
                              </Button>
                            )}
                            {order.status === "IN_PROGRESS" && (
                              <Button size="sm" onClick={() => openCompletionDialog(order)}>
                                Complete Fueling
                              </Button>
                            )}
                            {order.status === "COMPLETED" && (
                              <Button size="sm" variant="outline" asChild>
                                <Link href={`/fueler/receipts/${order.id}`}>
                                  <FileText className="h-4 w-4 mr-1" /> View Receipt
                                </Link>
                              </Button>
                            )}
                          </div>
                        </CardFooter>
                      </Card>
                    ))}
                </div>
              )}
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>

      {/* Complete Fueling Dialog */}
      <Dialog open={isCompletingOrder} onOpenChange={setIsCompletingOrder}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Complete Fueling</DialogTitle>
            <DialogDescription>Enter the actual amount of fuel dispensed and any notes.</DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            {error && (
              <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4" role="alert">
                <p className="font-bold">Error</p>
                <p>{error}</p>
              </div>
            )}
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="aircraft" className="text-right">
                Aircraft
              </Label>
              <div className="col-span-3">
                <p className="text-sm font-medium">{selectedOrder?.tailNumber}</p>
                <p className="text-xs text-muted-foreground">{selectedOrder?.aircraftType}</p>
              </div>
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="requested" className="text-right">
                Requested
              </Label>
              <div className="col-span-3">
                <p className="text-sm">{selectedOrder?.requestedQuantity} gallons</p>
              </div>
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="actual-quantity" className="text-right">
                Actual Quantity
              </Label>
              <div className="col-span-3 flex items-center">
                <Input
                  id="actual-quantity"
                  type="number"
                  step="0.1"
                  min="0"
                  value={actualQuantity}
                  onChange={(e) => setActualQuantity(e.target.value)}
                  className="flex-1"
                />
                <span className="ml-2">gallons</span>
              </div>
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="notes" className="text-right">
                Notes
              </Label>
              <Textarea
                id="notes"
                placeholder="Any notes about the fueling operation"
                className="col-span-3"
                value={completionNotes}
                onChange={(e) => setCompletionNotes(e.target.value)}
              />
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsCompletingOrder(false)}>
              Cancel
            </Button>
            <Button onClick={completeFueling}>Complete Fueling</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}

================
File: frontend/app/fueler/in-progress/page.tsx
================
"use client"

import { useEffect, useState } from "react"
import { Truck } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import Link from "next/link"

// Local storage key for fuel orders
const FUEL_ORDERS_STORAGE_KEY = "fboFuelOrders"

export default function InProgressOrdersPage() {
  const [user, setUser] = useState<any>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [inProgressOrders, setInProgressOrders] = useState<any[]>([])
  const [selectedOrder, setSelectedOrder] = useState<any>(null)
  const [isCompletingOrder, setIsCompletingOrder] = useState(false)
  const [actualQuantity, setActualQuantity] = useState("")
  const [completionNotes, setCompletionNotes] = useState("")
  const [error, setError] = useState("")

  useEffect(() => {
    // Check if user is logged in and is Fueler
    const userData = localStorage.getItem("fboUser")
    if (!userData) {
      return
    }

    const parsedUser = JSON.parse(userData)
    if (!parsedUser.isLoggedIn || parsedUser.role !== "fueler") {
      return
    }

    setUser(parsedUser)
    setIsLoading(false)
  }, [])

  useEffect(() => {
    if (!isLoading) {
      // Load fuel orders from localStorage
      const storedOrders = localStorage.getItem(FUEL_ORDERS_STORAGE_KEY)
      if (storedOrders) {
        const allOrders = JSON.parse(storedOrders)
        setInProgressOrders(allOrders.filter((order: any) => order.status === "IN_PROGRESS"))
      }
    }
  }, [isLoading])

  const openCompletionDialog = (order: any) => {
    setSelectedOrder(order)
    setActualQuantity(order.requestedQuantity)
    setCompletionNotes("")
    setError("")
    setIsCompletingOrder(true)
  }

  const completeFueling = () => {
    if (!actualQuantity || Number.parseFloat(actualQuantity) <= 0) {
      setError("Please enter a valid fuel quantity")
      return
    }

    // Update order status to COMPLETED
    const storedOrders = localStorage.getItem(FUEL_ORDERS_STORAGE_KEY)
    if (storedOrders) {
      const allOrders = JSON.parse(storedOrders)
      const now = new Date().toISOString()
      const updatedOrders = allOrders.map((o: any) =>
        o.id === selectedOrder.id
          ? {
              ...o,
              status: "COMPLETED",
              completedAt: now,
              actualQuantity,
              completionNotes,
              fuelerId: user?.id || 1,
              fuelerName: user?.name || "Fueler",
            }
          : o,
      )

      localStorage.setItem(FUEL_ORDERS_STORAGE_KEY, JSON.stringify(updatedOrders))

      // Update local state
      setInProgressOrders(updatedOrders.filter((order: any) => order.status === "IN_PROGRESS"))
    }

    setIsCompletingOrder(false)
    setSelectedOrder(null)
  }

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-[60vh]">
        <div className="flex flex-col items-center gap-4">
          <div className="h-8 w-8 border-4 border-primary border-t-transparent rounded-full animate-spin"></div>
          <p>Loading in-progress orders...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="flex flex-col gap-6">
      <div className="flex items-center justify-between">
        <h1 className="text-3xl font-bold">In Progress Fuel Orders</h1>
        <div className="flex items-center gap-2">
          <Truck className="h-5 w-5 text-blue-500" />
          <span className="font-medium">{inProgressOrders.length} orders in progress</span>
        </div>
      </div>

      {inProgressOrders.length === 0 ? (
        <Card>
          <CardContent className="flex flex-col items-center justify-center py-12">
            <Truck className="h-12 w-12 text-muted-foreground mb-4" />
            <h3 className="text-xl font-medium mb-2">No Orders In Progress</h3>
            <p className="text-muted-foreground text-center max-w-md">
              There are currently no fuel orders in progress. Check pending orders to start fueling.
            </p>
            <div className="flex gap-4 mt-6">
              <Button asChild variant="outline">
                <Link href="/fueler/dashboard">Return to Dashboard</Link>
              </Button>
              <Button asChild>
                <Link href="/fueler/pending-orders">View Pending Orders</Link>
              </Button>
            </div>
          </CardContent>
        </Card>
      ) : (
        <div className="grid grid-cols-1 gap-4">
          {inProgressOrders
            .sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime())
            .map((order) => (
              <Card key={order.id} className="overflow-hidden">
                <CardHeader className="pb-2 bg-muted/50">
                  <div className="flex justify-between items-start">
                    <div>
                      <CardTitle className="text-lg">Tail Number: {order.tailNumber}</CardTitle>
                      <CardDescription>{order.aircraftType}</CardDescription>
                    </div>
                    <Badge variant="outline" className="bg-blue-500/10 text-blue-600 border-blue-200">
                      In Progress
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent className="pt-4">
                  <div className="space-y-2">
                    <div className="grid grid-cols-2 gap-2">
                      <div className="text-sm font-medium">Customer:</div>
                      <div className="text-sm">{order.customer}</div>
                    </div>
                    <div className="grid grid-cols-2 gap-2">
                      <div className="text-sm font-medium">Fuel Type:</div>
                      <div className="text-sm">{order.fuelType}</div>
                    </div>
                    <div className="grid grid-cols-2 gap-2">
                      <div className="text-sm font-medium">Requested Quantity:</div>
                      <div className="text-sm">{order.requestedQuantity} gallons</div>
                    </div>
                    <div className="grid grid-cols-2 gap-2">
                      <div className="text-sm font-medium">Location:</div>
                      <div className="text-sm">{order.gate}</div>
                    </div>
                    {order.notes && (
                      <div className="grid grid-cols-2 gap-2">
                        <div className="text-sm font-medium">Notes:</div>
                        <div className="text-sm">{order.notes}</div>
                      </div>
                    )}
                  </div>
                </CardContent>
                <CardFooter className="border-t bg-muted/30 flex justify-between">
                  <div className="text-sm text-muted-foreground">
                    Started: {new Date(order.createdAt).toLocaleString()}
                  </div>
                  <Button size="sm" onClick={() => openCompletionDialog(order)}>
                    Complete Fueling
                  </Button>
                </CardFooter>
              </Card>
            ))}
        </div>
      )}

      {/* Complete Fueling Dialog */}
      <Dialog open={isCompletingOrder} onOpenChange={setIsCompletingOrder}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Complete Fueling</DialogTitle>
            <DialogDescription>Enter the actual amount of fuel dispensed and any notes.</DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            {error && (
              <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4" role="alert">
                <p className="font-bold">Error</p>
                <p>{error}</p>
              </div>
            )}
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="aircraft" className="text-right">
                Aircraft
              </Label>
              <div className="col-span-3">
                <p className="text-sm font-medium">{selectedOrder?.tailNumber}</p>
                <p className="text-xs text-muted-foreground">{selectedOrder?.aircraftType}</p>
              </div>
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="requested" className="text-right">
                Requested
              </Label>
              <div className="col-span-3">
                <p className="text-sm">{selectedOrder?.requestedQuantity} gallons</p>
              </div>
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="actual-quantity" className="text-right">
                Actual Quantity
              </Label>
              <div className="col-span-3 flex items-center">
                <Input
                  id="actual-quantity"
                  type="number"
                  step="0.1"
                  min="0"
                  value={actualQuantity}
                  onChange={(e) => setActualQuantity(e.target.value)}
                  className="flex-1"
                />
                <span className="ml-2">gallons</span>
              </div>
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="notes" className="text-right">
                Notes
              </Label>
              <Textarea
                id="notes"
                placeholder="Any notes about the fueling operation"
                className="col-span-3"
                value={completionNotes}
                onChange={(e) => setCompletionNotes(e.target.value)}
              />
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsCompletingOrder(false)}>
              Cancel
            </Button>
            <Button onClick={completeFueling}>Complete Fueling</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}

================
File: frontend/app/fueler/pending-orders/page.tsx
================
"use client"

import { useEffect, useState } from "react"
import { Droplet } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import Link from "next/link"

// Local storage key for fuel orders
const FUEL_ORDERS_STORAGE_KEY = "fboFuelOrders"

export default function PendingOrdersPage() {
  const [user, setUser] = useState<any>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [pendingOrders, setPendingOrders] = useState<any[]>([])

  useEffect(() => {
    // Check if user is logged in and is Fueler
    const userData = localStorage.getItem("fboUser")
    if (!userData) {
      return
    }

    const parsedUser = JSON.parse(userData)
    if (!parsedUser.isLoggedIn || parsedUser.role !== "fueler") {
      return
    }

    setUser(parsedUser)
    setIsLoading(false)
  }, [])

  useEffect(() => {
    if (!isLoading) {
      // Load fuel orders from localStorage
      const storedOrders = localStorage.getItem(FUEL_ORDERS_STORAGE_KEY)
      if (storedOrders) {
        const allOrders = JSON.parse(storedOrders)
        setPendingOrders(allOrders.filter((order: any) => order.status === "PENDING"))
      }
    }
  }, [isLoading])

  const startFueling = (orderId: number) => {
    // Update order status to IN_PROGRESS
    const storedOrders = localStorage.getItem(FUEL_ORDERS_STORAGE_KEY)
    if (storedOrders) {
      const allOrders = JSON.parse(storedOrders)
      const updatedOrders = allOrders.map((o: any) => (o.id === orderId ? { ...o, status: "IN_PROGRESS" } : o))
      localStorage.setItem(FUEL_ORDERS_STORAGE_KEY, JSON.stringify(updatedOrders))

      // Update local state
      setPendingOrders(updatedOrders.filter((order: any) => order.status === "PENDING"))
    }
  }

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-[60vh]">
        <div className="flex flex-col items-center gap-4">
          <div className="h-8 w-8 border-4 border-primary border-t-transparent rounded-full animate-spin"></div>
          <p>Loading pending orders...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="flex flex-col gap-6">
      <div className="flex items-center justify-between">
        <h1 className="text-3xl font-bold">Pending Fuel Orders</h1>
        <div className="flex items-center gap-2">
          <Droplet className="h-5 w-5 text-yellow-500" />
          <span className="font-medium">{pendingOrders.length} pending orders</span>
        </div>
      </div>

      {pendingOrders.length === 0 ? (
        <Card>
          <CardContent className="flex flex-col items-center justify-center py-12">
            <Droplet className="h-12 w-12 text-muted-foreground mb-4" />
            <h3 className="text-xl font-medium mb-2">No Pending Orders</h3>
            <p className="text-muted-foreground text-center max-w-md">
              There are currently no pending fuel orders. Check back later or view orders in progress.
            </p>
            <Button asChild className="mt-6">
              <Link href="/fueler/dashboard">Return to Dashboard</Link>
            </Button>
          </CardContent>
        </Card>
      ) : (
        <div className="grid grid-cols-1 gap-4">
          {pendingOrders
            .sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime())
            .map((order) => (
              <Card key={order.id} className="overflow-hidden">
                <CardHeader className="pb-2 bg-muted/50">
                  <div className="flex justify-between items-start">
                    <div>
                      <CardTitle className="text-lg">Tail Number: {order.tailNumber}</CardTitle>
                      <CardDescription>{order.aircraftType}</CardDescription>
                    </div>
                    <Badge variant="outline" className="bg-yellow-500/10 text-yellow-600 border-yellow-200">
                      Pending
                    </Badge>
                    {new Date(order.createdAt).getTime() < Date.now() - 3600000 && (
                      <Badge variant="outline" className="ml-2 bg-red-500/10 text-red-600 border-red-200">
                        Priority
                      </Badge>
                    )}
                  </div>
                </CardHeader>
                <CardContent className="pt-4">
                  <div className="space-y-2">
                    <div className="grid grid-cols-2 gap-2">
                      <div className="text-sm font-medium">Customer:</div>
                      <div className="text-sm">{order.customer}</div>
                    </div>
                    <div className="grid grid-cols-2 gap-2">
                      <div className="text-sm font-medium">Fuel Type:</div>
                      <div className="text-sm">{order.fuelType}</div>
                    </div>
                    <div className="grid grid-cols-2 gap-2">
                      <div className="text-sm font-medium">Requested Quantity:</div>
                      <div className="text-sm">{order.requestedQuantity} gallons</div>
                    </div>
                    <div className="grid grid-cols-2 gap-2">
                      <div className="text-sm font-medium">Location:</div>
                      <div className="text-sm">{order.gate}</div>
                    </div>
                    {order.notes && (
                      <div className="grid grid-cols-2 gap-2">
                        <div className="text-sm font-medium">Notes:</div>
                        <div className="text-sm">{order.notes}</div>
                      </div>
                    )}
                  </div>
                </CardContent>
                <CardFooter className="border-t bg-muted/30 flex justify-between">
                  <div className="text-sm text-muted-foreground">
                    Created: {new Date(order.createdAt).toLocaleString()}
                  </div>
                  <Button size="sm" onClick={() => startFueling(order.id)}>
                    Start Fueling
                  </Button>
                </CardFooter>
              </Card>
            ))}
        </div>
      )}
    </div>
  )
}

================
File: frontend/app/fueler/receipts/[id]/loading.tsx
================
import { Skeleton } from "@/components/ui/skeleton"

export default function ReceiptLoading() {
  return (
    <div className="min-h-screen bg-background">
      <header className="border-b bg-background/80 backdrop-blur-md sticky top-0 z-40">
        <div className="container flex h-16 items-center justify-between px-4">
          <div className="flex items-center gap-2">
            <Skeleton className="h-6 w-6 rounded-full" />
            <Skeleton className="h-6 w-32" />
          </div>
          <div className="flex items-center gap-4">
            <Skeleton className="h-9 w-24 rounded-md" />
            <Skeleton className="h-9 w-24 rounded-md" />
          </div>
        </div>
      </header>

      <main className="container px-4 md:px-6 py-6 md:py-8">
        <div className="flex flex-col gap-6 max-w-3xl mx-auto">
          <div className="flex items-center justify-between">
            <Skeleton className="h-10 w-48" />
            <Skeleton className="h-5 w-24" />
          </div>

          <div className="border-2 rounded-lg">
            <div className="border-b p-6">
              <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
                <div className="flex items-center gap-2">
                  <Skeleton className="h-8 w-8 rounded-full" />
                  <div>
                    <Skeleton className="h-8 w-40 mb-2" />
                    <Skeleton className="h-4 w-32" />
                  </div>
                </div>
                <div className="flex flex-col items-end">
                  <Skeleton className="h-7 w-32 mb-2" />
                  <Skeleton className="h-4 w-40" />
                </div>
              </div>
            </div>

            <div className="p-6">
              <div className="space-y-6">
                <Skeleton className="h-20 w-full rounded-md" />

                <div>
                  <Skeleton className="h-7 w-48 mb-2" />
                  <Skeleton className="h-32 w-full rounded-md" />
                </div>

                <div>
                  <Skeleton className="h-7 w-48 mb-2" />
                  <Skeleton className="h-32 w-full rounded-md" />
                </div>

                <div>
                  <Skeleton className="h-7 w-48 mb-2" />
                  <Skeleton className="h-32 w-full rounded-md" />
                </div>
              </div>
            </div>

            <div className="border-t p-6">
              <div className="flex justify-between">
                <Skeleton className="h-5 w-64" />
                <Skeleton className="h-5 w-32" />
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>
  )
}

================
File: frontend/app/fueler/receipts/[id]/page.tsx
================
"use client"

import { useEffect, useState } from "react"
import { useRouter, useParams } from "next/navigation"
import { Plane, ArrowLeft, Printer, CheckCircle } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card"
import Link from "next/link"

export default function FuelingReceipt() {
  const router = useRouter()
  const params = useParams()
  const [user, setUser] = useState<any>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [order, setOrder] = useState<any>(null)
  const [notFound, setNotFound] = useState(false)

  useEffect(() => {
    // Check if user is logged in and is Fueler
    const userData = localStorage.getItem("fboUser")
    if (!userData) {
      router.push("/login")
      return
    }

    const parsedUser = JSON.parse(userData)
    if (!parsedUser.isLoggedIn || parsedUser.role !== "fueler") {
      router.push("/login")
      return
    }

    setUser(parsedUser)

    // Load fuel order
    const orderId = params.id
    const storedOrders = localStorage.getItem("fboFuelOrders")

    if (storedOrders) {
      const orders = JSON.parse(storedOrders)
      const foundOrder = orders.find((o: any) => o.id.toString() === orderId)

      if (foundOrder) {
        setOrder(foundOrder)
      } else {
        setNotFound(true)
      }
    } else {
      setNotFound(true)
    }

    setIsLoading(false)
  }, [router, params.id])

  const handlePrint = () => {
    window.print()
  }

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-background">
        <div className="flex flex-col items-center gap-4">
          <div className="h-8 w-8 border-4 border-primary border-t-transparent rounded-full animate-spin"></div>
          <p>Loading receipt...</p>
        </div>
      </div>
    )
  }

  if (notFound) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-background">
        <div className="flex flex-col items-center gap-4">
          <div className="h-16 w-16 rounded-full bg-red-100 flex items-center justify-center">
            <span className="text-red-500 text-2xl">!</span>
          </div>
          <h1 className="text-2xl font-bold">Receipt Not Found</h1>
          <p className="text-muted-foreground">The requested fueling receipt could not be found.</p>
          <Button asChild>
            <Link href="/fueler/dashboard">
              <ArrowLeft className="h-4 w-4 mr-2" /> Back to Dashboard
            </Link>
          </Button>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-background">
      {/* Header - hidden when printing */}
      <header className="border-b bg-background/80 backdrop-blur-md sticky top-0 z-40 print:hidden">
        <div className="container flex h-16 items-center justify-between px-4">
          <div className="flex items-center gap-2">
            <Plane className="h-6 w-6 text-primary rotate-45" />
            <span className="text-xl font-bold">FBO LaunchPad</span>
            <span className="bg-green-500/10 text-green-500 text-xs px-2 py-1 rounded-md ml-2">Fueler</span>
          </div>

          <div className="flex items-center gap-4">
            <Button variant="outline" size="sm" onClick={() => router.push("/fueler/dashboard")} className="gap-2">
              <ArrowLeft className="h-4 w-4" />
              <span>Back to Dashboard</span>
            </Button>
            <Button variant="outline" size="sm" onClick={handlePrint} className="gap-2">
              <Printer className="h-4 w-4" />
              <span className="hidden md:inline-block">Print</span>
            </Button>
          </div>
        </div>
      </header>

      <main className="container px-4 md:px-6 py-6 md:py-8">
        <div className="flex flex-col gap-6 max-w-3xl mx-auto">
          <div className="flex items-center justify-between print:hidden">
            <h1 className="text-3xl font-bold">Fueling Receipt</h1>
            <div className="text-sm text-muted-foreground">Receipt #{order.id}</div>
          </div>

          <Card className="border-2">
            {/* Receipt Header */}
            <CardHeader className="border-b bg-muted/30">
              <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
                <div className="flex items-center gap-2">
                  <Plane className="h-8 w-8 text-primary rotate-45" />
                  <div>
                    <CardTitle className="text-2xl">FBO LaunchPad</CardTitle>
                    <CardDescription>Fueling Receipt</CardDescription>
                  </div>
                </div>
                <div className="flex flex-col items-end">
                  <div className="text-xl font-bold">Receipt #{order.id}</div>
                  <div className="text-sm text-muted-foreground">{new Date(order.completedAt).toLocaleString()}</div>
                </div>
              </div>
            </CardHeader>

            {/* Receipt Content */}
            <CardContent className="pt-6">
              <div className="space-y-6">
                {/* Status Banner */}
                <div className="bg-green-50 border border-green-200 rounded-md p-4 flex items-center gap-3">
                  <CheckCircle className="h-6 w-6 text-green-500" />
                  <div>
                    <p className="font-medium text-green-800">Fueling Completed</p>
                    <p className="text-sm text-green-700">
                      Fueling was completed on {new Date(order.completedAt).toLocaleDateString()} at{" "}
                      {new Date(order.completedAt).toLocaleTimeString()}
                    </p>
                  </div>
                </div>

                {/* Aircraft Information */}
                <div>
                  <h3 className="text-lg font-semibold mb-2">Aircraft Information</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 border rounded-md p-4 bg-muted/10">
                    <div>
                      <p className="text-sm text-muted-foreground">Tail Number</p>
                      <p className="font-medium">{order.tailNumber}</p>
                    </div>
                    <div>
                      <p className="text-sm text-muted-foreground">Aircraft Type</p>
                      <p className="font-medium">{order.aircraftType}</p>
                    </div>
                    <div>
                      <p className="text-sm text-muted-foreground">Customer</p>
                      <p className="font-medium">{order.customer}</p>
                    </div>
                  </div>
                </div>

                {/* Fueling Details */}
                <div>
                  <h3 className="text-lg font-semibold mb-2">Fueling Details</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 border rounded-md p-4 bg-muted/10">
                    <div>
                      <p className="text-sm text-muted-foreground">Fuel Type</p>
                      <p className="font-medium">{order.fuelType}</p>
                    </div>
                    <div>
                      <p className="text-sm text-muted-foreground">Requested Quantity</p>
                      <p className="font-medium">{order.requestedQuantity} gallons</p>
                    </div>
                    <div>
                      <p className="text-sm text-muted-foreground">Actual Quantity</p>
                      <p className="font-medium">{order.actualQuantity} gallons</p>
                    </div>
                    <div>
                      <p className="text-sm text-muted-foreground">Location</p>
                      <p className="font-medium">{order.gate}</p>
                    </div>
                  </div>
                </div>

                {/* Notes */}
                {(order.notes || order.completionNotes) && (
                  <div>
                    <h3 className="text-lg font-semibold mb-2">Notes</h3>
                    <div className="border rounded-md p-4 bg-muted/10">
                      {order.notes && (
                        <div className="mb-4">
                          <p className="text-sm text-muted-foreground">Order Notes</p>
                          <p>{order.notes}</p>
                        </div>
                      )}
                      {order.completionNotes && (
                        <div>
                          <p className="text-sm text-muted-foreground">Completion Notes</p>
                          <p>{order.completionNotes}</p>
                        </div>
                      )}
                    </div>
                  </div>
                )}

                {/* Fueler Information */}
                <div>
                  <h3 className="text-lg font-semibold mb-2">Fueler Information</h3>
                  <div className="border rounded-md p-4 bg-muted/10">
                    <div>
                      <p className="text-sm text-muted-foreground">Fueler</p>
                      <p className="font-medium">{order.fuelerName || user?.name || "Fueler"}</p>
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>

            <CardFooter className="border-t bg-muted/30 flex justify-between">
              <div className="text-sm text-muted-foreground">
                This receipt was generated automatically by FBO LaunchPad
              </div>
              <div className="text-sm font-medium">Receipt ID: {order.id}</div>
            </CardFooter>
          </Card>
        </div>
      </main>
    </div>
  )
}

================
File: frontend/app/fueler-login/loading.tsx
================
export default function Loading() {
  return (
    <div className="min-h-screen flex items-center justify-center bg-background">
      <div className="flex flex-col items-center gap-4">
        <div className="h-8 w-8 border-4 border-primary border-t-transparent rounded-full animate-spin"></div>
        <p>Loading Fueler login...</p>
      </div>
    </div>
  )
}

================
File: frontend/app/fueler-login/page.tsx
================
"use client"

import type React from "react"

import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import Header from "@/components/header"
import Footer from "@/components/footer"
import Image from "next/image"
import { useEffect, useState } from "react"
import { Plane, Lock, User, Eye, EyeOff, AlertCircle } from "lucide-react"
import Link from "next/link"
import { useRouter } from "next/navigation"

export default function FuelerLoginPage() {
  const router = useRouter()

  // Scroll to top when page loads
  useEffect(() => {
    window.scrollTo(0, 0)
  }, [])

  const [isVisible, setIsVisible] = useState(false)
  const [showPassword, setShowPassword] = useState(false)
  const [email, setEmail] = useState("")
  const [password, setPassword] = useState("")
  const [error, setError] = useState("")
  const [isLoading, setIsLoading] = useState(false)

  useEffect(() => {
    setIsVisible(true)
  }, [])

  // Admin credentials
  const ADMIN_EMAIL = "fbosaas@gmail.com"
  const ADMIN_PASSWORD = "b4H6a4JJT2V*ccUCb_69"

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault()
    setError("")
    setIsLoading(true)

    // Simulate network delay
    await new Promise((resolve) => setTimeout(resolve, 1000))

    // Check if admin credentials
    if (email === ADMIN_EMAIL && password === ADMIN_PASSWORD) {
      localStorage.setItem(
        "fboUser",
        JSON.stringify({
          email: ADMIN_EMAIL,
          role: "fueler",
          name: "Super User",
          isLoggedIn: true,
        }),
      )
      router.push("/fueler/dashboard")
      return
    }

    // Check if Fueler exists in any member's staff list
    const allMembers = JSON.parse(localStorage.getItem("fboUsers") || "[]")
    let foundMember = null
    let foundFueler = null

    for (const member of allMembers) {
      const staffKey = `${member.email}_staffMembers`
      const staffMembers = JSON.parse(localStorage.getItem(staffKey) || "[]")

      const fueler = staffMembers.find(
        (staff: any) => staff.email === email && staff.role === "fueling" && staff.status === "active",
      )

      if (fueler) {
        foundMember = member
        foundFueler = fueler
        break
      }
    }

    if (foundFueler) {
      // For simplicity, we're not checking passwords in this demo
      // In a real app, you would verify the password here
      localStorage.setItem(
        "fboUser",
        JSON.stringify({
          email: foundFueler.email,
          role: "fueler",
          name: foundFueler.name,
          memberId: foundMember.id,
          isLoggedIn: true,
        }),
      )
      router.push("/fueler/dashboard")
    } else {
      setError("Invalid email or inactive Fueler account")
    }

    setIsLoading(false)
  }

  return (
    <div className="flex min-h-screen flex-col">
      <Header />

      <main className="flex-1 relative">
        {/* Background Image with Overlay */}
        <div className="absolute inset-0 z-0 overflow-hidden">
          <Image
            src="/images/aviation-data-background.png"
            alt="Aviation data background"
            fill
            style={{ objectFit: "cover" }}
            priority
          />
          <div className="absolute inset-0 bg-black/30 backdrop-blur-sm"></div>
        </div>

        <div className="container px-4 md:px-6 relative z-10 py-12 md:py-24">
          <div className="flex flex-col items-center justify-center space-y-8 text-center">
            <div
              className={`space-y-4 max-w-[600px] mx-auto transition-all duration-1000 ${isVisible ? "opacity-100 translate-y-0" : "opacity-0 translate-y-10"}`}
            >
              <div className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-primary/20 text-primary mb-2">
                <Plane className="h-4 w-4 mr-1 rotate-45" />
                <span>Fueler Access</span>
              </div>
              <h1 className="text-3xl font-bold tracking-tighter md:text-5xl text-white">Fueler Login</h1>
              <p className="text-gray-200 md:text-xl/relaxed text-center">
                Access your Fueler dashboard to manage aircraft fueling operations.
              </p>
            </div>
            <div
              className={`w-full max-w-md mx-auto transition-all duration-1000 delay-300 ${isVisible ? "opacity-100 translate-y-0" : "opacity-0 translate-y-10"}`}
            >
              <Card className="bg-white/10 backdrop-blur-md border-gray-800/20 shadow-lg card-futuristic">
                <CardHeader>
                  <CardTitle className="text-white">Fueler Login</CardTitle>
                  <CardDescription className="text-gray-300">
                    Enter your credentials to access your Fueler dashboard
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <form className="grid gap-3 md:gap-4" onSubmit={handleLogin}>
                    {error && (
                      <div className="bg-red-500/10 border border-red-500/50 rounded-md p-3 flex items-start gap-2">
                        <AlertCircle className="h-5 w-5 text-red-500 mt-0.5 flex-shrink-0" />
                        <p className="text-red-500 text-sm">{error}</p>
                      </div>
                    )}
                    <div className="grid gap-2">
                      <Label htmlFor="email" className="text-white">
                        Email
                      </Label>
                      <div className="relative">
                        <User className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                        <Input
                          id="email"
                          placeholder="name@example.com"
                          type="email"
                          className="pl-10 bg-white/80 text-gray-900"
                          required
                          value={email}
                          onChange={(e) => setEmail(e.target.value)}
                        />
                      </div>
                    </div>
                    <div className="grid gap-2">
                      <div className="flex items-center justify-between">
                        <Label htmlFor="password" className="text-white">
                          Password
                        </Label>
                        <Link href="#" className="text-sm text-primary underline-offset-4 hover:underline">
                          Forgot password?
                        </Link>
                      </div>
                      <div className="relative">
                        <Lock className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                        <Input
                          id="password"
                          type={showPassword ? "text" : "password"}
                          className="pl-10 pr-10 bg-white/80 text-gray-900"
                          required
                          value={password}
                          onChange={(e) => setPassword(e.target.value)}
                        />
                        <button
                          type="button"
                          onClick={() => setShowPassword(!showPassword)}
                          className="absolute right-3 top-3 text-gray-400 hover:text-gray-600"
                        >
                          {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                          <span className="sr-only">{showPassword ? "Hide password" : "Show password"}</span>
                        </button>
                      </div>
                    </div>
                    <Button
                      className="w-full bg-primary hover:bg-primary/90 glow-effect"
                      type="submit"
                      disabled={isLoading}
                    >
                      {isLoading ? (
                        <>
                          <span className="mr-2">Logging in</span>
                          <div className="h-4 w-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                        </>
                      ) : (
                        <span className="flex items-center justify-center">Log In</span>
                      )}
                    </Button>
                  </form>
                </CardContent>
                <CardFooter className="flex flex-col space-y-4">
                  <div className="text-sm text-gray-300 text-center">
                    <Link href="/login" className="text-primary hover:underline">
                      Back to main login
                    </Link>
                  </div>
                </CardFooter>
              </Card>
            </div>
          </div>
        </div>

        {/* Animated flight path */}
        <div className="absolute bottom-0 left-0 w-full h-12 overflow-hidden">
          <div className="flight-line w-full h-full"></div>
        </div>
      </main>

      <Footer />
    </div>
  )
}

================
File: frontend/app/member/dashboard/loading.tsx
================
export default function Loading() {
  return null
}

================
File: frontend/app/member/dashboard/page.tsx
================
"use client"

import { useEffect, useState } from "react"
import { useRouter } from "next/navigation"
import AppLayout from "@/components/layout/app-layout"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { ThumbsUp, Clock, BarChart, MoreHorizontal, FileText, CheckCircle, AlertCircle } from "lucide-react"
import { cn } from "@/lib/utils"
import PermissionDebug from "@/app/components/permission-debug"

// Types
interface Task {
  id: string
  title: string
  status: "in_progress" | "on_hold" | "done"
  timeSpent: string
  dueDate?: string
}

interface Activity {
  id: string
  user: {
    name: string
    avatar?: string
    email?: string
  }
  action: string
  target?: string
  timestamp: string | Date
  project?: string
}

export default function MemberDashboard() {
  const router = useRouter()
  const [user, setUser] = useState<any>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [tasks, setTasks] = useState<Task[]>([])
  const [activities, setActivities] = useState<Activity[]>([])
  const [stats, setStats] = useState({
    finished: { value: 18, trend: "+8 tasks" },
    tracked: { value: "31h", trend: "-6 hours" },
    efficiency: { value: "93%", trend: "+12%" },
  })

  useEffect(() => {
    // Check if user is logged in
    const userData = localStorage.getItem("fboUser")
    if (!userData) {
      router.push("/login")
      return
    }

    const parsedUser = JSON.parse(userData)
    if (!parsedUser.isLoggedIn) {
      router.push("/login")
      return
    }

    setUser(parsedUser)

    // Load mock data
    loadMockData()

    setIsLoading(false)
  }, [router])

  const loadMockData = () => {
    // Mock tasks
    const mockTasks: Task[] = [
      {
        id: "1",
        title: "Review fuel order for United Airlines",
        status: "in_progress",
        timeSpent: "4h",
      },
      {
        id: "2",
        title: "Update CSR training documentation",
        status: "on_hold",
        timeSpent: "8h",
      },
      {
        id: "3",
        title: "Complete monthly performance report",
        status: "done",
        timeSpent: "32h",
      },
    ]
    setTasks(mockTasks)

    // Mock activities
    const mockActivities: Activity[] = [
      {
        id: "1",
        user: {
          name: "Floyd Miles",
          avatar: "/abstract-geometric-shapes.png",
        },
        action: "commented on",
        target: "Fuel Order #1234",
        project: "Operations",
        timestamp: new Date(Date.now() - 15 * 60000).toISOString(), // 15 minutes ago
      },
      {
        id: "2",
        user: {
          name: "Guy Hawkins",
          avatar: "/abstract-geometric-shapes.png",
        },
        action: "added a file to",
        target: "CSR Documentation",
        project: "Training",
        timestamp: new Date(Date.now() - 60 * 60000).toISOString(), // 1 hour ago
      },
      {
        id: "3",
        user: {
          name: "Kristin Watson",
          avatar: "/abstract-geometric-shapes.png",
        },
        action: "commented on",
        target: "Performance Metrics",
        project: "Analytics",
        timestamp: new Date(Date.now() - 3 * 60 * 60000).toISOString(), // 3 hours ago
      },
    ]
    setActivities(mockActivities)
  }

  // Format timestamp
  const formatTimestamp = (timestamp: string | Date) => {
    const date = new Date(timestamp)
    const now = new Date()
    const diffMs = now.getTime() - date.getTime()
    const diffMins = Math.round(diffMs / 60000)
    const diffHours = Math.round(diffMs / 3600000)

    if (diffMins < 60) {
      return `${diffMins} min${diffMins !== 1 ? "s" : ""} ago`
    } else if (diffHours < 24) {
      return `${diffHours} hour${diffHours !== 1 ? "s" : ""} ago`
    } else {
      return date.toLocaleDateString("en-US", {
        month: "short",
        day: "numeric",
      })
    }
  }

  // Get status icon
  const getStatusIcon = (status: string) => {
    switch (status) {
      case "in_progress":
        return <Clock className="h-4 w-4 text-blue-500" />
      case "on_hold":
        return <AlertCircle className="h-4 w-4 text-amber-500" />
      case "done":
        return <CheckCircle className="h-4 w-4 text-green-500" />
      default:
        return null
    }
  }

  // Get status text
  const getStatusText = (status: string) => {
    switch (status) {
      case "in_progress":
        return "In progress"
      case "on_hold":
        return "On hold"
      case "done":
        return "Done"
      default:
        return status
    }
  }

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100">
        <div className="flex flex-col items-center gap-4">
          <div className="h-8 w-8 border-4 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
          <p>Loading dashboard...</p>
        </div>
      </div>
    )
  }

  return (
    <AppLayout>
      <div className="space-y-6">
        {/* Welcome Section */}
        <div className="mb-8">
          <h1 className="text-2xl font-bold mb-1">Hello, {user?.name || "User"}</h1>
          <p className="text-gray-500">Track team progress here. You almost reach a goal!</p>
        </div>

        {/* Permission Debug Component */}
        <PermissionDebug />

        {/* Stats Overview */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {/* Finished */}
          <Card className="bg-gray-50 border-0 shadow-sm">
            <CardContent className="p-6">
              <div className="flex items-start justify-between">
                <div className="rounded-full bg-gray-200 p-2">
                  <ThumbsUp className="h-5 w-5 text-gray-700" />
                </div>
                <div className="text-xs font-medium text-green-600">{stats.finished.trend}</div>
              </div>
              <div className="mt-4">
                <h3 className="text-sm font-medium text-gray-500">Finished</h3>
                <div className="mt-1 flex items-baseline">
                  <p className="text-3xl font-semibold">{stats.finished.value}</p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Tracked */}
          <Card className="bg-gray-50 border-0 shadow-sm">
            <CardContent className="p-6">
              <div className="flex items-start justify-between">
                <div className="rounded-full bg-gray-200 p-2">
                  <Clock className="h-5 w-5 text-gray-700" />
                </div>
                <div className="text-xs font-medium text-red-600">{stats.tracked.trend}</div>
              </div>
              <div className="mt-4">
                <h3 className="text-sm font-medium text-gray-500">Tracked</h3>
                <div className="mt-1 flex items-baseline">
                  <p className="text-3xl font-semibold">{stats.tracked.value}</p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Efficiency */}
          <Card className="bg-gray-50 border-0 shadow-sm">
            <CardContent className="p-6">
              <div className="flex items-start justify-between">
                <div className="rounded-full bg-gray-200 p-2">
                  <BarChart className="h-5 w-5 text-gray-700" />
                </div>
                <div className="text-xs font-medium text-green-600">{stats.efficiency.trend}</div>
              </div>
              <div className="mt-4">
                <h3 className="text-sm font-medium text-gray-500">Efficiency</h3>
                <div className="mt-1 flex items-baseline">
                  <p className="text-3xl font-semibold">{stats.efficiency.value}</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Performance Chart */}
        <Card className="border-0 shadow-sm">
          <CardHeader className="flex flex-row items-center justify-between">
            <div>
              <CardTitle>Performance</CardTitle>
              <CardDescription>Track your team's performance over time</CardDescription>
            </div>
            <div className="flex items-center gap-2">
              <Button variant="outline" size="sm" className="h-8 text-xs">
                01-07 May
              </Button>
            </div>
          </CardHeader>
          <CardContent>
            <div className="h-[200px] w-full flex items-center justify-center bg-gray-50 rounded-md">
              <p className="text-gray-500">Performance chart will be displayed here</p>
            </div>
          </CardContent>
        </Card>

        {/* Tasks and Activity */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Current Tasks */}
          <Card className="lg:col-span-2 border-0 shadow-sm">
            <CardHeader className="flex flex-row items-center justify-between">
              <div>
                <CardTitle>Current Tasks</CardTitle>
                <CardDescription>Done 30%</CardDescription>
              </div>
              <Button variant="outline" size="sm" className="h-8 text-xs">
                Week
              </Button>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {tasks.map((task) => (
                  <div key={task.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <div className="flex items-start gap-3">
                      <div className="rounded-full bg-gray-200 p-2">
                        <FileText className="h-4 w-4 text-gray-700" />
                      </div>
                      <div>
                        <h4 className="text-sm font-medium">{task.title}</h4>
                        <div className="flex items-center gap-2 mt-1">
                          <Badge
                            variant="outline"
                            className={cn(
                              "text-xs font-normal",
                              task.status === "in_progress" && "bg-blue-50 text-blue-700 border-blue-200",
                              task.status === "on_hold" && "bg-amber-50 text-amber-700 border-amber-200",
                              task.status === "done" && "bg-green-50 text-green-700 border-green-200",
                            )}
                          >
                            <span className="flex items-center gap-1">
                              {getStatusIcon(task.status)}
                              {getStatusText(task.status)}
                            </span>
                          </Badge>
                        </div>
                      </div>
                    </div>
                    <div className="flex items-center gap-4">
                      <span className="text-sm text-gray-500">{task.timeSpent}</span>
                      <Button variant="ghost" size="sm" className="h-8 w-8 p-0">
                        <MoreHorizontal className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Activity */}
          <Card className="border-0 shadow-sm">
            <CardHeader>
              <CardTitle>Activity</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {activities.map((activity) => (
                  <div key={activity.id} className="flex gap-4">
                    <Avatar className="h-9 w-9">
                      <AvatarImage src={activity.user.avatar || "/placeholder.svg"} alt={activity.user.name} />
                      <AvatarFallback>{activity.user.name.charAt(0)}</AvatarFallback>
                    </Avatar>
                    <div className="flex-1 space-y-1">
                      <p className="text-sm">
                        <span className="font-medium">{activity.user.name}</span> {activity.action}{" "}
                        <span className="text-blue-600 hover:underline cursor-pointer">{activity.target}</span>
                      </p>
                      <div className="flex items-center text-xs text-gray-500">
                        <span>{formatTimestamp(activity.timestamp)}</span>
                        {activity.project && (
                          <>
                            <span className="mx-1">•</span>
                            <span>{activity.project}</span>
                          </>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
              <div className="mt-4 pt-4 border-t">
                <div className="flex justify-center">
                  <Button variant="ghost" size="sm" className="text-blue-600 hover:text-blue-700 hover:bg-blue-50">
                    View all activity
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </AppLayout>
  )
}

================
File: frontend/app/models/permission.ts
================
// Permission model representing individual capabilities in the system
export interface Permission {
  id: string
  name: string
  description: string
  category: PermissionCategory
  createdAt: string
}

// Categories to organize permissions
export enum PermissionCategory {
  FUEL_ORDERS = "fuel_orders",
  AIRCRAFT = "aircraft",
  CUSTOMERS = "customers",
  USERS = "users",
  REPORTS = "reports",
  BILLING = "billing",
  SYSTEM = "system",
  FUEL_TRUCKS = "fuel_trucks",
  LST = "lst",
}

// Role model representing a collection of permissions
export interface Role {
  id: string
  name: string
  description: string
  permissions: string[] // Array of permission IDs
  isSystemRole: boolean // System roles cannot be modified/deleted
  createdAt: string
  updatedAt: string
}

// UserRole mapping users to roles
export interface UserRole {
  userId: string
  roleId: string
  assignedAt: string
  assignedBy: string
}

// User's effective permissions
export interface UserPermissions {
  roles: string[] // Role names assigned to the user
  permissions: string[] // All permission names the user has
}

================
File: frontend/app/privacy/page.tsx
================
"use client"

import Header from "@/components/header"
import Footer from "@/components/footer"
import { useEffect, useState } from "react"
import { Shield, FileText, AlertCircle } from "lucide-react"

export default function PrivacyPolicy() {
  // Scroll to top when page loads
  useEffect(() => {
    window.scrollTo(0, 0)
  }, [])

  const [isVisible, setIsVisible] = useState(false)

  useEffect(() => {
    setIsVisible(true)
  }, [])

  return (
    <div className="flex min-h-screen flex-col">
      <Header />

      <main className="flex-1 bg-background">
        <div className="relative py-12 md:py-16 bg-primary/10 dark:bg-primary/5 border-b">
          <div className="absolute inset-0 tech-pattern opacity-10"></div>
          <div className="container px-4 md:px-6 relative">
            <div
              className={`max-w-3xl mx-auto transition-all duration-1000 ${
                isVisible ? "opacity-100 translate-y-0" : "opacity-0 translate-y-10"
              }`}
            >
              <div className="flex items-center gap-2 mb-4">
                <Shield className="h-6 w-6 text-primary" />
                <h1 className="text-3xl font-bold tracking-tighter md:text-4xl">Privacy Policy</h1>
              </div>
              <p className="text-muted-foreground md:text-lg">
                Effective Date: April 24, 2025
                <br />
                Last Updated: April 24, 2025
              </p>
            </div>
          </div>
        </div>

        <div className="container px-4 md:px-6 py-12 md:py-16">
          <div className="max-w-3xl mx-auto">
            <div className="prose dark:prose-invert max-w-none">
              <section className="mb-10" id="introduction">
                <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
                  <FileText className="h-5 w-5 text-primary" />
                  1. Introduction
                </h2>
                <p>
                  Welcome to FBO LaunchPad ("FBO LaunchPad," "we," "us," or "our"). We provide a Software-as-a-Service
                  (SaaS) platform and related services (collectively, the "Services") designed specifically to modernize
                  and streamline operations for Fixed-Base Operators (FBOs).
                </p>
                <p>
                  This Privacy Policy describes how FBO LaunchPad collects, uses, discloses, and protects Personal Data
                  obtained through:
                </p>
                <ul className="list-disc pl-6 space-y-2 mt-4">
                  <li>Our public-facing marketing and informational website (the "Website").</li>
                  <li>
                    Our SaaS platform and associated applications used by our FBO customers and their authorized
                    employees (the "Application").
                  </li>
                </ul>
                <p>"Personal Data" means any information relating to an identified or identifiable natural person.</p>
                <p>
                  This Privacy Policy applies to visitors of our Website and to the FBOs who subscribe to our Services
                  ("Customers") and their authorized users (e.g., Customer Service Representatives (CSRs), Line Service
                  Technicians (LSTs), Managers).
                </p>
                <p className="font-medium">
                  Important Note Regarding FBO Customer Data: Our Customers use our Services to process information
                  relating to their own clients (e.g., pilots, aircraft owners/operators). In this context, FBO
                  LaunchPad acts as a "data processor" or "service provider" on behalf of our Customers, who are the
                  "data controllers" or "businesses." This means our Customers determine the purposes and means of
                  processing their clients' Personal Data within our Services, and their privacy policies govern that
                  data. Individuals seeking to exercise rights regarding Personal Data controlled by our Customers
                  should direct their requests to the respective FBO.
                </p>
                <p>
                  Please read this Privacy Policy carefully. By accessing or using our Website or Services, you
                  acknowledge that you have read, understood, and agree to the practices described in this Privacy
                  Policy.
                </p>
              </section>

              <section className="mb-10" id="information-we-collect">
                <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
                  <FileText className="h-5 w-5 text-primary" />
                  2. Information We Collect
                </h2>
                <p>We collect different types of information depending on your interaction with us:</p>
                <h3 className="text-xl font-semibold mt-6 mb-3">
                  (a) Information You Provide Directly (Website & Communication)
                </h3>
                <ul className="list-disc pl-6 space-y-2">
                  <li>
                    <strong>Contact Form Submissions:</strong> When you request a demo, ask questions, or contact us
                    through forms on our Website, we collect information such as your Name, Email Address, Phone Number,
                    Company Name, Job Title, and the content of your message.
                  </li>
                  <li>
                    <strong>Direct Communications:</strong> If you communicate with us via email or other channels, we
                    may collect your contact information and the content of those communications.
                  </li>
                </ul>

                <h3 className="text-xl font-semibold mt-6 mb-3">(b) Information Collected Automatically (Website)</h3>
                <ul className="list-disc pl-6 space-y-2">
                  <li>
                    <strong>Log Data:</strong> Like most websites, our servers automatically record information ("Log
                    Data") created by your use of the Website. Log Data may include information such as your IP address,
                    browser type, operating system, the referring web page, pages visited, location (depending on
                    browser settings), mobile carrier, device identifiers, search terms, and cookie information.
                  </li>
                  <li>
                    <strong>Cookies and Tracking Technologies:</strong> We use cookies and similar technologies (e.g.,
                    web beacons, pixels) to operate and improve the Website, analyze usage, and potentially for
                    marketing purposes. This may include information about your Browse behavior, device type, and
                    interaction with our Website. For more details, see Section 9 ("Cookies and Tracking Technologies").
                  </li>
                </ul>

                <h3 className="text-xl font-semibold mt-6 mb-3">
                  (c) Information Collected or Processed via the Services (Application)
                </h3>
                <ul className="list-disc pl-6 space-y-2">
                  <li>
                    <strong>FBO User Account Data:</strong> When our Customers set up accounts for their employees to
                    use the Application, we collect information necessary to create and manage these accounts, such as
                    Full Name, Work Email Address, Job Role/Title, and assigned permissions.
                  </li>
                  <li>
                    <strong>Operational Data:</strong> Information generated or inputted through the use of the
                    Application by our Customers and their authorized users. This includes, but is not limited to:
                    <ul className="list-disc pl-6 space-y-1 mt-2">
                      <li>Aircraft identifiers (e.g., tail numbers)</li>
                      <li>Fuel types and quantities dispensed</li>
                      <li>Service details and timestamps</li>
                      <li>Communication logs between authorized users (e.g., CSRs and LSTs)</li>
                      <li>Status updates related to FBO services</li>
                      <li>Digitally generated fuel receipts</li>
                      <li>
                        Potentially, location data of LSTs during active service tasks (if this feature is implemented
                        and enabled by the Customer).
                      </li>
                    </ul>
                  </li>
                  <li>
                    <strong>FBO Customer Data (Processed on Behalf of our Customers):</strong> Our Customers input
                    information about their own clients into our Application as part of their business operations. This
                    data, which we process as a service provider, may include names, contact details, aircraft
                    information, service history, and potentially billing information required by the FBO.
                  </li>
                  <li>
                    <strong>Third-Party Integration Data:</strong> If Customers utilize features integrating with
                    third-party services (e.g., FlightAware for automated aircraft ownership verification), we may
                    receive data from those services via APIs as authorized by the Customer. This data is processed
                    according to the terms of this policy and the relevant API provider's terms.
                  </li>
                  <li>
                    <strong>Usage Data:</strong> We may collect information about how authorized users interact with the
                    Application, such as features used, clicks, performance metrics, and session duration, to maintain
                    and improve the Services.
                  </li>
                </ul>
              </section>

              <section className="mb-10" id="how-we-collect">
                <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
                  <FileText className="h-5 w-5 text-primary" />
                  3. How We Collect Information
                </h2>
                <ul className="list-disc pl-6 space-y-2">
                  <li>
                    <strong>Directly From You:</strong> When you fill out forms, register for an account (as an
                    authorized user of a Customer), or communicate with us.
                  </li>
                  <li>
                    <strong>Automatically:</strong> Through cookies, Log Data, and other tracking technologies when you
                    interact with our Website or Application.
                  </li>
                  <li>
                    <strong>From Our Customers:</strong> FBOs provide user account information for their employees and
                    input their own customer data into the Application.
                  </li>
                  <li>
                    <strong>From Third Parties:</strong> Through integrations authorized by our Customers (e.g., API
                    providers like FlightAware).
                  </li>
                </ul>
              </section>

              <section className="mb-10" id="how-we-use">
                <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
                  <FileText className="h-5 w-5 text-primary" />
                  4. How We Use Information
                </h2>
                <p>We use the information we collect for various purposes:</p>

                <h3 className="text-xl font-semibold mt-6 mb-3">(a) Website Data Usage:</h3>
                <ul className="list-disc pl-6 space-y-2">
                  <li>To respond to your inquiries, provide information, and schedule demos.</li>
                  <li>To operate, maintain, and improve the Website and its functionality.</li>
                  <li>To analyze website traffic and user engagement patterns (e.g., using Google Analytics).</li>
                  <li>To personalize your experience on the Website.</li>
                  <li>
                    For marketing and promotional purposes (where permitted by law and with appropriate consent, e.g.,
                    sending relevant emails about our Services).
                  </li>
                  <li>To prevent fraud and ensure the security of our Website.</li>
                  <li>To comply with legal obligations.</li>
                </ul>

                <h3 className="text-xl font-semibold mt-6 mb-3">(b) Application Data Usage:</h3>
                <ul className="list-disc pl-6 space-y-2">
                  <li>
                    To provide, operate, maintain, and improve the core functionality of the FBO LaunchPad Services as
                    contracted by our Customers.
                  </li>
                  <li>To authenticate users and manage user accounts and permissions.</li>
                  <li>To facilitate communication and workflow management between FBO personnel (CSRs, LSTs).</li>
                  <li>To generate digital fuel receipts and other operational documentation.</li>
                  <li>To enable reporting and analytics features for our Customers regarding their operations.</li>
                  <li>To facilitate integrations with third-party services as directed by our Customers.</li>
                  <li>To provide customer support and troubleshooting.</li>
                  <li>To ensure the security and integrity of the Services.</li>
                  <li>To develop new features and functionalities (often using aggregated or anonymized data).</li>
                  <li>
                    To generate aggregated and anonymized data for statistical analysis, research, and business
                    intelligence (this data does not identify individuals or specific Customers).
                  </li>
                  <li>To enforce our terms of service and comply with legal obligations.</li>
                </ul>
              </section>

              <section className="mb-10" id="legal-basis">
                <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
                  <FileText className="h-5 w-5 text-primary" />
                  5. Legal Basis for Processing Personal Data
                </h2>
                <p>
                  While specific requirements vary by jurisdiction (primarily relevant for users/customers in regions
                  like the European Economic Area), our legal bases for processing Personal Data include:
                </p>
                <ul className="list-disc pl-6 space-y-2 mt-4">
                  <li>
                    <strong>Performance of a Contract:</strong> Processing necessary to provide the Services to our
                    Customers and their authorized users according to our agreements.
                  </li>
                  <li>
                    <strong>Legitimate Interests:</strong> Processing for our legitimate business interests, such as
                    improving our Website and Services, security, analytics, and limited direct marketing, provided
                    these interests are not overridden by your data protection rights.
                  </li>
                  <li>
                    <strong>Consent:</strong> Where required by law (e.g., for certain cookies or direct marketing
                    emails), we will obtain your consent before processing your Personal Data. You can withdraw your
                    consent at any time.
                  </li>
                  <li>
                    <strong>Legal Obligation:</strong> Processing necessary to comply with applicable laws and
                    regulations.
                  </li>
                </ul>
              </section>

              <section className="mb-10" id="data-sharing">
                <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
                  <FileText className="h-5 w-5 text-primary" />
                  6. Data Sharing and Disclosure
                </h2>
                <p>
                  FBO LaunchPad does not sell your Personal Data. We may share information under the following
                  circumstances:
                </p>
                <ul className="list-disc pl-6 space-y-2 mt-4">
                  <li>
                    <strong>Service Providers:</strong> We engage third-party companies and individuals to perform
                    services on our behalf (e.g., cloud hosting providers [such as AWS, Google Cloud, or Azure], data
                    analytics providers [Google Analytics], CRM systems, communication tools, customer support
                    software). These providers only have access to the Personal Data necessary to perform their
                    functions and are obligated to protect it.
                  </li>
                  <li>
                    <strong>API Partners:</strong> If Customers use integrations (e.g., FlightAware), data may be shared
                    with those partners as necessary to provide the integrated functionality, based on the Customer's
                    authorization.
                  </li>
                  <li>
                    <strong>With Our Customers (FBOs):</strong> We share data related to the use of the Services by
                    their authorized employees and the FBO Customer Data they input, as necessary for them to use and
                    manage the Services.
                  </li>
                  <li>
                    <strong>Legal Compliance and Protection:</strong> We may disclose information if required to do so
                    by law or in the good faith belief that such action is necessary to (i) comply with a legal
                    obligation, (ii) protect and defend the rights or property of FBO LaunchPad, (iii) prevent or
                    investigate possible wrongdoing in connection with the Services, (iv) protect the personal safety of
                    users of the Services or the public, or (v) protect against legal liability.
                  </li>
                  <li>
                    <strong>Business Transfers:</strong> In the event of a merger, acquisition, reorganization,
                    bankruptcy, or sale of all or a portion of our assets, your Personal Data may be transferred as part
                    of that transaction. We will notify you via email and/or a prominent notice on our Website of any
                    change in ownership or uses of your Personal Data.
                  </li>
                  <li>
                    <strong>Aggregated or Anonymized Data:</strong> We may share aggregated or anonymized data, which
                    cannot reasonably be used to identify you, for various purposes, including analytics and reporting.
                  </li>
                </ul>
              </section>

              <section className="mb-10" id="data-security">
                <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
                  <Shield className="h-5 w-5 text-primary" />
                  7. Data Security
                </h2>
                <p>
                  FBO LaunchPad takes reasonable technical and organizational measures to protect the Personal Data we
                  process from loss, misuse, unauthorized access, disclosure, alteration, and destruction. These
                  measures may include encryption, access controls, secure cloud hosting environments, and regular
                  security assessments.
                </p>
                <p className="mt-4">
                  However, no internet or email transmission is ever fully secure or error-free. While we strive to
                  protect your Personal Data, we cannot guarantee its absolute security. Customers and their authorized
                  users are responsible for maintaining the security of their account credentials.
                </p>
              </section>

              <section className="mb-10" id="data-retention">
                <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
                  <FileText className="h-5 w-5 text-primary" />
                  8. Data Retention
                </h2>
                <p>
                  We retain Personal Data for as long as necessary to fulfill the purposes outlined in this Privacy
                  Policy, unless a longer retention period is required or permitted by law. This includes retaining
                  data:
                </p>
                <ul className="list-disc pl-6 space-y-2 mt-4">
                  <li>
                    For website visitors: As long as necessary to respond to inquiries or for analytics/marketing
                    purposes (subject to consent/opt-outs).
                  </li>
                  <li>
                    For Application users/data: For the duration of the Customer's subscription and as required to
                    fulfill our contractual obligations, provide support, and comply with legal requirements or resolve
                    disputes. Data processed on behalf of our Customers is retained according to our agreement with the
                    Customer.
                  </li>
                </ul>
                <p className="mt-4">
                  We will delete or anonymize Personal Data when it is no longer needed for its identified purposes.
                </p>
              </section>

              <section className="mb-10" id="cookies">
                <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
                  <FileText className="h-5 w-5 text-primary" />
                  9. Cookies and Tracking Technologies
                </h2>
                <p>
                  We use cookies (small text files placed on your device) and similar technologies on our Website and
                  potentially within our Services. These help us operate the site, understand usage, remember
                  preferences, and potentially deliver relevant advertising.
                </p>
                <p className="mt-4">We use the following types of cookies:</p>
                <ul className="list-disc pl-6 space-y-2 mt-4">
                  <li>
                    <strong>Essential Cookies:</strong> Necessary for the Website and Services to function properly
                    (e.g., session management, security).
                  </li>
                  <li>
                    <strong>Performance/Analytics Cookies:</strong> Help us understand how visitors interact with our
                    Website (e.g., Google Analytics) by collecting information anonymously.
                  </li>
                  <li>
                    <strong>Functional Cookies:</strong> Enable enhanced functionality and personalization (e.g.,
                    remembering your preferences).
                  </li>
                  <li>
                    <strong>Marketing Cookies:</strong> Used to track visitors across websites to display relevant ads
                    (we will specify if/when these are used and seek consent where required).
                  </li>
                </ul>
                <p className="mt-4">
                  You can control cookies through your browser settings. Most browsers allow you to block or delete
                  cookies. However, blocking essential cookies may affect the functionality of our Website or Services.
                  For more information on managing cookies, consult your browser's help documentation. You can opt-out
                  of Google Analytics by installing the Google Analytics Opt-out Browser Add-on.
                </p>
              </section>

              <section className="mb-10" id="data-protection-rights">
                <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
                  <FileText className="h-5 w-5 text-primary" />
                  10. Your Data Protection Rights
                </h2>
                <p>
                  Depending on your location (e.g., California residents under CCPA), you may have certain rights
                  regarding your Personal Data. These rights may include:
                </p>
                <ul className="list-disc pl-6 space-y-2 mt-4">
                  <li>
                    <strong>Right to Access:</strong> Request access to the Personal Data we hold about you.
                  </li>
                  <li>
                    <strong>Right to Correction:</strong> Request correction of inaccurate Personal Data.
                  </li>
                  <li>
                    <strong>Right to Deletion:</strong> Request deletion of your Personal Data, subject to certain
                    exceptions.
                  </li>
                  <li>
                    <strong>Right to Restrict Processing:</strong> Request restriction of processing under certain
                    circumstances.
                  </li>
                  <li>
                    <strong>Right to Object:</strong> Object to processing based on legitimate interests or for direct
                    marketing.
                  </li>
                  <li>
                    <strong>Right to Data Portability:</strong> Request a copy of your data in a portable format (where
                    applicable).
                  </li>
                  <li>
                    <strong>Right to Withdraw Consent:</strong> Withdraw consent where processing is based on consent.
                  </li>
                </ul>
                <p className="mt-4 font-medium">Exercising Your Rights:</p>
                <ul className="list-disc pl-6 space-y-2 mt-2">
                  <li>
                    <strong>Website Visitors & Direct Communications:</strong> If you wish to exercise rights regarding
                    Personal Data collected via our Website or direct communications (where FBO LaunchPad is the
                    controller), please contact us using the details in Section 14.
                  </li>
                  <li>
                    <strong>Authorized Users of FBO Customers:</strong> If you are an employee of our Customer using the
                    Application, please contact us for requests related to your user account data (name, email, role).
                  </li>
                  <li>
                    <strong>Data Processed on Behalf of FBOs:</strong> If your Personal Data has been inputted into our
                    Services by one of our FBO Customers (e.g., you are a client of an FBO), FBO LaunchPad processes
                    this data on their behalf. Please direct any requests to access, correct, or delete this data
                    directly to the FBO with whom you have a relationship. We will assist our Customers in responding to
                    such requests as required by our agreements and applicable law.
                  </li>
                </ul>
                <p className="mt-4">
                  We will respond to verifiable requests within the timeframe required by applicable law. We may need to
                  verify your identity before processing your request.
                </p>
              </section>

              <section className="mb-10" id="childrens-privacy">
                <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
                  <AlertCircle className="h-5 w-5 text-primary" />
                  11. Children's Privacy
                </h2>
                <p>
                  Our Website and Services are not directed to children under the age of 13 (or the relevant age of
                  digital consent in other jurisdictions), and we do not knowingly collect Personal Data from children.
                  If we become aware that we have inadvertently collected Personal Data from a child, we will take steps
                  to delete such information promptly. If you believe we might have any information from or about a
                  child, please contact us.
                </p>
              </section>

              <section className="mb-10" id="international-transfers">
                <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
                  <FileText className="h-5 w-5 text-primary" />
                  12. International Data Transfers
                </h2>
                <p>
                  FBO LaunchPad is based in the United States. If you access our Website or Services from outside the
                  United States, your information may be transferred to, stored, and processed in the United States or
                  other countries where our servers or service providers are located. Data protection laws in these
                  countries may differ from those in your country of residence. By using our Website or Services, you
                  consent to the transfer of your information to countries outside your residence, including the United
                  States. We will take appropriate safeguards to protect your Personal Data in accordance with this
                  Privacy Policy and applicable law when such transfers occur.
                </p>
              </section>

              <section className="mb-10" id="changes">
                <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
                  <FileText className="h-5 w-5 text-primary" />
                  13. Changes to This Privacy Policy
                </h2>
                <p>
                  We may update this Privacy Policy from time to time to reflect changes in our practices, technologies,
                  legal requirements, or other factors. If we make material changes, we will notify you by posting the
                  updated policy on our Website, updating the "Last Updated" date, and/or potentially sending an email
                  notification to our Customers or registered users prior to the change becoming effective. We encourage
                  you to review this Privacy Policy periodically. Your continued use of the Website or Services after
                  any changes constitutes your acceptance of the revised policy.
                </p>
              </section>

              <section className="mb-10" id="contact">
                <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
                  <FileText className="h-5 w-5 text-primary" />
                  14. Contact Us
                </h2>
                <p>
                  If you have any questions, comments, or concerns about this Privacy Policy or our data practices, or
                  if you wish to exercise your data protection rights (where applicable and directed to FBO LaunchPad),
                  please contact us at:
                </p>
                <div className="mt-4 p-4 bg-primary/10 rounded-lg">
                  <p>
                    <strong>FBO LaunchPad</strong>
                  </p>
                  <p>Attn: Privacy Officer</p>
                  <p>Email: privacy@fbolaunchpad.com</p>
                </div>
              </section>
            </div>
          </div>
        </div>
      </main>

      <Footer />
    </div>
  )
}

================
File: frontend/app/request-demo/page.tsx
================
"use client"

import type React from "react"

import { Button } from "@/components/ui/button"
import Header from "@/components/header"
import Footer from "@/components/footer"
import Image from "next/image"
import { useEffect, useState } from "react"
import { Plane, Send, CheckCircle, AlertCircle } from "lucide-react"
import { useRouter } from "next/navigation"
import { sendDemoRequestEmail } from "../actions/send-email"

export default function RequestDemo() {
  const router = useRouter()

  // Scroll to top when page loads
  useEffect(() => {
    window.scrollTo(0, 0)
  }, [])

  const [isVisible, setIsVisible] = useState(false)
  const [formSubmitted, setFormSubmitted] = useState(false)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [submitError, setSubmitError] = useState<string | null>(null)

  // Form state
  const [formData, setFormData] = useState({
    name: "",
    fboName: "",
    email: "",
    message: "",
  })

  useEffect(() => {
    setIsVisible(true)
  }, [])

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }))
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsSubmitting(true)
    setSubmitError(null)

    try {
      // Create a new demo request
      const newRequest = {
        id: Date.now().toString(),
        ...formData,
        date: new Date().toISOString(),
        status: "new" as const,
      }

      // Get existing requests from localStorage
      const existingRequests = JSON.parse(localStorage.getItem("demoRequests") || "[]")

      // Add new request and save back to localStorage
      localStorage.setItem("demoRequests", JSON.stringify([...existingRequests, newRequest]))

      // Send email notification
      const emailResult = await sendDemoRequestEmail(formData)

      if (!emailResult.success) {
        console.error("Failed to send email notification:", emailResult.error)
        // We don't show this error to the user since the request was still saved
        // But we log it for debugging purposes
      }

      setIsSubmitting(false)
      setFormSubmitted(true)

      // Reset form after 3 seconds and redirect to home
      setTimeout(() => {
        router.push("/")
      }, 3000)
    } catch (error) {
      setIsSubmitting(false)
      setSubmitError("There was an error submitting your request. Please try again.")
      console.error("Error submitting form:", error)
    }
  }

  return (
    <div className="flex min-h-screen flex-col">
      <Header />

      <main className="flex-1 relative">
        {/* Background Image with Overlay */}
        <div className="absolute inset-0 z-0 overflow-hidden">
          <Image
            src="/images/data-flow-background.png"
            alt="Data flow background"
            fill
            style={{ objectFit: "cover" }}
            priority
          />
          <div className="absolute inset-0 bg-black/30 backdrop-blur-sm"></div>
        </div>

        <div className="container px-4 md:px-6 relative z-10 py-12 md:py-24">
          <div className="flex flex-col items-center justify-center space-y-8 text-center">
            <div
              className={`space-y-4 max-w-[600px] mx-auto transition-all duration-1000 ${isVisible ? "opacity-100 translate-y-0" : "opacity-0 translate-y-10"}`}
            >
              <div className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-primary/20 text-primary mb-2">
                <Plane className="h-4 w-4 mr-1 rotate-45" />
                <span>Flight Plan Request</span>
              </div>
              <h1 className="text-3xl font-bold tracking-tighter md:text-5xl text-white">Request Your Demo Flight</h1>
              <p className="text-gray-200 md:text-xl/relaxed text-center">
                Ready to see FBO LaunchPad in action? Complete this pre-flight checklist to request your personalized
                demo.
              </p>
            </div>
            <div
              className={`w-full max-w-md mx-auto transition-all duration-1000 delay-300 ${isVisible ? "opacity-100 translate-y-0" : "opacity-0 translate-y-10"}`}
            >
              {formSubmitted ? (
                <div className="bg-white/10 backdrop-blur-md p-4 md:p-6 rounded-xl shadow-lg card-futuristic flex flex-col items-center">
                  <div className="rounded-full bg-green-500/20 p-4 mb-4">
                    <CheckCircle className="h-12 w-12 text-green-500" />
                  </div>
                  <h2 className="text-2xl font-bold text-white mb-2">Request Submitted!</h2>
                  <p className="text-gray-200 text-center mb-6">
                    Thank you for your interest in FBO LaunchPad. Our team will contact you shortly to schedule your
                    personalized demo.
                  </p>
                  <p className="text-gray-300 text-sm">Redirecting you to the homepage in a few seconds...</p>
                </div>
              ) : (
                <form
                  className="grid gap-3 md:gap-4 bg-white/10 backdrop-blur-md p-4 md:p-6 rounded-xl shadow-lg card-futuristic"
                  onSubmit={handleSubmit}
                >
                  {submitError && (
                    <div className="bg-red-500/10 border border-red-500/50 rounded-md p-3 flex items-start gap-2">
                      <AlertCircle className="h-5 w-5 text-red-500 mt-0.5 flex-shrink-0" />
                      <p className="text-red-500 text-sm">{submitError}</p>
                    </div>
                  )}

                  <input
                    className="flex h-10 w-full rounded-md border border-input bg-white/80 px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-gray-600 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                    placeholder="Your Name"
                    name="name"
                    value={formData.name}
                    onChange={handleChange}
                    required
                  />
                  <input
                    className="flex h-10 w-full rounded-md border border-input bg-white/80 px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-gray-600 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                    placeholder="FBO Name"
                    name="fboName"
                    value={formData.fboName}
                    onChange={handleChange}
                    required
                  />
                  <input
                    className="flex h-10 w-full rounded-md border border-input bg-white/80 px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-gray-600 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                    placeholder="Email Address"
                    type="email"
                    name="email"
                    value={formData.email}
                    onChange={handleChange}
                    required
                  />
                  <textarea
                    className="flex min-h-[120px] w-full rounded-md border border-input bg-white/80 px-3 py-2 text-sm ring-offset-background placeholder:text-gray-600 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                    placeholder="Tell us about your FBO (size, number of aircraft, etc.)"
                    name="message"
                    value={formData.message}
                    onChange={handleChange}
                  ></textarea>
                  <Button
                    size="lg"
                    className="w-full bg-primary hover:bg-primary/90 glow-effect"
                    type="submit"
                    disabled={isSubmitting}
                  >
                    {isSubmitting ? (
                      <>
                        <div className="h-4 w-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>
                        Submitting...
                      </>
                    ) : (
                      <>
                        <Send className="h-4 w-4 mr-2" />
                        Request a Demo
                      </>
                    )}
                  </Button>
                </form>
              )}
            </div>
          </div>
        </div>

        {/* Animated flight path */}
        <div className="absolute bottom-0 left-0 w-full h-12 overflow-hidden">
          <div className="flight-line w-full h-full"></div>
        </div>
      </main>

      <Footer />
    </div>
  )
}

================
File: frontend/app/services/customer-service.ts
================
import { API_BASE_URL, getAuthHeaders, handleApiResponse } from "./api-config"

// --- Core Interfaces ---

export interface Customer {
  id: number
  name: string
  email: string
  phone?: string
  created_at?: string
}

interface BackendCustomer {
  id: number
  name: string
  email: string
  phone?: string
  created_at?: string
}

export interface AdminCustomerCreateRequest {
  name: string
  email: string
  phone?: string
}

export interface AdminCustomerUpdateRequest {
  name?: string
  email?: string
  phone?: string
}

// Expected response type for list
interface AdminCustomerListResponse {
  customers: BackendCustomer[]
  message: string
  // Add other pagination/metadata fields if backend provides them
}

// Expected response type for a single customer.
// Assuming backend might wrap it in a 'customer' key or return directly.
// For flexibility, handleApiResponse<BackendCustomer> or handleApiResponse<{customer: BackendCustomer}>
// can be used. Let's assume it might be wrapped for now.
interface AdminCustomerDetailResponse {
  customer: BackendCustomer
  message?: string // Optional message for single detail
}

// --- Data Mapping Helper Function ---

function mapBackendToFrontendCustomer(backend: BackendCustomer): Customer {
  return {
    id: backend.id,
    name: backend.name,
    email: backend.email,
    phone: backend.phone,
    created_at: backend.created_at,
  }
}

// --- Admin Customer CRUD Functions ---

export async function getAllAdminCustomers(): Promise<Customer[]> {
  const response = await fetch(`${API_BASE_URL}/admin/customers/`, {
    method: "GET",
    headers: getAuthHeaders(),
  })
  const data = await handleApiResponse<AdminCustomerListResponse>(response)
  return data.customers.map(mapBackendToFrontendCustomer)
}

export async function getAdminCustomerById(customerId: number): Promise<Customer | null> {
  try {
    const response = await fetch(`${API_BASE_URL}/admin/customers/${customerId}`, {
      method: "GET",
      headers: getAuthHeaders(),
    })
    // Assuming the backend returns the customer object directly or wrapped,
    // handleApiResponse should manage this. If it's not wrapped, BackendCustomer is fine.
    // If wrapped, e.g. { customer: {...} }, then use AdminCustomerDetailResponse.
    // Let's assume it might be wrapped as per the interface defined.
    const data = await handleApiResponse<AdminCustomerDetailResponse | BackendCustomer>(response)

    if ("customer" in data) {
      return mapBackendToFrontendCustomer(data.customer)
    }
    return mapBackendToFrontendCustomer(data as BackendCustomer) // Cast if not wrapped
  } catch (error) {
    if (error instanceof Error && error.message.includes("API error (404)")) {
      return null
    }
    throw error
  }
}

export async function createAdminCustomer(customerData: AdminCustomerCreateRequest): Promise<Customer> {
  const response = await fetch(`${API_BASE_URL}/admin/customers/`, {
    method: "POST",
    headers: getAuthHeaders(), // getAuthHeaders from api-config should set Content-Type
    body: JSON.stringify(customerData),
  })
  // Assuming response is { customer: BackendCustomer, message: string } or just BackendCustomer
  const data = await handleApiResponse<AdminCustomerDetailResponse | BackendCustomer>(response)
  if ("customer" in data) {
    return mapBackendToFrontendCustomer(data.customer)
  }
  return mapBackendToFrontendCustomer(data as BackendCustomer)
}

export async function updateAdminCustomer(
  customerId: number,
  customerData: AdminCustomerUpdateRequest,
): Promise<Customer> {
  const response = await fetch(`${API_BASE_URL}/admin/customers/${customerId}`, {
    method: "PATCH",
    headers: getAuthHeaders(),
    body: JSON.stringify(customerData),
  })
  const data = await handleApiResponse<AdminCustomerDetailResponse | BackendCustomer>(response)
  if ("customer" in data) {
    return mapBackendToFrontendCustomer(data.customer)
  }
  return mapBackendToFrontendCustomer(data as BackendCustomer)
}

export async function deleteAdminCustomer(customerId: number): Promise<void> {
  const response = await fetch(`${API_BASE_URL}/admin/customers/${customerId}`, {
    method: "DELETE",
    headers: getAuthHeaders(),
  })
  // handleApiResponse should ideally handle 204 No Content.
  // If it expects JSON, this might need adjustment in handleApiResponse or a specific check here.
  await handleApiResponse<unknown>(response) // Expecting no JSON content for a successful DELETE
}

================
File: frontend/app/services/fee-service.ts
================
import { API_BASE_URL, getAuthHeaders, handleApiResponse } from "./api-config"
import { isOfflineMode } from "./utils"

// Fee calculation request
export interface FeeCalculationRequest {
  aircraftId: string
  customerId: string
  fuelType: string
  quantity: number
}

// Fee calculation result
export interface FeeCalculationResult {
  subtotal: number
  taxRate: number
  taxAmount: number
  total: number
  breakdown: {
    baseFuelPrice: number
    aircraftFactor: number
    customerDiscount: number
    volumeDiscount: number
  }
}

// Calculate fees for a fuel order
export async function calculateFees(request: FeeCalculationRequest): Promise<FeeCalculationResult> {
  if (isOfflineMode()) {
    // Calculate fees locally
    return calculateFeesLocally(request)
  }

  // Online mode - calculate via API
  const response = await fetch(`${API_BASE_URL}/fees/calculate`, {
    method: "POST",
    headers: getAuthHeaders(),
    body: JSON.stringify(request),
  })

  return handleApiResponse<FeeCalculationResult>(response)
}

// Local fee calculation
function calculateFeesLocally(request: FeeCalculationRequest): FeeCalculationResult {
  // Base fuel prices per gallon
  const basePrices = {
    "Jet A": 5.25,
    "Jet A+": 5.75,
    Avgas: 6.5,
    "Sustainable Aviation Fuel": 7.25,
  }

  // Get base price for fuel type
  const baseFuelPrice = basePrices[request.fuelType as keyof typeof basePrices] || 5.25

  // Aircraft factor (would normally be looked up from a database)
  // For demo purposes, we'll use the last digit of the aircraft ID
  const aircraftId = Number.parseInt(request.aircraftId)
  const aircraftFactor = (aircraftId % 10) * 0.01 // 0% to 9% adjustment

  // Customer discount (would normally be looked up from a database)
  // For demo purposes, we'll use the last digit of the customer ID
  const customerId = Number.parseInt(request.customerId)
  const customerDiscount = (customerId % 10) * 0.01 // 0% to 9% discount

  // Volume discount
  let volumeDiscount = 0
  if (request.quantity >= 1000) {
    volumeDiscount = 0.1 // 10% discount for 1000+ gallons
  } else if (request.quantity >= 500) {
    volumeDiscount = 0.05 // 5% discount for 500+ gallons
  } else if (request.quantity >= 250) {
    volumeDiscount = 0.025 // 2.5% discount for 250+ gallons
  }

  // Calculate adjusted price per gallon
  const adjustedPrice = baseFuelPrice * (1 + aircraftFactor) * (1 - customerDiscount) * (1 - volumeDiscount)

  // Calculate subtotal
  const subtotal = adjustedPrice * request.quantity

  // Apply tax
  const taxRate = 0.0725 // 7.25% tax rate
  const taxAmount = subtotal * taxRate

  // Calculate total
  const total = subtotal + taxAmount

  // Return fee calculation result
  return {
    subtotal: Number.parseFloat(subtotal.toFixed(2)),
    taxRate: taxRate,
    taxAmount: Number.parseFloat(taxAmount.toFixed(2)),
    total: Number.parseFloat(total.toFixed(2)),
    breakdown: {
      baseFuelPrice: baseFuelPrice,
      aircraftFactor: aircraftFactor,
      customerDiscount: customerDiscount,
      volumeDiscount: volumeDiscount,
    },
  }
}

================
File: frontend/app/services/lst-service.ts
================
import { API_BASE_URL, getAuthHeaders, handleApiResponse } from "./api-config"

// LST Interface matching the frontend data structure
export interface LST {
  id: string
  name: string
  email: string
  employeeId: string
  status: "active" | "inactive" | "on_leave"
  shift: "day" | "night" | "swing"
  certifications: string[]
  performanceRating: number
  ordersCompleted: number
  averageTime: number // in minutes
  lastActive: string
  hireDate: string
}

// Response types for LST endpoints
export interface LSTResponse {
  message: string
  lst: LST
}

export interface LSTsResponse {
  message: string
  lsts: LST[]
}

export interface LSTStatsResponse {
  message: string
  stats: {
    total_lsts: number
    active_lsts: number
    average_performance: number
    average_completion_time: number
  }
}

// Request payload types
export interface LSTCreateRequest {
  name: string
  email: string
  employee_id: string
  shift: "day" | "night" | "swing"
  certifications?: string[]
  password?: string // Optional, backend can generate default password
}

export interface LSTUpdateRequest {
  name?: string
  email?: string
  employee_id?: string
  status?: "active" | "inactive" | "on_leave"
  shift?: "day" | "night" | "swing"
  certifications?: string[]
  performance_rating?: number
}

// LST CRUD Functions

export async function getAllLSTs(filters?: { 
  status?: "active" | "inactive" | "on_leave", 
  shift?: "day" | "night" | "swing" 
}): Promise<LST[]> {
  let url = `${API_BASE_URL}/admin/lsts`
  const queryParams = new URLSearchParams()

  if (filters?.status) {
    queryParams.append("status", filters.status)
  }
  if (filters?.shift) {
    queryParams.append("shift", filters.shift)
  }

  if (queryParams.toString()) {
    url += `?${queryParams.toString()}`
  }

  try {
    const response = await fetch(url, {
      method: "GET",
      headers: getAuthHeaders(),
    })
    const data = await handleApiResponse<LSTsResponse>(response)
    return data.lsts
  } catch (error) {
    console.error("Error fetching LSTs:", error)
    throw error
  }
}

export async function createLST(lstData: LSTCreateRequest): Promise<LST> {
  try {
    const response = await fetch(`${API_BASE_URL}/admin/lsts`, {
      method: "POST",
      headers: getAuthHeaders(),
      body: JSON.stringify(lstData),
    })
    const data = await handleApiResponse<LSTResponse>(response)
    return data.lst
  } catch (error) {
    console.error("Error creating LST:", error)
    throw error
  }
}

export async function getLSTById(lstId: string): Promise<LST> {
  try {
    const response = await fetch(`${API_BASE_URL}/admin/lsts/${lstId}`, {
      method: "GET",
      headers: getAuthHeaders(),
    })
    const data = await handleApiResponse<LSTResponse>(response)
    return data.lst
  } catch (error) {
    console.error("Error fetching LST:", error)
    throw error
  }
}

export async function updateLST(lstId: string, lstData: LSTUpdateRequest): Promise<LST> {
  try {
    const response = await fetch(`${API_BASE_URL}/admin/lsts/${lstId}`, {
      method: "PATCH",
      headers: getAuthHeaders(),
      body: JSON.stringify(lstData),
    })
    const data = await handleApiResponse<LSTResponse>(response)
    return data.lst
  } catch (error) {
    console.error("Error updating LST:", error)
    throw error
  }
}

export async function deleteLST(lstId: string): Promise<{ message: string }> {
  try {
    const response = await fetch(`${API_BASE_URL}/admin/lsts/${lstId}`, {
      method: "DELETE",
      headers: getAuthHeaders(),
    })
    return handleApiResponse<{ message: string }>(response)
  } catch (error) {
    console.error("Error deleting LST:", error)
    throw error
  }
}

export async function getLSTStats(): Promise<LSTStatsResponse['stats']> {
  try {
    const response = await fetch(`${API_BASE_URL}/admin/lsts/stats`, {
      method: "GET",
      headers: getAuthHeaders(),
    })
    const data = await handleApiResponse<LSTStatsResponse>(response)
    return data.stats
  } catch (error) {
    console.error("Error fetching LST stats:", error)
    throw error
  }
}

// Helper function to convert backend LST data to frontend format if needed
export function transformBackendLST(backendLST: any): LST {
  return {
    id: backendLST.id?.toString() || backendLST.user_id?.toString(),
    name: backendLST.name || '',
    email: backendLST.email || '',
    employeeId: backendLST.employee_id || `LST${backendLST.id}`,
    status: mapBackendStatus(backendLST.status || backendLST.is_active),
    shift: backendLST.shift || 'day',
    certifications: backendLST.certifications || [],
    performanceRating: backendLST.performance_rating || 0,
    ordersCompleted: backendLST.orders_completed || 0,
    averageTime: backendLST.average_time || 0,
    lastActive: backendLST.last_active || new Date().toISOString(),
    hireDate: backendLST.hire_date || backendLST.created_at || new Date().toISOString(),
  }
}

// Helper function to map backend status to frontend status
function mapBackendStatus(backendStatus: any): "active" | "inactive" | "on_leave" {
  if (typeof backendStatus === 'boolean') {
    return backendStatus ? 'active' : 'inactive'
  }
  if (typeof backendStatus === 'string') {
    const lowerStatus = backendStatus.toLowerCase()
    if (lowerStatus === 'active' || lowerStatus === 'inactive' || lowerStatus === 'on_leave') {
      return lowerStatus as "active" | "inactive" | "on_leave"
    }
  }
  return 'active' // default fallback
}

================
File: frontend/app/services/receipt-service.ts
================
import { API_BASE_URL, getAuthHeaders, handleApiResponse } from "./api-config"
import { isOfflineMode } from "./utils"

// Receipt model
export interface Receipt {
  id: number
  receiptNumber: string
  fuelOrderId: number
  tailNumber: string
  customer: string
  fuelType: string
  quantity: number
  amount: number
  paymentMethod: string
  status: string
  createdAt: string
  updatedAt?: string
  fuelerName: string
  location: string
  notes?: string
  refundAmount?: number
  refundReason?: string
  refundedAt?: string
}

// Create Receipt Request
export interface CreateReceiptRequest {
  fuelOrderId: number
  tailNumber: string
  customer: string
  fuelType: string
  quantity: number
  amount: number
  paymentMethod: string
  fuelerName: string
  location: string
  notes?: string
}

// Mock receipt data for offline mode
const mockReceipts: Receipt[] = [
  {
    id: 1,
    receiptNumber: "RCP-2024-001",
    fuelOrderId: 1,
    tailNumber: "N123AB",
    customer: "Delta Airlines",
    fuelType: "Jet A",
    quantity: 500,
    amount: 2750.0,
    paymentMethod: "Corporate Account",
    status: "PAID",
    createdAt: "2024-01-15T10:30:00Z",
    updatedAt: "2024-01-15T10:35:00Z",
    fuelerName: "Mike Johnson",
    location: "Gate A1",
    notes: "Standard refueling operation",
  },
  {
    id: 2,
    receiptNumber: "RCP-2024-002",
    fuelOrderId: 2,
    tailNumber: "N456CD",
    customer: "United Airlines",
    fuelType: "Jet A",
    quantity: 750,
    amount: 4125.0,
    paymentMethod: "Credit Card",
    status: "PAID",
    createdAt: "2024-01-15T14:45:00Z",
    updatedAt: "2024-01-15T14:50:00Z",
    fuelerName: "Sarah Wilson",
    location: "Gate B3",
    notes: "Priority refueling",
  },
  {
    id: 3,
    receiptNumber: "RCP-2024-003",
    fuelOrderId: 3,
    tailNumber: "N789EF",
    customer: "American Airlines",
    fuelType: "Jet A",
    quantity: 300,
    amount: 1650.0,
    paymentMethod: "Corporate Account",
    status: "PENDING",
    createdAt: "2024-01-16T09:15:00Z",
    fuelerName: "Tom Davis",
    location: "Gate C2",
  },
  {
    id: 4,
    receiptNumber: "RCP-2024-004",
    fuelOrderId: 4,
    tailNumber: "N321GH",
    customer: "Southwest Airlines",
    fuelType: "Jet A",
    quantity: 450,
    amount: 2475.0,
    paymentMethod: "Credit Card",
    status: "PAID",
    createdAt: "2024-01-16T11:20:00Z",
    updatedAt: "2024-01-16T11:25:00Z",
    fuelerName: "Lisa Chen",
    location: "Gate D1",
    notes: "Quick turnaround required",
  },
  {
    id: 5,
    receiptNumber: "RCP-2024-005",
    fuelOrderId: 5,
    tailNumber: "N654IJ",
    customer: "JetBlue Airways",
    fuelType: "Jet A",
    quantity: 600,
    amount: 3300.0,
    paymentMethod: "Corporate Account",
    status: "REFUNDED",
    createdAt: "2024-01-17T08:30:00Z",
    updatedAt: "2024-01-17T16:45:00Z",
    fuelerName: "Mark Rodriguez",
    location: "Gate E2",
    refundAmount: 3300.0,
    refundReason: "Flight cancelled",
    refundedAt: "2024-01-17T16:45:00Z",
  },
  {
    id: 6,
    receiptNumber: "RCP-2024-006",
    fuelOrderId: 6,
    tailNumber: "N987KL",
    customer: "Alaska Airlines",
    fuelType: "Jet A",
    quantity: 400,
    amount: 2200.0,
    paymentMethod: "Cash",
    status: "PAID",
    createdAt: "2024-01-17T13:15:00Z",
    updatedAt: "2024-01-17T13:20:00Z",
    fuelerName: "Jennifer Park",
    location: "Gate F3",
  },
  {
    id: 7,
    receiptNumber: "RCP-2024-007",
    fuelOrderId: 7,
    tailNumber: "N147MN",
    customer: "Frontier Airlines",
    fuelType: "Jet A",
    quantity: 350,
    amount: 1925.0,
    paymentMethod: "Check",
    status: "PENDING",
    createdAt: "2024-01-18T10:45:00Z",
    fuelerName: "David Kim",
    location: "Gate G1",
    notes: "Waiting for check clearance",
  },
  {
    id: 8,
    receiptNumber: "RCP-2024-008",
    fuelOrderId: 8,
    tailNumber: "N258OP",
    customer: "Spirit Airlines",
    fuelType: "Jet A",
    quantity: 275,
    amount: 1512.5,
    paymentMethod: "Credit Card",
    status: "PAID",
    createdAt: "2024-01-18T15:30:00Z",
    updatedAt: "2024-01-18T15:35:00Z",
    fuelerName: "Amanda Foster",
    location: "Gate H2",
  },
]

// Initialize localStorage with mock data if not present
function initializeMockData() {
  if (isOfflineMode() && !localStorage.getItem("fboReceipts")) {
    localStorage.setItem("fboReceipts", JSON.stringify(mockReceipts))
  }
}

// Get all receipts
export async function getReceipts(): Promise<Receipt[]> {
  if (isOfflineMode()) {
    initializeMockData()
    const storedReceipts = localStorage.getItem("fboReceipts")
    if (storedReceipts) {
      return JSON.parse(storedReceipts)
    }
    return mockReceipts
  }

  // Online mode - fetch from API
  const response = await fetch(`${API_BASE_URL}/receipts`, {
    method: "GET",
    headers: getAuthHeaders(),
  })

  return handleApiResponse<Receipt[]>(response)
}

// Get receipt by ID
export async function getReceipt(id: number): Promise<Receipt> {
  if (isOfflineMode()) {
    initializeMockData()
    const storedReceipts = localStorage.getItem("fboReceipts")
    if (!storedReceipts) {
      throw new Error("Receipt not found")
    }

    const receipts = JSON.parse(storedReceipts) as Receipt[]
    const receipt = receipts.find((r) => r.id === id)

    if (!receipt) {
      throw new Error("Receipt not found")
    }

    return receipt
  }

  // Online mode - fetch from API
  const response = await fetch(`${API_BASE_URL}/receipts/${id}`, {
    method: "GET",
    headers: getAuthHeaders(),
  })

  return handleApiResponse<Receipt>(response)
}

// Create a new receipt
export async function createReceipt(receiptData: CreateReceiptRequest): Promise<Receipt> {
  if (isOfflineMode()) {
    initializeMockData()
    const newReceipt: Receipt = {
      ...receiptData,
      id: Date.now(),
      receiptNumber: `RCP-${new Date().getFullYear()}-${String(Date.now()).slice(-3)}`,
      status: "PENDING",
      createdAt: new Date().toISOString(),
    }

    const storedReceipts = localStorage.getItem("fboReceipts")
    const receipts = storedReceipts ? (JSON.parse(storedReceipts) as Receipt[]) : []

    receipts.push(newReceipt)
    localStorage.setItem("fboReceipts", JSON.stringify(receipts))

    return newReceipt
  }

  // Online mode - create via API
  const response = await fetch(`${API_BASE_URL}/receipts`, {
    method: "POST",
    headers: getAuthHeaders(),
    body: JSON.stringify(receiptData),
  })

  return handleApiResponse<Receipt>(response)
}

// Update a receipt
export async function updateReceipt(id: number, updates: Partial<Receipt>): Promise<Receipt> {
  if (isOfflineMode()) {
    initializeMockData()
    const storedReceipts = localStorage.getItem("fboReceipts")
    if (!storedReceipts) {
      throw new Error("Receipt not found")
    }

    const receipts = JSON.parse(storedReceipts) as Receipt[]
    const index = receipts.findIndex((r) => r.id === id)

    if (index === -1) {
      throw new Error("Receipt not found")
    }

    const updatedReceipt = {
      ...receipts[index],
      ...updates,
      updatedAt: new Date().toISOString(),
    }

    // If status is changing to REFUNDED, add refunded timestamp
    if (updates.status === "REFUNDED" && receipts[index].status !== "REFUNDED") {
      updatedReceipt.refundedAt = new Date().toISOString()
    }

    receipts[index] = updatedReceipt
    localStorage.setItem("fboReceipts", JSON.stringify(receipts))

    return updatedReceipt
  }

  // Online mode - update via API
  const response = await fetch(`${API_BASE_URL}/receipts/${id}`, {
    method: "PUT",
    headers: getAuthHeaders(),
    body: JSON.stringify(updates),
  })

  return handleApiResponse<Receipt>(response)
}

// Delete a receipt
export async function deleteReceipt(id: number): Promise<boolean> {
  if (isOfflineMode()) {
    const storedReceipts = localStorage.getItem("fboReceipts")
    if (!storedReceipts) {
      return false
    }

    const receipts = JSON.parse(storedReceipts) as Receipt[]
    const updatedReceipts = receipts.filter((r) => r.id !== id)

    if (updatedReceipts.length === receipts.length) {
      return false // No receipt was removed
    }

    localStorage.setItem("fboReceipts", JSON.stringify(updatedReceipts))
    return true
  }

  // Online mode - delete via API
  const response = await fetch(`${API_BASE_URL}/receipts/${id}`, {
    method: "DELETE",
    headers: getAuthHeaders(),
  })

  return response.ok
}

// Filter receipts
export function filterReceipts(
  receipts: Receipt[],
  searchTerm?: string,
  startDate?: string,
  endDate?: string,
  status?: string,
  paymentMethod?: string,
): Receipt[] {
  return receipts.filter((receipt) => {
    // Search term filter
    if (searchTerm) {
      const searchLower = searchTerm.toLowerCase()
      const matchesSearch =
        receipt.receiptNumber.toLowerCase().includes(searchLower) ||
        receipt.tailNumber.toLowerCase().includes(searchLower) ||
        receipt.customer.toLowerCase().includes(searchLower) ||
        receipt.fuelerName.toLowerCase().includes(searchLower) ||
        receipt.location.toLowerCase().includes(searchLower)

      if (!matchesSearch) {
        return false
      }
    }

    // Filter by start date
    if (startDate && new Date(receipt.createdAt) < new Date(startDate)) {
      return false
    }

    // Filter by end date
    if (endDate) {
      const endDateTime = new Date(endDate)
      endDateTime.setHours(23, 59, 59, 999) // End of the day
      if (new Date(receipt.createdAt) > endDateTime) {
        return false
      }
    }

    // Filter by status
    if (status && status !== "ALL" && receipt.status !== status) {
      return false
    }

    // Filter by payment method
    if (paymentMethod && paymentMethod !== "ALL" && receipt.paymentMethod !== paymentMethod) {
      return false
    }

    return true
  })
}

// Sort receipts
export function sortReceipts(receipts: Receipt[], sortBy: string, sortOrder: "asc" | "desc"): Receipt[] {
  return [...receipts].sort((a, b) => {
    let aValue: any
    let bValue: any

    switch (sortBy) {
      case "receiptNumber":
        aValue = a.receiptNumber
        bValue = b.receiptNumber
        break
      case "customer":
        aValue = a.customer
        bValue = b.customer
        break
      case "amount":
        aValue = a.amount
        bValue = b.amount
        break
      case "createdAt":
        aValue = new Date(a.createdAt)
        bValue = new Date(b.createdAt)
        break
      case "tailNumber":
        aValue = a.tailNumber
        bValue = b.tailNumber
        break
      case "status":
        aValue = a.status
        bValue = b.status
        break
      default:
        aValue = a.id
        bValue = b.id
    }

    if (aValue < bValue) {
      return sortOrder === "asc" ? -1 : 1
    }
    if (aValue > bValue) {
      return sortOrder === "asc" ? 1 : -1
    }
    return 0
  })
}

// Convert receipts to CSV
export function convertReceiptsToCSV(receipts: Receipt[]): string {
  if (receipts.length === 0) {
    return ""
  }

  // Define CSV headers
  const headers = [
    "Receipt ID",
    "Receipt Number",
    "Fuel Order ID",
    "Tail Number",
    "Customer",
    "Fuel Type",
    "Quantity (Gallons)",
    "Amount",
    "Payment Method",
    "Status",
    "Created At",
    "Updated At",
    "Fueler Name",
    "Location",
    "Notes",
    "Refund Amount",
    "Refund Reason",
    "Refunded At",
  ]

  // Create CSV content
  const csvContent = [
    headers.join(","),
    ...receipts.map((receipt) =>
      [
        receipt.id,
        receipt.receiptNumber,
        receipt.fuelOrderId,
        receipt.tailNumber,
        receipt.customer,
        receipt.fuelType,
        receipt.quantity,
        receipt.amount,
        receipt.paymentMethod,
        receipt.status,
        receipt.createdAt,
        receipt.updatedAt || "",
        receipt.fuelerName,
        receipt.location,
        receipt.notes ? `"${receipt.notes.replace(/"/g, '""')}"` : "",
        receipt.refundAmount || "",
        receipt.refundReason ? `"${receipt.refundReason.replace(/"/g, '""')}"` : "",
        receipt.refundedAt || "",
      ].join(","),
    ),
  ].join("\n")

  return csvContent
}

// Download CSV
export function downloadReceiptsCSV(csvContent: string, filename: string): void {
  const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" })
  const link = document.createElement("a")

  // Create a URL for the blob
  const url = URL.createObjectURL(blob)

  // Set link properties
  link.setAttribute("href", url)
  link.setAttribute("download", filename)
  link.style.visibility = "hidden"

  // Append to the document, click, and remove
  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
}

// Get receipt statistics
export function getReceiptStatistics(receipts: Receipt[]) {
  const stats = {
    total: receipts.length,
    paid: receipts.filter((r) => r.status === "PAID").length,
    pending: receipts.filter((r) => r.status === "PENDING").length,
    refunded: receipts.filter((r) => r.status === "REFUNDED").length,
    totalAmount: receipts.reduce((sum, r) => sum + r.amount, 0),
    totalRefunded: receipts.filter((r) => r.status === "REFUNDED").reduce((sum, r) => sum + (r.refundAmount || 0), 0),
  }

  return stats
}

================
File: frontend/app/services/utils.ts
================
// Utility functions for the application

// Check if we're in offline mode
export function isOfflineMode(): boolean {
  // Always return true for preview environment
  return true
}

// Format currency
export function formatCurrency(amount: number): string {
  return new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
  }).format(amount)
}

// Format date
export function formatDate(date: string | Date): string {
  if (!date) return ""

  const dateObj = typeof date === "string" ? new Date(date) : date
  return dateObj.toLocaleDateString("en-US", {
    year: "numeric",
    month: "short",
    day: "numeric",
  })
}

// Format time
export function formatTime(date: string | Date): string {
  if (!date) return ""

  const dateObj = typeof date === "string" ? new Date(date) : date
  return dateObj.toLocaleTimeString("en-US", {
    hour: "2-digit",
    minute: "2-digit",
  })
}

// Format date and time
export function formatDateTime(date: string | Date): string {
  if (!date) return ""

  return `${formatDate(date)} ${formatTime(date)}`
}

================
File: frontend/app/services/write_service.py
================
import os

================
File: frontend/app/styles/design-tokens.ts
================
/**
 * FBO LaunchPad Design System Tokens
 *
 * This file contains all the design tokens used throughout the application.
 * Always reference these tokens instead of hardcoding values to maintain consistency.
 */

// Color Palette
export const colors = {
  // Primary Colors
  primary: {
    50: "#e6f7ff",
    100: "#bae7ff",
    200: "#91d5ff",
    300: "#69c0ff",
    400: "#40a9ff",
    500: "#1890ff", // Primary brand color
    600: "#096dd9",
    700: "#0050b3",
    800: "#003a8c",
    900: "#002766",
  },

  // Neutral Colors
  neutral: {
    50: "#f8f9fa",
    100: "#f1f3f5",
    200: "#e9ecef",
    300: "#dee2e6",
    400: "#ced4da",
    500: "#adb5bd",
    600: "#868e96",
    700: "#495057",
    800: "#343a40",
    900: "#212529",
  },

  // Status Colors
  success: {
    50: "#e6f7ee",
    100: "#c3e9d5",
    500: "#52c41a",
    600: "#389e0d",
    700: "#237804",
  },
  warning: {
    50: "#fffbe6",
    100: "#fff1b8",
    500: "#faad14",
    600: "#d48806",
    700: "#ad6800",
  },
  error: {
    50: "#fff1f0",
    100: "#ffccc7",
    500: "#ff4d4f",
    600: "#f5222d",
    700: "#cf1322",
  },
  info: {
    50: "#e6f7ff",
    100: "#bae7ff",
    500: "#1890ff",
    600: "#096dd9",
    700: "#0050b3",
  },

  // Background Colors
  background: {
    light: "#ffffff",
    dark: "#141414",
    lightAlt: "#f8f9fa",
    darkAlt: "#1f1f1f",
  },

  // Text Colors
  text: {
    light: {
      primary: "#212529",
      secondary: "#495057",
      disabled: "#adb5bd",
    },
    dark: {
      primary: "#f8f9fa",
      secondary: "#dee2e6",
      disabled: "#868e96",
    },
  },

  // Border Colors
  border: {
    light: "#dee2e6",
    dark: "#434343",
    lightFocus: "#40a9ff",
    darkFocus: "#177ddc",
  },
}

// Typography
export const typography = {
  fontFamily: {
    base: 'Inter, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif',
    mono: 'SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace',
  },
  fontWeight: {
    regular: 400,
    medium: 500,
    semibold: 600,
    bold: 700,
  },
  fontSize: {
    xs: "0.75rem", // 12px
    sm: "0.875rem", // 14px
    base: "1rem", // 16px
    lg: "1.125rem", // 18px
    xl: "1.25rem", // 20px
    "2xl": "1.5rem", // 24px
    "3xl": "1.875rem", // 30px
    "4xl": "2.25rem", // 36px
  },
  lineHeight: {
    none: 1,
    tight: 1.25,
    snug: 1.375,
    normal: 1.5,
    relaxed: 1.625,
    loose: 2,
  },
}

// Spacing
export const spacing = {
  0: "0",
  1: "0.25rem", // 4px
  2: "0.5rem", // 8px
  3: "0.75rem", // 12px
  4: "1rem", // 16px
  5: "1.25rem", // 20px
  6: "1.5rem", // 24px
  8: "2rem", // 32px
  10: "2.5rem", // 40px
  12: "3rem", // 48px
  16: "4rem", // 64px
  20: "5rem", // 80px
  24: "6rem", // 96px
  32: "8rem", // 128px
}

// Border Radius
export const borderRadius = {
  none: "0",
  sm: "0.125rem", // 2px
  DEFAULT: "0.25rem", // 4px
  md: "0.375rem", // 6px
  lg: "0.5rem", // 8px
  xl: "0.75rem", // 12px
  "2xl": "1rem", // 16px
  full: "9999px",
}

// Shadows
export const shadows = {
  sm: "0 1px 2px 0 rgba(0, 0, 0, 0.05)",
  DEFAULT: "0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)",
  md: "0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)",
  lg: "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",
  xl: "0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)",
  "2xl": "0 25px 50px -12px rgba(0, 0, 0, 0.25)",
  inner: "inset 0 2px 4px 0 rgba(0, 0, 0, 0.06)",
  none: "none",
}

// Z-index
export const zIndex = {
  0: "0",
  10: "10",
  20: "20",
  30: "30",
  40: "40",
  50: "50",
  auto: "auto",
}

// Transitions
export const transitions = {
  duration: {
    75: "75ms",
    100: "100ms",
    150: "150ms",
    200: "200ms",
    300: "300ms",
    500: "500ms",
    700: "700ms",
    1000: "1000ms",
  },
  timing: {
    ease: "cubic-bezier(0.25, 0.1, 0.25, 1)",
    linear: "linear",
    easeIn: "cubic-bezier(0.42, 0, 1, 1)",
    easeOut: "cubic-bezier(0, 0, 0.58, 1)",
    easeInOut: "cubic-bezier(0.42, 0, 0.58, 1)",
  },
}

// Breakpoints
export const breakpoints = {
  xs: "0px",
  sm: "640px",
  md: "768px",
  lg: "1024px",
  xl: "1280px",
  "2xl": "1536px",
}

// Layout
export const layout = {
  sidebarWidth: {
    expanded: "280px",
    collapsed: "80px",
  },
  headerHeight: "64px",
  contentMaxWidth: "1440px",
}

================
File: frontend/app/terms/page.tsx
================
"use client"

import Link from "next/link"

import Header from "@/components/header"
import Footer from "@/components/footer"
import { useEffect, useState } from "react"
import { Shield, FileText, AlertCircle, Scale } from "lucide-react"

export default function TermsOfService() {
  // Scroll to top when page loads
  useEffect(() => {
    window.scrollTo(0, 0)
  }, [])

  const [isVisible, setIsVisible] = useState(false)

  useEffect(() => {
    setIsVisible(true)
  }, [])

  return (
    <div className="flex min-h-screen flex-col">
      <Header />

      <main className="flex-1 bg-background">
        <div className="relative py-12 md:py-16 bg-primary/10 dark:bg-primary/5 border-b">
          <div className="absolute inset-0 tech-pattern opacity-10"></div>
          <div className="container px-4 md:px-6 relative">
            <div
              className={`max-w-3xl mx-auto transition-all duration-1000 ${
                isVisible ? "opacity-100 translate-y-0" : "opacity-0 translate-y-10"
              }`}
            >
              <div className="flex items-center gap-2 mb-4">
                <Scale className="h-6 w-6 text-primary" />
                <h1 className="text-3xl font-bold tracking-tighter md:text-4xl">Terms of Service</h1>
              </div>
              <p className="text-muted-foreground md:text-lg">
                Effective Date: April 24, 2025
                <br />
                Last Updated: April 24, 2025
              </p>
            </div>
          </div>
        </div>

        <div className="container px-4 md:px-6 py-12 md:py-16">
          <div className="max-w-3xl mx-auto">
            <div className="prose dark:prose-invert max-w-none">
              <p className="font-bold">
                PLEASE READ THESE TERMS OF SERVICE CAREFULLY. THIS IS A BINDING LEGAL AGREEMENT.
              </p>

              <p>
                This Terms of Service agreement (the "Terms" or "ToS") governs your access to and use of the website
                located at fbolaunchpad.com (the "Website") and the software-as-a-service platform, including any
                associated applications or features, offered by FBO LaunchPad ("FBO LaunchPad," "we," "us," or "our")
                (collectively, the "Services").
              </p>

              <p>
                By accessing or using the Website, clicking "I accept," signing up for or using the Services, or
                executing a Subscription Agreement that references these Terms, you ("User," "you," or "your," which
                refers to Website Visitors, Customers, and Authorized Users, as applicable) agree to be bound by these
                Terms and our Privacy Policy, which is incorporated herein by reference.
              </p>

              <p>
                If you are entering into these Terms on behalf of a company or other legal entity (an "FBO Customer" or
                "Customer"), you represent that you have the authority to bind such entity and its affiliates to these
                Terms, in which case the terms "User," "you," or "your" shall refer to such entity and its affiliates.
                If you do not have such authority, or if you do not agree with these Terms, you must not accept these
                Terms and may not use the Services.
              </p>

              <section className="mb-10" id="definitions">
                <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
                  <FileText className="h-5 w-5 text-primary" />
                  1. Definitions
                </h2>
                <p>
                  <strong>"Authorized User"</strong> means an individual employee, agent, or contractor of a Customer
                  who is authorized by that Customer to access and use the SaaS Platform pursuant to the Customer's
                  Subscription Agreement and these Terms.
                </p>
                <p>
                  <strong>"Customer" or "FBO Customer"</strong> means the Fixed-Base Operator entity that has subscribed
                  to the SaaS Platform via a Subscription Agreement.
                </p>
                <p>
                  <strong>"Customer Data"</strong> means all electronic data or information submitted by or for Customer
                  or its Authorized Users to the SaaS Platform, concerning Customer's operations, clients (pilots,
                  aircraft owners/operators), aircraft, services rendered, etc.
                </p>
                <p>
                  <strong>"SaaS Platform"</strong> means the FBO LaunchPad subscription-based software-as-a-service
                  application, including web interfaces and mobile applications, designed for FBO operations management.
                </p>
                <p>
                  <strong>"Subscription Agreement"</strong> means the separate agreement (such as a Master Services
                  Agreement or Order Form) entered into between FBO LaunchPad and the Customer governing the
                  subscription to, and use of, the SaaS Platform.
                </p>
                <p>
                  <strong>"Website"</strong> means the public-facing website located at fbolaunchpad.com.
                </p>
                <p>
                  <strong>"Website Visitor"</strong> means any individual Browse the Website who is not accessing the
                  SaaS Platform as a Customer or Authorized User.
                </p>
              </section>

              <section className="mb-10" id="description-of-services">
                <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
                  <FileText className="h-5 w-5 text-primary" />
                  2. Description of Services
                </h2>
                <p>FBO LaunchPad provides:</p>
                <p>
                  <strong>(a) Website:</strong> An informational resource describing our company, the SaaS Platform, and
                  related services, which may include blogs, articles, and contact forms.
                </p>
                <p>
                  <strong>(b) SaaS Platform:</strong> A subscription-based platform designed to modernize and streamline
                  FBO operations. Features include tools for communication and workflow between FBO Fuelers/Line Service
                  Technicians (LSTs) and Customer Service Representatives (CSRs), digital dispatch, automated digital
                  fuel receipt transmission, and potentially future modules for tenant leasing, customer profiles,
                  billing/POS integration, and AI-powered features (e.g., aircraft ownership verification via
                  third-party APIs).
                </p>
                <p>
                  We reserve the right to modify, enhance, suspend, or discontinue the Services (or any part thereof) at
                  any time, with or without notice, provided that material adverse changes to the core functionality of
                  the SaaS Platform for existing Customers will be subject to the terms of their Subscription Agreement.
                </p>
              </section>

              <section className="mb-10" id="use-of-website">
                <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
                  <FileText className="h-5 w-5 text-primary" />
                  3. Use of the Website
                </h2>
                <p>
                  Subject to these Terms, FBO LaunchPad grants Website Visitors a limited, non-exclusive,
                  non-transferable, revocable license to access and use the Website for informational purposes only. You
                  agree not to use the Website for any unlawful purpose or in any way that could damage, disable,
                  overburden, or impair the Website or interfere with any other party's use and enjoyment of it. You may
                  not attempt to gain unauthorized access to any part of the Website or any systems or networks
                  connected to the Website. Copying, distributing, or modifying Website content without our express
                  written permission is prohibited.
                </p>
              </section>

              <section className="mb-10" id="saas-platform-access">
                <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
                  <FileText className="h-5 w-5 text-primary" />
                  4. SaaS Platform Access and Use
                </h2>
                <p>
                  <strong>(a) Subscription:</strong> Access to and use of the SaaS Platform requires a valid, active
                  Subscription Agreement between FBO LaunchPad and the FBO Customer. These Terms supplement, and are
                  incorporated into, the Subscription Agreement. In the event of a direct conflict between these Terms
                  and a specific Subscription Agreement, the terms of the Subscription Agreement shall prevail with
                  respect to that Customer.
                </p>
                <p>
                  <strong>(b) License Grant:</strong> Subject to the terms of the applicable Subscription Agreement and
                  these Terms, FBO LaunchPad grants the Customer, during the subscription term, a limited,
                  non-exclusive, non-transferable (except as permitted in the Subscription Agreement), revocable license
                  for its Authorized Users to access and use the SaaS Platform solely for the Customer's internal FBO
                  business operations.
                </p>
                <p>
                  <strong>(c) User Accounts:</strong> Customers are responsible for identifying and authenticating all
                  Authorized Users, for approving access by such Authorized Users to the SaaS Platform, and for
                  maintaining the confidentiality of usernames, passwords, and account information. The Customer is
                  responsible for all activities that occur under its and its Authorized Users' accounts. The Customer
                  agrees to notify FBO LaunchPad immediately of any unauthorized use of any password or account or any
                  other known or suspected breach of security. FBO LaunchPad is not responsible for any loss or damage
                  arising from Customer's failure to comply with these obligations. The Customer is responsible for
                  ensuring its Authorized Users comply with these Terms and the terms of the Subscription Agreement.
                </p>
              </section>

              <section className="mb-10" id="fees-and-payment">
                <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
                  <FileText className="h-5 w-5 text-primary" />
                  5. Fees and Payment (SaaS Platform)
                </h2>
                <p>
                  Use of the SaaS Platform is subject to the payment of subscription fees as set forth in the Customer's
                  Subscription Agreement or applicable Order Form. The Customer agrees to pay all applicable fees in
                  accordance with the payment terms specified therein. Failure to pay fees when due may result in
                  suspension or termination of access to the SaaS Platform. All fees are non-refundable except as
                  expressly stated in the Subscription Agreement.
                </p>
              </section>

              <section className="mb-10" id="intellectual-property">
                <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
                  <FileText className="h-5 w-5 text-primary" />
                  6. Intellectual Property Rights
                </h2>
                <p>
                  <strong>(a) FBO LaunchPad IP:</strong> FBO LaunchPad owns and retains all right, title, and interest,
                  including all related intellectual property rights, in and to the Website, the SaaS Platform, its
                  underlying technology, software, documentation, content (excluding Customer Data), designs, branding,
                  trade names, logos, and any aggregated, anonymized, or statistical data derived from the operation of
                  the Services (provided such data does not identify Customer or any individual). These Terms do not
                  grant Customer or any User any rights to FBO LaunchPad's intellectual property except for the limited
                  license expressly granted herein or in the Subscription Agreement.
                </p>
                <p>
                  <strong>(b) Customer Data:</strong> As between FBO LaunchPad and Customer, the Customer owns and
                  retains all right, title, and interest in and to the Customer Data. The Customer grants FBO LaunchPad
                  and its necessary service providers a worldwide, non-exclusive, royalty-free license during the
                  subscription term to use, process, store, transmit, display, modify, and reproduce Customer Data
                  solely to the extent necessary to provide, maintain, secure, and improve the Services, provide
                  support, and as otherwise described in our Privacy Policy or permitted by the Customer in writing.
                  Customer represents and warrants that it has all necessary rights, consents, and permissions to
                  collect, share, and use Customer Data as contemplated herein and in compliance with all applicable
                  laws.
                </p>
              </section>

              <section className="mb-10" id="acceptable-use">
                <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
                  <FileText className="h-5 w-5 text-primary" />
                  7. Acceptable Use Policy / Restrictions
                </h2>
                <p>
                  Users agree not to, and not to permit Authorized Users or third parties to, do any of the following:
                </p>
                <ol className="list-decimal pl-6 space-y-2">
                  <li>
                    license, sublicense, sell, resell, rent, lease, transfer, assign, distribute, or otherwise
                    commercially exploit or make the Services available to any third party, other than Authorized Users;
                  </li>
                  <li>modify, copy, or create derivative works based on the Services or any part thereof;</li>
                  <li>
                    reverse engineer, decompile, disassemble, or otherwise attempt to discover the source code, object
                    code, or underlying structure, ideas, or algorithms of the Services;
                  </li>
                  <li>
                    access the Services to build a competitive product or service, or copy any features, functions, or
                    graphics of the Services;
                  </li>
                  <li>
                    use the Services to store or transmit infringing, libelous, or otherwise unlawful or tortious
                    material, or to store or transmit material in violation of third-party privacy or intellectual
                    property rights;
                  </li>
                  <li>
                    use the Services to store or transmit malicious code (e.g., viruses, worms, time bombs, Trojan
                    horses);
                  </li>
                  <li>
                    interfere with or disrupt the integrity or performance of the Services or third-party data contained
                    therein;
                  </li>
                  <li>attempt to gain unauthorized access to the Services or their related systems or networks;</li>
                  <li>conduct security or vulnerability testing without prior written consent;</li>
                  <li>impose an unreasonable or disproportionately large load on FBO LaunchPad's infrastructure; or</li>
                  <li>use the Services in violation of any applicable laws or regulations.</li>
                </ol>
              </section>

              <section className="mb-10" id="third-party-services">
                <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
                  <FileText className="h-5 w-5 text-primary" />
                  8. Third-Party Services & APIs
                </h2>
                <p>
                  The Services may integrate with or provide links to third-party websites, services, or APIs (e.g.,
                  FlightAware, cloud hosting providers). FBO LaunchPad does not control and is not responsible for the
                  availability, accuracy, content, products, or services of such third parties. Use of third-party
                  services may be subject to the terms and privacy policies of those third parties, and Customer agrees
                  to comply with such terms when using integrated features. FBO LaunchPad disclaims all liability
                  arising from your use of any third-party services.
                </p>
              </section>

              <section className="mb-10" id="confidentiality">
                <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
                  <FileText className="h-5 w-5 text-primary" />
                  9. Confidentiality
                </h2>
                <p>
                  "Confidential Information" means any non-public information disclosed by one party ("Discloser") to
                  the other party ("Recipient"), whether orally or in writing, that is designated as confidential or
                  that reasonably should be understood to be confidential given the nature of the information and the
                  circumstances of disclosure. FBO LaunchPad's Confidential Information includes the non-public aspects
                  of the Services and its technology. Customer's Confidential Information includes Customer Data.
                  Confidential Information does not include information that (i) is or becomes generally known to the
                  public without breach of any obligation owed to the Discloser, (ii) was known to the Recipient prior
                  to its disclosure by the Discloser without breach of any obligation owed to the Discloser, (iii) is
                  received from a third party without breach of any obligation owed to the Discloser, or (iv) was
                  independently developed by the Recipient.
                </p>
                <p>
                  The Recipient agrees to: (i) use the same degree of care that it uses to protect the confidentiality
                  of its own confidential information of like kind (but not less than reasonable care), (ii) not use any
                  Confidential Information of the Discloser for any purpose outside the scope of these Terms or the
                  Subscription Agreement, and (iii) except as otherwise authorized by the Discloser in writing, limit
                  access to Confidential Information of the Discloser to those of its and its affiliates' employees and
                  contractors who need that access for purposes consistent with this Agreement and who have signed
                  confidentiality agreements with the Recipient containing protections no less stringent than those
                  herein. The Recipient may disclose Confidential Information if required by law, provided the Recipient
                  gives the Discloser prior notice (to the extent legally permitted) and reasonable assistance, at the
                  Discloser's cost, if the Discloser wishes to contest the disclosure.
                </p>
              </section>

              <section className="mb-10" id="privacy">
                <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
                  <FileText className="h-5 w-5 text-primary" />
                  10. Privacy
                </h2>
                <p>
                  Your privacy is important to us. Our collection, use, and disclosure of Personal Data in connection
                  with the Website and Services are governed by our{" "}
                  <Link href="/privacy" className="text-primary hover:underline">
                    Privacy Policy
                  </Link>
                  , which is available on our Website and incorporated into these Terms by reference. By using the
                  Services, you agree to the terms of the Privacy Policy.
                </p>
              </section>

              <section className="mb-10" id="disclaimers">
                <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
                  <AlertCircle className="h-5 w-5 text-primary" />
                  11. Disclaimers of Warranties
                </h2>
                <p className="uppercase">
                  THE WEBSITE AND THE SERVICES, INCLUDING ALL SERVER AND NETWORK COMPONENTS, ARE PROVIDED ON AN "AS IS"
                  AND "AS AVAILABLE" BASIS, WITHOUT ANY WARRANTIES OF ANY KIND TO THE FULLEST EXTENT PERMITTED BY LAW.
                  FBO LAUNCHPAD EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING, BUT
                  NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, TITLE, FITNESS FOR A PARTICULAR PURPOSE,
                  AND NON-INFRINGEMENT.
                </p>
                <p className="uppercase">
                  FBO LAUNCHPAD DOES NOT WARRANT THAT THE SERVICES WILL BE UNINTERRUPTED, TIMELY, SECURE, ERROR-FREE, OR
                  FREE FROM VIRUSES OR OTHER MALICIOUS CODE, OR THAT ANY DEFECTS WILL BE CORRECTED. FBO LAUNCHPAD DOES
                  NOT WARRANT THE RESULTS THAT MAY BE OBTAINED FROM THE USE OF THE SERVICES OR THE ACCURACY OR
                  RELIABILITY OF ANY INFORMATION OBTAINED THROUGH THE SERVICES. NO INFORMATION OR ADVICE OBTAINED BY YOU
                  FROM FBO LAUNCHPAD OR THROUGH THE SERVICES SHALL CREATE ANY WARRANTY NOT EXPRESSLY STATED IN THESE
                  TERMS.
                </p>
              </section>

              <section className="mb-10" id="limitation-of-liability">
                <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
                  <AlertCircle className="h-5 w-5 text-primary" />
                  12. Limitation of Liability
                </h2>
                <p className="uppercase">
                  TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, IN NO EVENT SHALL FBO LAUNCHPAD, ITS AFFILIATES,
                  DIRECTORS, EMPLOYEES, AGENTS, OR LICENSORS BE LIABLE FOR ANY INDIRECT, PUNITIVE, INCIDENTAL, SPECIAL,
                  CONSEQUENTIAL, OR EXEMPLARY DAMAGES, INCLUDING WITHOUT LIMITATION DAMAGES FOR LOSS OF PROFITS,
                  GOODWILL, USE, DATA, OR OTHER INTANGIBLE LOSSES, ARISING OUT OF OR RELATING TO THE USE OF, OR
                  INABILITY TO USE, THE SERVICES.
                </p>
                <p className="uppercase">
                  TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, IN NO EVENT SHALL FBO LAUNCHPAD'S TOTAL CUMULATIVE
                  LIABILITY ARISING OUT OF OR RELATED TO THESE TERMS OR THE SERVICES EXCEED THE AMOUNT OF FEES ACTUALLY
                  PAID BY THE CUSTOMER TO FBO LAUNCHPAD FOR THE SERVICES DURING THE TWELVE (12) MONTHS PRECEDING THE
                  EVENT GIVING RISE TO THE CLAIM. FOR WEBSITE VISITORS WHERE NO FEES ARE PAID, FBO LAUNCHPAD'S TOTAL
                  LIABILITY SHALL BE LIMITED TO ONE HUNDRED U.S. DOLLARS ($100.00).
                </p>
                <p className="uppercase">
                  THE LIMITATIONS IN THIS SECTION APPLY WHETHER THE ALLEGED LIABILITY IS BASED ON CONTRACT, TORT,
                  NEGLIGENCE, STRICT LIABILITY, OR ANY OTHER BASIS, EVEN IF FBO LAUNCHPAD HAS BEEN ADVISED OF THE
                  POSSIBILITY OF SUCH DAMAGE. THE FOREGOING LIMITATIONS OF LIABILITY SHALL APPLY TO THE FULLEST EXTENT
                  PERMITTED BY LAW IN THE APPLICABLE JURISDICTION.
                </p>
              </section>

              <section className="mb-10" id="indemnification">
                <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
                  <Shield className="h-5 w-5 text-primary" />
                  13. Indemnification
                </h2>
                <p>
                  Customer agrees to defend, indemnify, and hold harmless FBO LaunchPad, its affiliates, licensors, and
                  their respective officers, directors, employees, contractors, and agents from and against any and all
                  claims, damages, obligations, losses, liabilities, costs or debt, and expenses (including but not
                  limited to attorney's fees) arising from: (i) Customer's or its Authorized Users' use of and access to
                  the Services in violation of these Terms or the Subscription Agreement; (ii) Customer's or its
                  Authorized Users' violation of any applicable law or regulation; (iii) Customer's or its Authorized
                  Users' violation of any third-party right, including without limitation any intellectual property or
                  privacy right; or (iv) Customer Data, including any claim that Customer Data caused damage to a third
                  party.
                </p>
              </section>

              <section className="mb-10" id="term-and-termination">
                <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
                  <FileText className="h-5 w-5 text-primary" />
                  14. Term and Termination
                </h2>
                <p>
                  <strong>(a) Website:</strong> These Terms are effective for Website Visitors upon accessing the
                  Website and continue until they cease using the Website.
                </p>
                <p>
                  <strong>(b) SaaS Platform:</strong> For Customers and Authorized Users, these Terms commence upon
                  acceptance (e.g., signing a Subscription Agreement or accessing the platform) and continue for the
                  duration of the active subscription term specified in the Subscription Agreement.
                </p>
                <p>
                  <strong>(c) Termination:</strong> Termination rights and conditions for the SaaS Platform are
                  primarily governed by the Subscription Agreement. Either party may terminate the Subscription
                  Agreement and these Terms for material breach by the other party if such breach is not cured within a
                  specified notice period (as defined in the Subscription Agreement), or immediately if the other party
                  becomes insolvent or subject to bankruptcy proceedings. FBO LaunchPad may suspend or terminate access
                  for non-payment as outlined in the Subscription Agreement.
                </p>
                <p>
                  <strong>(d) Effect of Termination:</strong> Upon termination or expiration of a Subscription
                  Agreement, all rights and licenses granted to the Customer and its Authorized Users will immediately
                  cease. Customer shall cease all use of the SaaS Platform. FBO LaunchPad will make Customer Data
                  available for export or download for a limited period as specified in the Subscription Agreement,
                  after which FBO LaunchPad may delete Customer Data in accordance with its data retention policies and
                  applicable law. Sections governing Confidentiality, Intellectual Property Ownership, Disclaimers,
                  Limitation of Liability, Indemnification, Governing Law, and Miscellaneous shall survive termination.
                </p>
              </section>

              <section className="mb-10" id="governing-law">
                <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
                  <Scale className="h-5 w-5 text-primary" />
                  15. Governing Law and Dispute Resolution
                </h2>
                <p>
                  These Terms shall be governed by and construed in accordance with the laws of the State of Texas, USA,
                  without regard to its conflict of law principles. The parties agree that the United Nations Convention
                  on Contracts for the International Sale of Goods does not apply to these Terms.
                </p>
                <p>
                  Any dispute arising out of or relating to these Terms or the Services shall be subject to the
                  exclusive jurisdiction of the state and federal courts located in Dallas County, Texas, USA, and the
                  parties hereby consent to the personal jurisdiction and venue of these courts.
                </p>
              </section>

              <section className="mb-10" id="changes-to-terms">
                <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
                  <FileText className="h-5 w-5 text-primary" />
                  16. Changes to Terms
                </h2>
                <p>
                  FBO LaunchPad reserves the right, at its sole discretion, to modify or replace these Terms at any
                  time. If a revision is material, we will provide at least 30 days notice prior to any new terms taking
                  effect, which may be provided via email to the Customer's primary contact, by posting on our Website,
                  or through the Services interface. What constitutes a material change will be determined at our sole
                  discretion. By continuing to access or use our Services after those revisions become effective, you
                  agree to be bound by the revised terms. If you do not agree to the new terms, you must stop using the
                  Services.
                </p>
              </section>

              <section className="mb-10" id="miscellaneous">
                <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
                  <FileText className="h-5 w-5 text-primary" />
                  17. Miscellaneous
                </h2>
                <p>
                  <strong>(a) Severability:</strong> If any provision of these Terms is found to be unenforceable or
                  invalid, that provision will be limited or eliminated to the minimum extent necessary so that these
                  Terms will otherwise remain in full force and effect and enforceable.
                </p>
                <p>
                  <strong>(b) Waiver:</strong> The failure of FBO LaunchPad to exercise or enforce any right or
                  provision of these Terms shall not constitute a waiver of such right or provision.
                </p>
                <p>
                  <strong>(c) Entire Agreement:</strong> These Terms, together with the Privacy Policy and any
                  applicable Subscription Agreement (for Customers), constitute the entire agreement between you and FBO
                  LaunchPad regarding the subject matter hereof and supersede all prior or contemporaneous agreements,
                  understandings, or representations, whether written or oral.
                </p>
                <p>
                  <strong>(d) Assignment:</strong> These Terms, and any rights and licenses granted hereunder, may not
                  be transferred or assigned by you (whether by operation of law or otherwise) without FBO LaunchPad's
                  prior written consent, but may be assigned by FBO LaunchPad without restriction. Any attempted
                  assignment in violation hereof shall be null and void.
                </p>
                <p>
                  <strong>(e) Force Majeure:</strong> FBO LaunchPad shall not be liable for any failure to perform its
                  obligations hereunder where such failure results from any cause beyond FBO LaunchPad's reasonable
                  control, including, without limitation, mechanical, electronic or communications failure or
                  degradation, acts of God, war, terrorism, riots, embargoes, acts of civil or military authorities,
                  fire, floods, accidents, pandemics, or strikes.
                </p>
                <p>
                  <strong>(f) Notices:</strong> All notices under these Terms will be in writing. Notices to FBO
                  LaunchPad should be sent to the contact information below. Notices to Customers will be sent to the
                  primary contact email address associated with their account.
                </p>
                <p>
                  <strong>(g) Contact Information:</strong> If you have any questions about these Terms, please contact
                  us at:
                </p>
                <div className="mt-4 p-4 bg-primary/10 rounded-lg">
                  <p>
                    <strong>FBO LaunchPad</strong>
                  </p>
                  <p>Attn: Legal Department</p>
                  <p>Email: legal@fbolaunchpad.com</p>
                </div>
              </section>
            </div>
          </div>
        </div>
      </main>

      <Footer />
    </div>
  )
}

================
File: frontend/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 221.2 83.2% 53.3%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96%;
    --secondary-foreground: 222.2 84% 4.9%;
    --muted: 210 40% 96%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96%;
    --accent-foreground: 222.2 84% 4.9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 221.2 83.2% 53.3%;
    --radius: 0.5rem;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 217.2 91.2% 59.8%;
    --primary-foreground: 222.2 84% 4.9%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 224.3 76.3% 94.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

/* Custom animations and effects */
@keyframes float {
  0%,
  100% {
    transform: translateY(0px);
  }
  50% {
    transform: translateY(-10px);
  }
}

@keyframes pulse-glow {
  0%,
  100% {
    box-shadow: 0 0 20px rgba(59, 130, 246, 0.3);
  }
  50% {
    box-shadow: 0 0 30px rgba(59, 130, 246, 0.5);
  }
}

.float-animation {
  animation: float 3s ease-in-out infinite;
}

.glow-effect {
  animation: pulse-glow 2s ease-in-out infinite;
}

/* Grid pattern for backgrounds */
.bg-grid-pattern {
  background-image: linear-gradient(rgba(0, 0, 0, 0.1) 1px, transparent 1px),
    linear-gradient(90deg, rgba(0, 0, 0, 0.1) 1px, transparent 1px);
  background-size: 20px 20px;
}

.dark .bg-grid-pattern {
  background-image: linear-gradient(rgba(255, 255, 255, 0.1) 1px, transparent 1px),
    linear-gradient(90deg, rgba(255, 255, 255, 0.1) 1px, transparent 1px);
}

/* Enhanced button hover effects */
.demo-btn {
  position: relative;
  overflow: hidden;
  transition: all 0.3s ease;
}

.demo-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
}

.demo-btn.clicked {
  transform: scale(0.95);
  transition: transform 0.1s ease;
}

/* Improved card hover effects */
.hover-lift {
  transition: all 0.3s ease;
}

.hover-lift:hover {
  transform: translateY(-5px);
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
}

/* Better focus states for accessibility */
.focus-visible:focus-visible {
  outline: 2px solid hsl(var(--primary));
  outline-offset: 2px;
}

/* Smooth scrolling */
html {
  scroll-behavior: smooth;
}

/* Loading states */
.loading-shimmer {
  background: linear-gradient(
    90deg,
    hsl(var(--muted)) 25%,
    hsl(var(--muted-foreground) / 0.1) 50%,
    hsl(var(--muted)) 75%
  );
  background-size: 200% 100%;
  animation: shimmer 2s infinite;
}

@keyframes shimmer {
  0% {
    background-position: -200% 0;
  }
  100% {
    background-position: 200% 0;
  }
}

/* Enhanced mobile responsiveness */
@media (max-width: 640px) {
  .container {
    padding-left: 1rem;
    padding-right: 1rem;
  }
}

/* Print styles */
@media print {
  .no-print {
    display: none !important;
  }
}

/* High contrast mode support */
@media (prefers-contrast: high) {
  :root {
    --border: 0 0% 20%;
    --muted: 0 0% 90%;
  }

  .dark {
    --border: 0 0% 80%;
    --muted: 0 0% 10%;
  }
}

/* Reduced motion support */
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

================
File: frontend/app/page.tsx
================
"use client"

import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import {
  AlertCircle,
  Clock,
  Database,
  DollarSign,
  Bell,
  Shield,
  ClipboardList,
  UserPlus,
  Zap,
  CheckCircle2,
  ArrowRight,
  Plane,
  BarChart2,
  Cloud,
  Cpu,
  Wifi,
  Star,
  Users,
  TrendingUp,
  Award,
} from "lucide-react"
import Header from "@/components/header"
import Footer from "@/components/footer"
import { useRouter } from "next/navigation"
import { useEffect, useState, useRef } from "react"

export default function Home() {
  const router = useRouter()
  const [isVisible, setIsVisible] = useState(false)
  const [btnClicked, setBtnClicked] = useState(false)
  const [currentTestimonial, setCurrentTestimonial] = useState(0)
  const demoButtonRef = useRef(null)

  // Scroll to top when page loads
  useEffect(() => {
    window.scrollTo(0, 0)
    setIsVisible(true)
  }, [])

  // Testimonial rotation
  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentTestimonial((prev) => (prev + 1) % testimonials.length)
    }, 5000)
    return () => clearInterval(interval)
  }, [])

  const handleDemoClick = (e) => {
    e.preventDefault()
    setBtnClicked(true)

    // Wait for the animation to complete before navigating
    setTimeout(() => {
      router.push("/request-demo")
      setBtnClicked(false)
    }, 800)
  }

  const testimonials = [
    {
      name: "Sarah Johnson",
      title: "Operations Manager",
      company: "Skyline Aviation",
      content:
        "FBO LaunchPad has revolutionized how we track aircraft ownership. We've reduced billing errors by 95% and improved our customer relationships significantly.",
      rating: 5,
    },
    {
      name: "Mike Rodriguez",
      title: "FBO Director",
      company: "Atlantic Air Services",
      content:
        "The AI-powered monitoring system caught ownership changes we would have missed for weeks. It's like having a dedicated researcher working 24/7.",
      rating: 5,
    },
    {
      name: "Jennifer Chen",
      title: "Customer Service Lead",
      company: "Mountain View FBO",
      content:
        "Our team loves the instant notifications. We can welcome new owners immediately and maintain accurate records effortlessly.",
      rating: 5,
    },
  ]

  const stats = [
    { label: "FBOs Trust Us", value: "500+", icon: Users },
    { label: "Aircraft Monitored", value: "10K+", icon: Plane },
    { label: "Ownership Changes Detected", value: "2.5K+", icon: TrendingUp },
    { label: "Customer Satisfaction", value: "99%", icon: Award },
  ]

  return (
    <div className="flex min-h-screen flex-col bg-background">
      <Header />

      <main className="flex-1">
        {/* Hero Section */}
        <section className="py-20 md:py-28 relative overflow-hidden bg-gradient-to-br from-primary/5 via-background to-accent/5">
          <div className="absolute inset-0 bg-grid-pattern opacity-[0.02] dark:opacity-[0.05]"></div>
          <div className="container px-4 md:px-6 relative">
            <div className="grid gap-6 lg:grid-cols-2 lg:gap-12 items-center">
              <div
                className={`space-y-6 transition-all duration-1000 ${isVisible ? "opacity-100 translate-y-0" : "opacity-0 translate-y-10"}`}
              >
                <h1 className="text-4xl md:text-6xl font-bold tracking-tight text-foreground leading-tight">
                  Real-Time Aircraft <span className="text-primary">Ownership Intelligence</span>
                </h1>
                <p className="text-muted-foreground text-lg md:text-xl leading-relaxed max-w-2xl">
                  Our AI-powered monitoring system provides instant alerts when aircraft change hands, keeping your FBO
                  operations streamlined and error-free.
                </p>
                <div className="flex flex-col sm:flex-row gap-4 pt-4">
                  <Button
                    ref={demoButtonRef}
                    size="lg"
                    className={`bg-primary hover:bg-primary/90 text-primary-foreground shadow-lg hover:shadow-xl transition-all duration-300 ${btnClicked ? "scale-95" : "hover:scale-105"}`}
                    onClick={handleDemoClick}
                  >
                    <Plane className="h-5 w-5 mr-2 rotate-45" />
                    Request a Demo
                    <ArrowRight className="h-4 w-4 ml-2" />
                  </Button>
                  <Button
                    size="lg"
                    variant="outline"
                    className="border-2 hover:bg-primary/5 transition-all duration-300"
                    onClick={() => {
                      document.getElementById("features")?.scrollIntoView({ behavior: "smooth" })
                    }}
                  >
                    <BarChart2 className="h-4 w-4 mr-2" />
                    Explore Features
                  </Button>
                </div>

                {/* Stats Row */}
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 pt-8">
                  {stats.map((stat, index) => (
                    <div key={index} className="text-center">
                      <div className="flex items-center justify-center mb-2">
                        <stat.icon className="h-5 w-5 text-primary" />
                      </div>
                      <div className="text-2xl font-bold text-foreground">{stat.value}</div>
                      <div className="text-sm text-muted-foreground">{stat.label}</div>
                    </div>
                  ))}
                </div>
              </div>
              <div
                className={`mx-auto lg:ml-auto relative transition-all duration-1000 delay-300 ${isVisible ? "opacity-100 translate-y-0" : "opacity-0 translate-y-10"}`}
              >
                <div className="absolute inset-0 bg-primary/10 rounded-2xl blur-3xl"></div>
                <div className="relative bg-card border rounded-2xl p-6 shadow-2xl">
                  <img
                    alt="FBO LaunchPad Aircraft Monitoring Dashboard"
                    className="relative z-10 w-full rounded-xl object-cover"
                    src="/images/aircraft-monitoring.png"
                  />
                  <div className="absolute -bottom-4 -right-4 w-20 h-20 bg-accent/20 rounded-full blur-xl"></div>
                </div>
              </div>
            </div>
          </div>
        </section>

        {/* Problem Section */}
        <section className="py-16 md:py-24 bg-muted/30" id="features">
          <div className="container px-4 md:px-6">
            <div className="flex flex-col items-center justify-center space-y-4 text-center">
              <div className="space-y-4 max-w-3xl">
                <h2 className="text-3xl font-bold tracking-tight md:text-5xl text-foreground">
                  The Hidden Turbulence of Outdated Aircraft Records
                </h2>
                <p className="text-muted-foreground text-lg md:text-xl leading-relaxed">
                  FBOs face significant operational headwinds when aircraft ownership changes fly under the radar.
                </p>
              </div>
            </div>
            <div className="mx-auto grid max-w-6xl grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-3 mt-16">
              <Card className="border-2 hover:border-destructive/50 transition-all duration-300 hover:shadow-lg group">
                <CardContent className="p-8 text-center space-y-4">
                  <div className="rounded-full bg-destructive/10 p-4 w-fit mx-auto group-hover:bg-destructive/20 transition-colors">
                    <AlertCircle className="h-8 w-8 text-destructive" />
                  </div>
                  <h3 className="text-xl font-bold text-foreground">Billing Turbulence</h3>
                  <p className="text-muted-foreground leading-relaxed">
                    Sending invoices to previous owners creates payment delays and collection crosswinds.
                  </p>
                </CardContent>
              </Card>
              <Card className="border-2 hover:border-amber-500/50 transition-all duration-300 hover:shadow-lg group">
                <CardContent className="p-8 text-center space-y-4">
                  <div className="rounded-full bg-amber-100 dark:bg-amber-900/30 p-4 w-fit mx-auto group-hover:bg-amber-200 dark:group-hover:bg-amber-900/50 transition-colors">
                    <Clock className="h-8 w-8 text-amber-600 dark:text-amber-400" />
                  </div>
                  <h3 className="text-xl font-bold text-foreground">Time in Holding Pattern</h3>
                  <p className="text-muted-foreground leading-relaxed">
                    Hours spent manually verifying ownership details that could be on autopilot.
                  </p>
                </CardContent>
              </Card>
              <Card className="border-2 hover:border-blue-500/50 transition-all duration-300 hover:shadow-lg group md:col-span-2 lg:col-span-1">
                <CardContent className="p-8 text-center space-y-4">
                  <div className="rounded-full bg-blue-100 dark:bg-blue-900/30 p-4 w-fit mx-auto group-hover:bg-blue-200 dark:group-hover:bg-blue-900/50 transition-colors">
                    <Shield className="h-8 w-8 text-blue-600 dark:text-blue-400" />
                  </div>
                  <h3 className="text-xl font-bold text-foreground">Security Vulnerabilities</h3>
                  <p className="text-muted-foreground leading-relaxed">
                    Not knowing the current responsible party creates potential security breaches in your airspace.
                  </p>
                </CardContent>
              </Card>
            </div>
          </div>
        </section>

        {/* Solution Section */}
        <section className="py-16 md:py-24 bg-gradient-to-br from-primary/5 to-accent/5">
          <div className="container px-4 md:px-6">
            <div className="grid gap-12 lg:grid-cols-2 items-center">
              <div className="space-y-6">
                <h2 className="text-3xl font-bold tracking-tight md:text-5xl text-foreground">
                  Introducing FBO LaunchPad
                </h2>
                <p className="text-muted-foreground text-lg leading-relaxed">
                  Your AI-powered ownership radar that continuously monitors official aircraft registration data with
                  machine learning precision.
                </p>
                <ul className="space-y-4">
                  <li className="flex items-start gap-3">
                    <CheckCircle2 className="h-6 w-6 text-primary mt-0.5 flex-shrink-0" />
                    <span className="text-foreground leading-relaxed">
                      Receive instant alerts when ownership changes are detected by our neural network
                    </span>
                  </li>
                  <li className="flex items-start gap-3">
                    <CheckCircle2 className="h-6 w-6 text-primary mt-0.5 flex-shrink-0" />
                    <span className="text-foreground leading-relaxed">
                      Get accurate, up-to-date information delivered directly to your dashboard
                    </span>
                  </li>
                  <li className="flex items-start gap-3">
                    <CheckCircle2 className="h-6 w-6 text-primary mt-0.5 flex-shrink-0" />
                    <span className="text-foreground leading-relaxed">
                      Track all aircraft in your airspace with automated monitoring
                    </span>
                  </li>
                </ul>
              </div>
              <div className="mx-auto lg:ml-auto">
                <div className="grid grid-cols-3 gap-6 items-center">
                  <div className="flex flex-col items-center space-y-4">
                    <div className="rounded-full bg-primary/10 p-6 border-2 border-primary/20 hover:border-primary/40 transition-colors">
                      <Database className="h-8 w-8 text-primary" />
                    </div>
                    <p className="text-sm font-medium text-center text-foreground">AI Monitoring</p>
                  </div>
                  <ArrowRight className="h-6 w-6 text-muted-foreground justify-self-center" />
                  <div className="flex flex-col items-center space-y-4">
                    <div className="rounded-full bg-primary/10 p-6 border-2 border-primary/20 hover:border-primary/40 transition-colors">
                      <Cpu className="h-8 w-8 text-primary" />
                    </div>
                    <p className="text-sm font-medium text-center text-foreground">ML Processing</p>
                  </div>
                  <div className="col-span-3 flex justify-center">
                    <ArrowRight className="h-6 w-6 text-muted-foreground rotate-90" />
                  </div>
                  <div className="col-span-3 flex justify-center">
                    <div className="flex flex-col items-center space-y-4">
                      <div className="rounded-full bg-primary/10 p-6 border-2 border-primary/20 hover:border-primary/40 transition-colors">
                        <Bell className="h-8 w-8 text-primary" />
                      </div>
                      <p className="text-sm font-medium text-center text-foreground">Smart Alerts</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        {/* Benefits Section */}
        <section className="py-16 md:py-24 bg-background" id="benefits">
          <div className="container px-4 md:px-6">
            <div className="flex flex-col items-center justify-center space-y-4 text-center mb-16">
              <div className="space-y-4">
                <div className="inline-flex items-center px-4 py-2 rounded-full text-sm font-medium bg-accent/10 text-accent border border-accent/20">
                  <BarChart2 className="h-4 w-4 mr-2" />
                  <span>Benefits</span>
                </div>
                <h2 className="text-3xl font-bold tracking-tight md:text-5xl text-foreground">
                  Why FBOs Choose FBO LaunchPad
                </h2>
                <p className="max-w-3xl text-muted-foreground text-lg md:text-xl leading-relaxed">
                  Our solution delivers tangible operational improvements for Fixed Base Operators of all sizes.
                </p>
              </div>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-16 items-center mb-16">
              <div className="relative">
                <div className="absolute -inset-4 bg-gradient-to-r from-primary/20 to-accent/20 rounded-2xl blur-xl"></div>
                <div className="relative bg-card border rounded-2xl p-2 shadow-xl">
                  <img
                    src="/images/aircraft-data-flow.png"
                    alt="Aircraft data flow visualization"
                    className="rounded-xl w-full"
                  />
                </div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                {[
                  {
                    icon: Clock,
                    title: "Save Flight Time",
                    description: "Reduce manual lookups and administrative overhead with AI-powered monitoring.",
                    color: "primary",
                  },
                  {
                    icon: DollarSign,
                    title: "Clear Financial Skies",
                    description:
                      "Invoice the correct owner the first time, improving cash flow and customer satisfaction.",
                    color: "green",
                  },
                  {
                    icon: Shield,
                    title: "Enhanced Security",
                    description:
                      "Always know the current responsible party for based aircraft, improving facility security.",
                    color: "blue",
                  },
                  {
                    icon: ClipboardList,
                    title: "Accurate Flight Logs",
                    description: "Keep your hangar manifests and client lists effortlessly up-to-date.",
                    color: "purple",
                  },
                ].map((benefit, index) => (
                  <Card
                    key={index}
                    className="border-2 hover:border-primary/50 transition-all duration-300 hover:shadow-lg group"
                  >
                    <CardContent className="p-6 space-y-4">
                      <div
                        className={`rounded-full bg-${benefit.color === "primary" ? "primary" : benefit.color === "green" ? "green-100 dark:bg-green-900/30" : benefit.color === "blue" ? "blue-100 dark:bg-blue-900/30" : "purple-100 dark:bg-purple-900/30"} p-3 w-fit group-hover:scale-110 transition-transform`}
                      >
                        <benefit.icon
                          className={`h-6 w-6 ${benefit.color === "primary" ? "text-primary-foreground" : benefit.color === "green" ? "text-green-600 dark:text-green-400" : benefit.color === "blue" ? "text-blue-600 dark:text-blue-400" : "text-purple-600 dark:text-purple-400"}`}
                        />
                      </div>
                      <h3 className="text-xl font-bold text-foreground">{benefit.title}</h3>
                      <p className="text-muted-foreground leading-relaxed">{benefit.description}</p>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              <Card className="border-2 hover:border-primary/50 transition-all duration-300 hover:shadow-lg group">
                <CardContent className="p-8 space-y-4">
                  <div className="rounded-full bg-primary/10 p-4 w-fit group-hover:scale-110 transition-transform">
                    <UserPlus className="h-8 w-8 text-primary" />
                  </div>
                  <h3 className="text-xl font-bold text-foreground">Smooth Onboarding</h3>
                  <p className="text-muted-foreground leading-relaxed">
                    Be the first to welcome new aircraft owners to your FBO and establish relationships.
                  </p>
                </CardContent>
              </Card>
              <Card className="border-2 hover:border-primary/50 transition-all duration-300 hover:shadow-lg group">
                <CardContent className="p-8 space-y-4">
                  <div className="rounded-full bg-primary/10 p-4 w-fit group-hover:scale-110 transition-transform">
                    <Zap className="h-8 w-8 text-primary" />
                  </div>
                  <h3 className="text-xl font-bold text-foreground">Reduce Turbulence</h3>
                  <p className="text-muted-foreground leading-relaxed">
                    Smooth out processes related to billing, fuel accounts, and communication.
                  </p>
                </CardContent>
              </Card>
            </div>
          </div>
        </section>

        {/* Testimonials Section */}
        <section className="py-16 md:py-24 bg-muted/30">
          <div className="container px-4 md:px-6">
            <div className="flex flex-col items-center justify-center space-y-4 text-center mb-16">
              <div className="space-y-4">
                <h2 className="text-3xl font-bold tracking-tight md:text-5xl text-foreground">
                  Trusted by FBO Professionals
                </h2>
                <p className="max-w-3xl text-muted-foreground text-lg leading-relaxed">
                  See what industry leaders are saying about FBO LaunchPad.
                </p>
              </div>
            </div>

            <div className="max-w-4xl mx-auto">
              <Card className="border-2 shadow-xl">
                <CardContent className="p-8 md:p-12 text-center space-y-6">
                  <div className="flex justify-center space-x-1 mb-4">
                    {[...Array(testimonials[currentTestimonial].rating)].map((_, i) => (
                      <Star key={i} className="h-5 w-5 fill-yellow-400 text-yellow-400" />
                    ))}
                  </div>
                  <blockquote className="text-xl md:text-2xl font-medium text-foreground leading-relaxed">
                    "{testimonials[currentTestimonial].content}"
                  </blockquote>
                  <div className="space-y-2">
                    <div className="font-semibold text-foreground text-lg">{testimonials[currentTestimonial].name}</div>
                    <div className="text-muted-foreground">
                      {testimonials[currentTestimonial].title} at {testimonials[currentTestimonial].company}
                    </div>
                  </div>
                </CardContent>
              </Card>

              <div className="flex justify-center space-x-2 mt-8">
                {testimonials.map((_, index) => (
                  <button
                    key={index}
                    className={`w-3 h-3 rounded-full transition-all duration-300 ${
                      index === currentTestimonial ? "bg-primary" : "bg-muted-foreground/30"
                    }`}
                    onClick={() => setCurrentTestimonial(index)}
                  />
                ))}
              </div>
            </div>
          </div>
        </section>

        {/* How It Works Section */}
        <section className="py-16 md:py-24 bg-gradient-to-br from-primary/5 to-accent/5" id="how-it-works">
          <div className="container px-4 md:px-6">
            <div className="flex flex-col items-center justify-center space-y-4 text-center mb-16">
              <div className="space-y-4">
                <h2 className="text-3xl font-bold tracking-tight md:text-5xl text-foreground">
                  Simple Setup, Powerful Results
                </h2>
                <p className="max-w-3xl text-muted-foreground text-lg md:text-xl leading-relaxed">
                  Get started in minutes and let FBO LaunchPad's AI do the heavy lifting.
                </p>
              </div>
            </div>

            <div className="max-w-6xl mx-auto space-y-16">
              {[
                {
                  step: "1",
                  title: "Aircraft Registration",
                  description:
                    "Simply enter the tail numbers of aircraft you want to monitor. Our AI system will track these aircraft and alert you to any ownership changes in real-time.",
                  image: "/images/aircraft-verification.png",
                  alt: "FBO staff verifying aircraft information",
                },
                {
                  step: "2",
                  title: "Neural Network Monitoring",
                  description:
                    "Our AI system securely monitors relevant ownership databases 24/7, using machine learning to detect any changes to the registration or ownership status of your tracked aircraft.",
                  image: "/images/automated-monitoring.png",
                  alt: "Automated aircraft monitoring system",
                },
                {
                  step: "3",
                  title: "Real-Time Notifications",
                  description:
                    "Receive automatic alerts upon detected changes via email and dashboard. Our cloud-based system keeps you informed about ownership changes as they happen, allowing you to update your records immediately.",
                  image: "/images/instant-notifications.png",
                  alt: "Verification notifications on tablet",
                },
              ].map((item, index) => (
                <div
                  key={index}
                  className={`grid grid-cols-1 md:grid-cols-2 gap-12 items-center ${index % 2 === 1 ? "md:flex-row-reverse" : ""}`}
                >
                  <div className={index % 2 === 1 ? "md:order-2" : ""}>
                    <div className="flex items-center gap-4 mb-6">
                      <div className="flex h-12 w-12 items-center justify-center rounded-full bg-primary text-primary-foreground text-xl font-bold shadow-lg">
                        {item.step}
                      </div>
                      <h3 className="text-2xl font-bold text-foreground">{item.title}</h3>
                    </div>
                    <p className="text-muted-foreground text-lg leading-relaxed">{item.description}</p>
                  </div>
                  <div className={`relative ${index % 2 === 1 ? "md:order-1" : ""}`}>
                    <div className="absolute -inset-4 bg-gradient-to-r from-primary/20 to-accent/20 rounded-2xl blur-xl"></div>
                    <div className="relative bg-card border rounded-2xl p-4 shadow-xl">
                      <img src={item.image || "/placeholder.svg"} alt={item.alt} className="rounded-xl w-full" />
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </section>

        {/* Tech Features Section */}
        <section className="py-16 md:py-24 bg-background">
          <div className="container px-4 md:px-6">
            <div className="flex flex-col items-center justify-center space-y-4 text-center mb-16">
              <div className="space-y-4">
                <h2 className="text-3xl font-bold tracking-tight md:text-5xl text-foreground">
                  Powered by Advanced Aviation Tech
                </h2>
                <p className="max-w-3xl text-muted-foreground text-lg md:text-xl leading-relaxed">
                  Our platform leverages cutting-edge technology to deliver unparalleled accuracy and reliability.
                </p>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
              {[
                {
                  icon: Cpu,
                  title: "AI-Powered Analysis",
                  description:
                    "Our neural networks continuously learn and improve, providing increasingly accurate ownership detection.",
                },
                {
                  icon: Cloud,
                  title: "Cloud Infrastructure",
                  description:
                    "Secure, scalable cloud architecture ensures 99.9% uptime and real-time data processing.",
                },
                {
                  icon: Wifi,
                  title: "API Integrations",
                  description: "Seamlessly connect with your existing FBO management software through our robust API.",
                },
              ].map((feature, index) => (
                <Card
                  key={index}
                  className="border-2 hover:border-primary/50 transition-all duration-300 hover:shadow-lg group"
                >
                  <CardContent className="p-8 text-center space-y-4">
                    <div className="rounded-full bg-primary/10 p-4 w-fit mx-auto group-hover:scale-110 transition-transform">
                      <feature.icon className="h-8 w-8 text-primary" />
                    </div>
                    <h3 className="text-xl font-bold text-foreground">{feature.title}</h3>
                    <p className="text-muted-foreground leading-relaxed">{feature.description}</p>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        </section>

        {/* CTA Section */}
        <section className="py-16 md:py-24 bg-gradient-to-br from-primary/10 to-accent/10">
          <div className="container px-4 md:px-6">
            <div className="flex flex-col items-center justify-center space-y-8 text-center max-w-4xl mx-auto">
              <div className="space-y-4">
                <h2 className="text-3xl font-bold tracking-tight md:text-5xl text-foreground">Ready for Takeoff?</h2>
                <p className="text-muted-foreground text-lg md:text-xl leading-relaxed">
                  Join hundreds of FBOs already using FBO LaunchPad to streamline their operations and improve customer
                  relationships.
                </p>
              </div>
              <div className="flex flex-col sm:flex-row gap-4">
                <Button
                  size="lg"
                  className={`bg-primary hover:bg-primary/90 text-primary-foreground shadow-lg hover:shadow-xl transition-all duration-300 ${btnClicked ? "scale-95" : "hover:scale-105"}`}
                  onClick={handleDemoClick}
                >
                  <Plane className="h-5 w-5 mr-2 rotate-45" />
                  Get Started Today
                  <ArrowRight className="h-4 w-4 ml-2" />
                </Button>
                <Button
                  size="lg"
                  variant="outline"
                  className="border-2 hover:bg-primary/5 transition-all duration-300"
                  onClick={() => {
                    document.getElementById("features")?.scrollIntoView({ behavior: "smooth" })
                  }}
                >
                  Learn More
                </Button>
              </div>
              <div className="text-sm text-muted-foreground">No setup fees • 30-day free trial • Cancel anytime</div>
            </div>
          </div>
        </section>
      </main>

      <Footer />
    </div>
  )
}

================
File: frontend/components/dashboard/activity-card.tsx
================
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Button } from "@/components/ui/button"
import { cn } from "@/lib/utils"

export interface Activity {
  id: string | number
  user: {
    name: string
    avatar?: string
    email?: string
  }
  action: string
  target?: string
  timestamp: string | Date
  project?: string
}

interface ActivityCardProps {
  title: string
  description?: string
  activities: Activity[]
  className?: string
  limit?: number
}

export function ActivityCard({ title, description, activities, className, limit = 5 }: ActivityCardProps) {
  // Format timestamp
  const formatTimestamp = (timestamp: string | Date) => {
    const date = new Date(timestamp)
    const now = new Date()
    const diffMs = now.getTime() - date.getTime()
    const diffMins = Math.round(diffMs / 60000)
    const diffHours = Math.round(diffMs / 3600000)

    if (diffMins < 60) {
      return `${diffMins} min${diffMins !== 1 ? "s" : ""} ago`
    } else if (diffHours < 24) {
      return `${diffHours} hour${diffHours !== 1 ? "s" : ""} ago`
    } else {
      return date.toLocaleDateString("en-US", {
        month: "short",
        day: "numeric",
      })
    }
  }

  return (
    <Card className={cn("border-0 shadow-sm", className)}>
      <CardHeader>
        <CardTitle>{title}</CardTitle>
        {description && <p className="text-sm text-gray-500">{description}</p>}
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {activities.slice(0, limit).map((activity) => (
            <div key={activity.id} className="flex gap-4">
              <Avatar className="h-9 w-9">
                <AvatarImage src={activity.user.avatar || "/placeholder.svg"} alt={activity.user.name} />
                <AvatarFallback>{activity.user.name.charAt(0)}</AvatarFallback>
              </Avatar>
              <div className="flex-1 space-y-1">
                <p className="text-sm">
                  <span className="font-medium">{activity.user.name}</span> {activity.action}{" "}
                  <span className="text-blue-600 hover:underline cursor-pointer">{activity.target}</span>
                </p>
                <div className="flex items-center text-xs text-gray-500">
                  <span>{formatTimestamp(activity.timestamp)}</span>
                  {activity.project && (
                    <>
                      <span className="mx-1">•</span>
                      <span>{activity.project}</span>
                    </>
                  )}
                </div>
              </div>
            </div>
          ))}
          {activities.length === 0 && (
            <div className="py-8 text-center text-gray-500">
              <p>No recent activity</p>
            </div>
          )}
        </div>
        {activities.length > limit && (
          <div className="mt-4 pt-4 border-t">
            <div className="flex justify-center">
              <Button variant="ghost" size="sm" className="text-blue-600 hover:text-blue-700 hover:bg-blue-50">
                View all activity
              </Button>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  )
}

================
File: frontend/components/dashboard/data-table.tsx
================
"use client"

import { useState } from "react"
import {
  type ColumnDef,
  flexRender,
  getCoreRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  type SortingState,
  useReactTable,
  type ColumnFiltersState,
  getFilteredRowModel,
} from "@tanstack/react-table"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { ChevronLeft, ChevronRight, Search, SlidersHorizontal } from "lucide-react"

interface DataTableProps<TData, TValue> {
  columns: ColumnDef<TData, TValue>[]
  data: TData[]
  searchColumn?: string
  filterableColumns?: {
    id: string
    title: string
    options: { label: string; value: string }[]
  }[]
}

export function DataTable<TData, TValue>({
  columns,
  data,
  searchColumn,
  filterableColumns,
}: DataTableProps<TData, TValue>) {
  const [sorting, setSorting] = useState<SortingState>([])
  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([])
  const [globalFilter, setGlobalFilter] = useState("")

  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    onSortingChange: setSorting,
    getSortedRowModel: getSortedRowModel(),
    onColumnFiltersChange: setColumnFilters,
    getFilteredRowModel: getFilteredRowModel(),
    onGlobalFilterChange: setGlobalFilter,
    state: {
      sorting,
      columnFilters,
      globalFilter,
    },
  })

  return (
    <div className="space-y-4">
      <div className="flex flex-col sm:flex-row gap-3 items-center justify-between">
        {searchColumn && (
          <div className="relative flex-1 max-w-sm">
            <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
            <Input
              placeholder="Search..."
              value={globalFilter}
              onChange={(e) => setGlobalFilter(e.target.value)}
              className="pl-10"
            />
          </div>
        )}
        {filterableColumns && filterableColumns.length > 0 && (
          <div className="flex items-center gap-2">
            <SlidersHorizontal className="h-4 w-4 text-muted-foreground" />
            {filterableColumns.map((column) => (
              <Select
                key={column.id}
                value={(table.getColumn(column.id)?.getFilterValue() as string) ?? ""}
                onValueChange={(value) => {
                  table.getColumn(column.id)?.setFilterValue(value)
                }}
              >
                <SelectTrigger className="h-9 w-[180px]">
                  <SelectValue placeholder={column.title} />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All {column.title}</SelectItem>
                  {column.options.map((option) => (
                    <SelectItem key={option.value} value={option.value}>
                      {option.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            ))}
          </div>
        )}
      </div>
      <div className="rounded-md border">
        <Table>
          <TableHeader>
            {table.getHeaderGroups().map((headerGroup) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => (
                  <TableHead key={header.id}>
                    {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}
                  </TableHead>
                ))}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {table.getRowModel().rows?.length ? (
              table.getRowModel().rows.map((row) => (
                <TableRow key={row.id} data-state={row.getIsSelected() && "selected"}>
                  {row.getVisibleCells().map((cell) => (
                    <TableCell key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</TableCell>
                  ))}
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={columns.length} className="h-24 text-center">
                  No results.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>
      <div className="flex items-center justify-between">
        <div className="text-sm text-muted-foreground">
          Showing {table.getState().pagination.pageIndex * table.getState().pagination.pageSize + 1} to{" "}
          {Math.min(
            (table.getState().pagination.pageIndex + 1) * table.getState().pagination.pageSize,
            table.getFilteredRowModel().rows.length,
          )}{" "}
          of {table.getFilteredRowModel().rows.length} entries
        </div>
        <div className="flex items-center space-x-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => table.previousPage()}
            disabled={!table.getCanPreviousPage()}
          >
            <ChevronLeft className="h-4 w-4" />
            <span className="sr-only">Previous page</span>
          </Button>
          <Button variant="outline" size="sm" onClick={() => table.nextPage()} disabled={!table.getCanNextPage()}>
            <ChevronRight className="h-4 w-4" />
            <span className="sr-only">Next page</span>
          </Button>
        </div>
      </div>
    </div>
  )
}

================
File: frontend/components/dashboard/stat-card.tsx
================
import type React from "react"
import { cn } from "@/lib/utils"
import { Card, CardContent } from "@/components/ui/card"
import { cva, type VariantProps } from "class-variance-authority"

const statCardVariants = cva("", {
  variants: {
    variant: {
      default: "bg-gray-50 border-0 shadow-sm",
      primary: "bg-blue-50 border-0 shadow-sm",
      success: "bg-green-50 border-0 shadow-sm",
      warning: "bg-amber-50 border-0 shadow-sm",
      danger: "bg-red-50 border-0 shadow-sm",
    },
  },
  defaultVariants: {
    variant: "default",
  },
})

interface StatCardProps extends VariantProps<typeof statCardVariants> {
  title: string
  value: string | number
  icon?: React.ReactNode
  trend?: {
    value: string
    isUpward: boolean
  }
  className?: string
  children?: React.ReactNode
}

export function StatCard({ title, value, icon, trend, variant, className, children }: StatCardProps) {
  return (
    <Card className={cn(statCardVariants({ variant }), className)}>
      <CardContent className="p-6">
        <div className="flex items-start justify-between">
          <div className="rounded-full bg-gray-200 p-2">{icon}</div>
          {trend && (
            <div className={cn("text-xs font-medium", trend.isUpward ? "text-green-600" : "text-red-600")}>
              {trend.value}
            </div>
          )}
        </div>
        <div className="mt-4">
          <h3 className="text-sm font-medium text-gray-500">{title}</h3>
          <div className="mt-1 flex items-baseline">
            <p className="text-3xl font-semibold">{value}</p>
          </div>
        </div>
        {children}
      </CardContent>
    </Card>
  )
}

================
File: frontend/components/layout/app-layout.tsx
================
"use client"

import type React from "react"

import { useState, useEffect } from "react"
import { useTheme } from "next-themes"
import Sidebar from "@/components/layout/sidebar"
import Header from "@/components/layout/header"
import { cn } from "@/lib/utils"

interface AppLayoutProps {
  children: React.ReactNode
}

export default function AppLayout({ children }: AppLayoutProps) {
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false)
  const [mounted, setMounted] = useState(false)
  const { theme } = useTheme()

  useEffect(() => {
    setMounted(true)
  }, [])

  if (!mounted) {
    return null
  }

  return (
    <div className="min-h-screen bg-gray-100 dark:bg-gray-900">
      <Sidebar collapsed={sidebarCollapsed} setCollapsed={setSidebarCollapsed} />
      <div
        className={cn("transition-all duration-300 ease-in-out", sidebarCollapsed ? "lg:pl-[80px]" : "lg:pl-[280px]")}
      >
        <Header sidebarCollapsed={sidebarCollapsed} setSidebarCollapsed={setSidebarCollapsed} />
        <main className="p-4 md:p-6 lg:p-8">
          <div className="mx-auto max-w-7xl">{children}</div>
        </main>
      </div>
    </div>
  )
}

================
File: frontend/components/layout/app-sidebar.tsx
================
"use client"

import { useState, useEffect } from "react"
import Link from "next/link"
import { usePathname, useRouter } from "next/navigation"
import {
  Plane,
  ChevronLeft,
  ChevronRight,
  Home,
  FileText,
  Receipt,
  BarChart3,
  Settings,
  LogOut,
  Users,
  Shield,
  Truck,
  UserCheck,
  Sun,
  Moon,
  Droplet,
  CheckCircle,
} from "lucide-react"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Tooltip, TooltipContent, TooltipTrigger, TooltipProvider } from "@/components/ui/tooltip"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Badge } from "@/components/ui/badge"
import { useTheme } from "next-themes"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { usePermissions } from "@/hooks/usePermissions"

interface NavItem {
  title: string
  href: string
  icon: React.ReactNode
  permissions: string[]
  description?: string
}

interface AppSidebarProps {
  collapsed: boolean
  setCollapsed: (collapsed: boolean) => void
  userRole?: "csr" | "admin" | "member" | "fueler" // Keep for backward compatibility
}

export default function AppSidebar({ collapsed, setCollapsed, userRole = "csr" }: AppSidebarProps) {
  const pathname = usePathname()
  const router = useRouter()
  const { theme, setTheme } = useTheme()
  const [user, setUser] = useState<any>(null)
  const [mounted, setMounted] = useState(false)
  
  const { 
    user: permissionUser, 
    can, 
    canAny, 
    isAdmin, 
    isCSR, 
    isFueler, 
    isMember,
    loading: permissionsLoading 
  } = usePermissions()

  useEffect(() => {
    setMounted(true)

    // Get user from localStorage (fallback)
    const userData = localStorage.getItem("fboUser")
    if (userData) {
      setUser(JSON.parse(userData))
    }
  }, [])

  // Handle logout
  const handleLogout = () => {
    if (typeof window !== 'undefined') {
      localStorage.removeItem("fboUser")
    }
    router.push("/login")
  }

  // All possible navigation items with their required permissions - Updated to use backend permissions
  const allNavItems: NavItem[] = [
    // Admin Navigation
    {
      title: "Admin Dashboard",
      href: "/admin/dashboard",
      icon: <Home className="h-5 w-5" />,
      permissions: ['ACCESS_ADMIN_DASHBOARD'],
      description: "Admin overview and system management"
    },
    {
      title: "User Management",
      href: "/admin/users",
      icon: <Users className="h-5 w-5" />,
      permissions: ['MANAGE_USERS', 'VIEW_USERS'],
      description: "Manage system users and their access"
    },
    {
      title: "Permissions",
      href: "/admin/permissions",
      icon: <Shield className="h-5 w-5" />,
      permissions: ['MANAGE_ROLES', 'VIEW_PERMISSIONS'],
      description: "Configure user permissions and roles"
    },
    {
      title: "Fuel Trucks",
      href: "/admin/fuel-trucks",
      icon: <Truck className="h-5 w-5" />,
      permissions: ['MANAGE_FUEL_TRUCKS', 'VIEW_FUEL_TRUCKS'],
      description: "Manage fuel truck fleet"
    },
    {
      title: "LST Management",
      href: "/admin/lst-management",
      icon: <UserCheck className="h-5 w-5" />,
      permissions: ['MANAGE_USERS', 'VIEW_USERS'],
      description: "Manage Line Service Technicians"
    },
    {
      title: "Customer Management",
      href: "/admin/customers",
      icon: <Users className="h-5 w-5" />,
      permissions: ['MANAGE_CUSTOMERS', 'VIEW_CUSTOMERS'],
      description: "Manage customer accounts"
    },

    // CSR Navigation
    {
      title: "CSR Dashboard",
      href: "/csr/dashboard",
      icon: <Home className="h-5 w-5" />,
      permissions: ['ACCESS_CSR_DASHBOARD'],
      description: "Customer service overview"
    },
    {
      title: "Fuel Orders",
      href: "/csr/fuel-orders",
      icon: <FileText className="h-5 w-5" />,
      permissions: ['VIEW_ALL_ORDERS', 'CREATE_ORDER', 'EDIT_FUEL_ORDER'],
      description: "Manage fuel orders and requests"
    },
    {
      title: "Receipts",
      href: "/csr/receipts",
      icon: <Receipt className="h-5 w-5" />,
      permissions: ['VIEW_ALL_RECEIPTS', 'MANAGE_RECEIPTS'],
      description: "View and manage transaction receipts"
    },
    {
      title: "Export Data",
      href: "/csr/export",
      icon: <BarChart3 className="h-5 w-5" />,
      permissions: ['EXPORT_ORDERS_CSV', 'VIEW_ORDER_STATS'],
      description: "Export data and generate reports"
    },

    // Fueler Navigation
    {
      title: "Fueler Dashboard",
      href: "/fueler/dashboard",
      icon: <Home className="h-5 w-5" />,
      permissions: ['ACCESS_FUELER_DASHBOARD'],
      description: "Fueling operations overview"
    },
    {
      title: "Pending Orders",
      href: "/fueler/pending-orders",
      icon: <Droplet className="h-5 w-5" />,
      permissions: ['VIEW_ASSIGNED_ORDERS', 'PERFORM_FUELING_TASK'],
      description: "Orders waiting to be fulfilled"
    },
    {
      title: "In Progress",
      href: "/fueler/in-progress",
      icon: <Truck className="h-5 w-5" />,
      permissions: ['VIEW_ASSIGNED_ORDERS', 'PERFORM_FUELING_TASK'],
      description: "Currently active fueling operations"
    },
    {
      title: "Completed Orders",
      href: "/fueler/completed",
      icon: <CheckCircle className="h-5 w-5" />,
      permissions: ['VIEW_ASSIGNED_ORDERS', 'COMPLETE_OWN_ORDER'],
      description: "Completed fueling operations"
    },

    // Member Navigation
    {
      title: "Member Dashboard",
      href: "/member/dashboard",
      icon: <Home className="h-5 w-5" />,
      permissions: ['ACCESS_MEMBER_DASHBOARD'],
      description: "Personal account overview"
    },
  ]

  // Filter navigation items based on user permissions
  const getAccessibleNavItems = (): NavItem[] => {
    if (permissionsLoading) {
      return [] // Show no items while loading
    }

    return allNavItems.filter(item => 
      canAny(item.permissions)
    )
  }

  // Utility navigation items (always shown if user has basic access)
  const getUtilityNavItems = (): NavItem[] => {
    const utilityItems: NavItem[] = []

    // Settings - shown to all authenticated users
    if (permissionUser?.isLoggedIn) {
      // Determine the appropriate settings path based on user's primary role
      let settingsPath = "/member/settings"
      if (isAdmin) {
        settingsPath = "/admin/settings"
      } else if (isCSR) {
        settingsPath = "/csr/settings" 
      } else if (isFueler) {
        settingsPath = "/fueler/settings"
      }

      utilityItems.push({
        title: "Settings",
        href: settingsPath,
        icon: <Settings className="h-5 w-5" />,
        permissions: [], // Always accessible to authenticated users
        description: "Account and application settings"
      })
    }

    return utilityItems
  }

  const isActive = (href: string) => {
    return pathname === href || pathname.startsWith(`${href}/`)
  }

  const getUserRoleLabel = () => {
    if (!permissionUser) return "Guest"
    
    // Determine primary role based on permissions
    if (isAdmin) return "Admin"
    if (isCSR) return "CSR" 
    if (isFueler) return "Fueler"
    if (isMember) return "Member"
    
    return "User"
  }

  const getDefaultDashboard = () => {
    if (isAdmin) return "/admin/dashboard"
    if (isCSR) return "/csr/dashboard"
    if (isFueler) return "/fueler/dashboard"
    if (isMember) return "/member/dashboard"
    return "/login"
  }

  const accessibleNavItems = getAccessibleNavItems()
  const utilityNavItems = getUtilityNavItems()

  return (
    <TooltipProvider delayDuration={0}>
      <aside
        className={cn(
          "fixed inset-y-0 left-0 z-50 flex flex-col border-r bg-white dark:bg-gray-900 transition-all duration-300 ease-in-out",
          collapsed ? "w-[80px]" : "w-[280px]",
        )}
      >
        {/* Sidebar Header with Logo */}
        <div className="flex h-16 items-center justify-between border-b px-4">
          <Link href={getDefaultDashboard()} className="flex items-center gap-2">
            <Plane className="h-6 w-6 text-primary rotate-45" />
            {!collapsed && <span className="text-xl font-bold">FBO LaunchPad</span>}
          </Link>
          <Button variant="ghost" size="icon" onClick={() => setCollapsed(!collapsed)} className="h-8 w-8 rounded-full">
            {collapsed ? <ChevronRight className="h-4 w-4" /> : <ChevronLeft className="h-4 w-4" />}
          </Button>
        </div>

        {/* Sidebar Content */}
        <div className="flex-1 overflow-y-auto py-6">
          <nav className="flex flex-col gap-1 px-2">
            {/* Main Navigation */}
            {accessibleNavItems.length > 0 && (
              <div className="mb-6">
                {!collapsed && (
                  <div className="mb-3 px-4">
                    <h3 className="text-xs font-medium uppercase text-muted-foreground tracking-wider">Main Menu</h3>
                  </div>
                )}
                {accessibleNavItems.map((item) => (
                  <Tooltip key={item.href} delayDuration={0}>
                    <TooltipTrigger asChild>
                      <Link
                        href={item.href}
                        className={cn(
                          "flex items-center gap-3 rounded-lg px-3 py-2.5 text-sm font-medium transition-all duration-200",
                          isActive(item.href)
                            ? "bg-primary/10 text-primary shadow-sm"
                            : "text-foreground hover:bg-muted hover:text-foreground",
                        )}
                      >
                        {item.icon}
                        {!collapsed && <span>{item.title}</span>}
                      </Link>
                    </TooltipTrigger>
                    {collapsed && (
                      <TooltipContent side="right">
                        <div>
                          <div className="font-medium">{item.title}</div>
                          {item.description && (
                            <div className="text-xs text-muted-foreground mt-1">{item.description}</div>
                          )}
                        </div>
                      </TooltipContent>
                    )}
                  </Tooltip>
                ))}
              </div>
            )}

            {/* Utility Navigation */}
            {utilityNavItems.length > 0 && (
              <div>
                {!collapsed && (
                  <div className="mb-3 px-4">
                    <h3 className="text-xs font-medium uppercase text-muted-foreground tracking-wider">Utilities</h3>
                  </div>
                )}
                {utilityNavItems.map((item) => (
                  <Tooltip key={item.href} delayDuration={0}>
                    <TooltipTrigger asChild>
                      <Link
                        href={item.href}
                        className={cn(
                          "flex items-center gap-3 rounded-lg px-3 py-2.5 text-sm font-medium transition-all duration-200",
                          isActive(item.href)
                            ? "bg-primary/10 text-primary shadow-sm"
                            : "text-foreground hover:bg-muted hover:text-foreground",
                        )}
                      >
                        {item.icon}
                        {!collapsed && <span>{item.title}</span>}
                      </Link>
                    </TooltipTrigger>
                    {collapsed && (
                      <TooltipContent side="right">
                        <div>
                          <div className="font-medium">{item.title}</div>
                          {item.description && (
                            <div className="text-xs text-muted-foreground mt-1">{item.description}</div>
                          )}
                        </div>
                      </TooltipContent>
                    )}
                  </Tooltip>
                ))}

                {/* Theme Toggle */}
                <Tooltip delayDuration={0}>
                  <TooltipTrigger asChild>
                    <Button
                      variant="ghost"
                      size={collapsed ? "icon" : "default"}
                      onClick={() => setTheme(theme === "dark" ? "light" : "dark")}
                      className={cn(
                        "w-full justify-start gap-3 rounded-lg px-3 py-2.5 text-sm font-medium transition-all duration-200 mt-1",
                        collapsed && "justify-center",
                      )}
                    >
                      {mounted && theme === "dark" ? <Sun className="h-5 w-5" /> : <Moon className="h-5 w-5" />}
                      {!collapsed && <span>{mounted && theme === "dark" ? "Light Mode" : "Dark Mode"}</span>}
                    </Button>
                  </TooltipTrigger>
                  {collapsed && (
                    <TooltipContent side="right">
                      {mounted && theme === "dark" ? "Light Mode" : "Dark Mode"}
                    </TooltipContent>
                  )}
                </Tooltip>
              </div>
            )}

            {/* Permission Loading State */}
            {permissionsLoading && (
              <div className="px-4 py-2">
                <div className="text-xs text-muted-foreground">Loading permissions...</div>
              </div>
            )}
          </nav>
        </div>

        {/* Sidebar Footer with User Info */}
        <div className="border-t p-4">
          {permissionUser?.isLoggedIn ? (
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" className="w-full justify-start gap-3 p-2 h-auto">
                  <Avatar className="h-8 w-8">
                    <AvatarImage src="" alt={permissionUser.name} />
                    <AvatarFallback>
                      {permissionUser.name?.split(' ').map((n: string) => n[0]).join('').toUpperCase() || 'U'}
                    </AvatarFallback>
                  </Avatar>
                  {!collapsed && (
                    <div className="flex-1 text-left">
                      <div className="text-sm font-medium">{permissionUser.name || 'User'}</div>
                      <div className="flex items-center gap-2">
                        <Badge variant="secondary" className="text-xs">
                          {getUserRoleLabel()}
                        </Badge>
                      </div>
                    </div>
                  )}
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-56">
                <DropdownMenuLabel>
                  <div>
                    <div className="font-medium">{permissionUser.name || 'User'}</div>
                    <div className="text-xs text-muted-foreground">{permissionUser.email}</div>
                  </div>
                </DropdownMenuLabel>
                <DropdownMenuSeparator />
                <DropdownMenuItem onClick={handleLogout}>
                  <LogOut className="mr-2 h-4 w-4" />
                  <span>Log out</span>
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          ) : (
            <div className="text-center">
              <Button variant="outline" size="sm" onClick={() => router.push("/login")}>
                Sign In
              </Button>
            </div>
          )}
        </div>
      </aside>
    </TooltipProvider>
  )
}

================
File: frontend/components/layout/header.tsx
================
"use client"

import { useState, useEffect } from "react"
import { usePathname } from "next/navigation"
import { Menu, Bell, Search, Sun, Moon, Calendar } from "lucide-react"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { useTheme } from "next-themes"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Badge } from "@/components/ui/badge"

interface HeaderProps {
  sidebarCollapsed: boolean
  setSidebarCollapsed: (collapsed: boolean) => void
}

export default function Header({ sidebarCollapsed, setSidebarCollapsed }: HeaderProps) {
  const pathname = usePathname()
  const { theme, setTheme } = useTheme()
  const [user, setUser] = useState<any>(null)
  const [mounted, setMounted] = useState(false)
  const [notifications, setNotifications] = useState<any[]>([])
  const [currentDate, setCurrentDate] = useState<string>("")

  useEffect(() => {
    setMounted(true)

    // Get current date
    const now = new Date()
    setCurrentDate(
      now.toLocaleDateString("en-US", {
        day: "numeric",
        month: "short",
        year: "numeric",
      }),
    )

    // Get user from localStorage
    const userData = localStorage.getItem("fboUser")
    if (userData) {
      setUser(JSON.parse(userData))
    }

    // Mock notifications
    setNotifications([
      {
        id: 1,
        title: "New fuel order",
        message: "A new fuel order has been created",
        time: "5 minutes ago",
        read: false,
      },
      {
        id: 2,
        title: "Order completed",
        message: "Fuel order #1234 has been completed",
        time: "1 hour ago",
        read: false,
      },
      {
        id: 3,
        title: "System update",
        message: "System will be updated tonight at 2 AM",
        time: "3 hours ago",
        read: true,
      },
    ])
  }, [])

  // Get page title from pathname
  const getPageTitle = () => {
    const path = pathname.split("/").filter(Boolean)
    if (path.length === 0) return "Dashboard"

    // Get the last segment and format it
    const lastSegment = path[path.length - 1]
    return lastSegment.charAt(0).toUpperCase() + lastSegment.slice(1).replace(/-/g, " ")
  }

  // Handle logout
  const handleLogout = () => {
    localStorage.removeItem("fboUser")
    window.location.href = "/login"
  }

  // Handle notification click
  const handleNotificationClick = (id: number) => {
    setNotifications(
      notifications.map((notification) => (notification.id === id ? { ...notification, read: true } : notification)),
    )
  }

  // Count unread notifications
  const unreadCount = notifications.filter((notification) => !notification.read).length

  return (
    <header className="sticky top-0 z-40 flex h-16 items-center gap-4 border-b bg-white px-6 dark:bg-gray-900">
      {/* Mobile menu button */}
      <Button variant="ghost" size="icon" className="lg:hidden" onClick={() => setSidebarCollapsed(!sidebarCollapsed)}>
        <Menu className="h-5 w-5" />
        <span className="sr-only">Toggle menu</span>
      </Button>

      {/* Page title and date */}
      <div className="flex flex-1 items-center justify-between">
        <div>
          <h1 className="text-xl font-semibold">{getPageTitle()}</h1>
          <p className="text-sm text-gray-500">Track your team's progress here</p>
        </div>
        <div className="hidden md:flex items-center gap-2">
          <Calendar className="h-4 w-4 text-gray-500" />
          <span className="text-sm text-gray-500">{currentDate}</span>
        </div>
      </div>

      {/* Search */}
      <div className="hidden md:flex relative max-w-sm">
        <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-gray-500" />
        <Input type="search" placeholder="Search..." className="pl-10 w-[300px]" />
      </div>

      {/* Theme toggle */}
      <Button
        variant="ghost"
        size="icon"
        onClick={() => setTheme(theme === "dark" ? "light" : "dark")}
        className="rounded-full"
      >
        {mounted && theme === "dark" ? <Sun className="h-5 w-5" /> : <Moon className="h-5 w-5" />}
        <span className="sr-only">Toggle theme</span>
      </Button>

      {/* Notifications */}
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button variant="ghost" size="icon" className="relative rounded-full">
            <Bell className="h-5 w-5" />
            {unreadCount > 0 && (
              <Badge className="absolute -top-1 -right-1 h-5 w-5 rounded-full p-0 flex items-center justify-center bg-blue-500 text-white">
                {unreadCount}
              </Badge>
            )}
            <span className="sr-only">Notifications</span>
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent align="end" className="w-80">
          <DropdownMenuLabel>Notifications</DropdownMenuLabel>
          <DropdownMenuSeparator />
          {notifications.length === 0 ? (
            <div className="py-4 text-center text-gray-500">No notifications</div>
          ) : (
            notifications.map((notification) => (
              <DropdownMenuItem
                key={notification.id}
                className={cn("flex flex-col items-start p-4 cursor-pointer", !notification.read && "bg-blue-50")}
                onClick={() => handleNotificationClick(notification.id)}
              >
                <div className="flex w-full justify-between">
                  <span className="font-medium">{notification.title}</span>
                  <span className="text-xs text-gray-500">{notification.time}</span>
                </div>
                <span className="text-sm text-gray-500">{notification.message}</span>
              </DropdownMenuItem>
            ))
          )}
          <DropdownMenuSeparator />
          <DropdownMenuItem className="justify-center font-medium">View all notifications</DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>

      {/* User menu */}
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button variant="ghost" className="relative h-8 rounded-full">
            <Avatar className="h-8 w-8">
              <AvatarImage src="/abstract-geometric-shapes.png" alt={user?.name || "User"} />
              <AvatarFallback>{user?.name?.charAt(0) || "U"}</AvatarFallback>
            </Avatar>
            <span className="sr-only">User menu</span>
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent align="end">
          <DropdownMenuLabel className="font-normal">
            <div className="flex flex-col space-y-1">
              <p className="text-sm font-medium leading-none">{user?.name || "User"}</p>
              <p className="text-xs leading-none text-gray-500">{user?.email || "user@example.com"}</p>
            </div>
          </DropdownMenuLabel>
          <DropdownMenuSeparator />
          <DropdownMenuItem>Profile</DropdownMenuItem>
          <DropdownMenuItem>Settings</DropdownMenuItem>
          <DropdownMenuSeparator />
          <DropdownMenuItem onClick={handleLogout}>Log out</DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>
    </header>
  )
}

================
File: frontend/components/layout/sidebar.tsx
================
"use client"
import Link from "next/link"
import { usePathname } from "next/navigation"
import {
  Plane,
  ChevronLeft,
  ChevronRight,
  Home,
  FileText,
  Users,
  BarChart3,
  Settings,
  HelpCircle,
  LogOut,
} from "lucide-react"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"

interface SidebarProps {
  collapsed: boolean
  setCollapsed: (collapsed: boolean) => void
}

export default function Sidebar({ collapsed, setCollapsed }: SidebarProps) {
  const pathname = usePathname()

  const mainNavItems = [
    {
      title: "Home",
      href: "/member/dashboard",
      icon: <Home className="h-5 w-5" />,
    },
    {
      title: "CSR Representatives",
      href: "/member/csr",
      icon: <Users className="h-5 w-5" />,
    },
    {
      title: "Fueling Agents",
      href: "/member/fueling",
      icon: <Plane className="h-5 w-5 rotate-45" />,
    },
    {
      title: "Fuel Orders",
      href: "/member/orders",
      icon: <FileText className="h-5 w-5" />,
    },
    {
      title: "Performance",
      href: "/member/performance",
      icon: <BarChart3 className="h-5 w-5" />,
    },
  ]

  const utilityNavItems = [
    {
      title: "Settings",
      href: "/member/settings",
      icon: <Settings className="h-5 w-5" />,
    },
    {
      title: "Help & Support",
      href: "/member/support",
      icon: <HelpCircle className="h-5 w-5" />,
    },
  ]

  const isActive = (href: string) => {
    return pathname === href || pathname.startsWith(`${href}/`)
  }

  return (
    <aside
      className={cn(
        "fixed inset-y-0 left-0 z-50 flex flex-col border-r bg-white dark:bg-gray-900 transition-all duration-300 ease-in-out",
        collapsed ? "w-[80px]" : "w-[280px]",
      )}
    >
      {/* Sidebar Header */}
      <div className="flex h-16 items-center justify-between border-b px-4">
        <Link href="/member/dashboard" className="flex items-center gap-2">
          <Plane className="h-6 w-6 text-primary rotate-45" />
          {!collapsed && <span className="text-xl font-bold">FBO LaunchPad</span>}
        </Link>
        <Button variant="ghost" size="icon" onClick={() => setCollapsed(!collapsed)} className="h-8 w-8 rounded-full">
          {collapsed ? <ChevronRight className="h-4 w-4" /> : <ChevronLeft className="h-4 w-4" />}
        </Button>
      </div>

      {/* Sidebar Content */}
      <div className="flex-1 overflow-y-auto py-4">
        <TooltipProvider delayDuration={0}>
          <nav className="flex flex-col gap-1 px-2">
            {/* Main Navigation */}
            <div className="mb-4">
              {!collapsed && (
                <div className="mb-2 px-4">
                  <h3 className="text-xs font-medium uppercase text-gray-500">Main Menu</h3>
                </div>
              )}
              {mainNavItems.map((item) => (
                <Tooltip key={item.href} delayDuration={0}>
                  <TooltipTrigger asChild>
                    <Link
                      href={item.href}
                      className={cn(
                        "flex items-center gap-3 rounded-md px-3 py-2 text-sm font-medium transition-colors",
                        isActive(item.href)
                          ? "bg-blue-50 text-blue-600 dark:bg-blue-900/20 dark:text-blue-400"
                          : "text-gray-600 hover:bg-gray-100 hover:text-gray-900 dark:text-gray-400 dark:hover:bg-gray-800 dark:hover:text-gray-200",
                      )}
                    >
                      {item.icon}
                      {!collapsed && <span>{item.title}</span>}
                    </Link>
                  </TooltipTrigger>
                  {collapsed && <TooltipContent side="right">{item.title}</TooltipContent>}
                </Tooltip>
              ))}
            </div>

            {/* Utility Navigation */}
            <div className="mt-auto">
              {!collapsed && (
                <div className="mb-2 px-4">
                  <h3 className="text-xs font-medium uppercase text-gray-500">Utilities</h3>
                </div>
              )}
              {utilityNavItems.map((item) => (
                <Tooltip key={item.href} delayDuration={0}>
                  <TooltipTrigger asChild>
                    <Link
                      href={item.href}
                      className={cn(
                        "flex items-center gap-3 rounded-md px-3 py-2 text-sm font-medium transition-colors",
                        isActive(item.href)
                          ? "bg-blue-50 text-blue-600 dark:bg-blue-900/20 dark:text-blue-400"
                          : "text-gray-600 hover:bg-gray-100 hover:text-gray-900 dark:text-gray-400 dark:hover:bg-gray-800 dark:hover:text-gray-200",
                      )}
                    >
                      {item.icon}
                      {!collapsed && <span>{item.title}</span>}
                    </Link>
                  </TooltipTrigger>
                  {collapsed && <TooltipContent side="right">{item.title}</TooltipContent>}
                </Tooltip>
              ))}
            </div>
          </nav>
        </TooltipProvider>
      </div>

      {/* Sidebar Footer */}
      <div className="border-t p-4">
        <Tooltip delayDuration={0}>
          <TooltipTrigger asChild>
            <Button
              variant="outline"
              className={cn("w-full justify-start gap-2", collapsed && "justify-center px-0")}
              onClick={() => {
                // Handle logout
                localStorage.removeItem("fboUser")
                window.location.href = "/login"
              }}
            >
              <LogOut className="h-4 w-4" />
              {!collapsed && <span>Logout</span>}
            </Button>
          </TooltipTrigger>
          {collapsed && <TooltipContent side="right">Logout</TooltipContent>}
        </Tooltip>
      </div>
    </aside>
  )
}

================
File: frontend/components/ui/accordion.tsx
================
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

================
File: frontend/components/ui/alert-dialog.tsx
================
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

================
File: frontend/components/ui/alert.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

================
File: frontend/components/ui/aspect-ratio.tsx
================
"use client"

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }

================
File: frontend/components/ui/avatar.tsx
================
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

================
File: frontend/components/ui/badge.tsx
================
import type * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default: "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary: "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive: "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
)

export interface BadgeProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return <div className={cn(badgeVariants({ variant }), className)} {...props} />
}

export { Badge, badgeVariants }

================
File: frontend/components/ui/breadcrumb.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}

================
File: frontend/components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline: "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return <Comp className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} />
  },
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: frontend/components/ui/calendar.tsx
================
"use client"

import type * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({ className, classNames, showOutsideDays = true, ...props }: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100",
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell: "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(buttonVariants({ variant: "ghost" }), "h-9 w-9 p-0 font-normal aria-selected:opacity-100"),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle: "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }

================
File: frontend/components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("rounded-lg border bg-card text-card-foreground shadow-sm", className)} {...props} />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div ref={ref} className={cn("flex flex-col space-y-1.5 p-6", className)} {...props} />
  ),
)
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLHeadingElement>>(
  ({ className, ...props }, ref) => (
    <h3 ref={ref} className={cn("text-2xl font-semibold leading-none tracking-tight", className)} {...props} />
  ),
)
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(
  ({ className, ...props }, ref) => (
    <p ref={ref} className={cn("text-sm text-muted-foreground", className)} {...props} />
  ),
)
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />,
)
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div ref={ref} className={cn("flex items-center p-6 pt-0", className)} {...props} />
  ),
)
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: frontend/components/ui/carousel.tsx
================
"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}

================
File: frontend/components/ui/chart.tsx
================
"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}

================
File: frontend/components/ui/checkbox.tsx
================
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

================
File: frontend/components/ui/collapsible.tsx
================
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

================
File: frontend/components/ui/command.tsx
================
"use client"

import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }: DialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

================
File: frontend/components/ui/context-menu.tsx
================
"use client"

import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}

================
File: frontend/components/ui/dialog.tsx
================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className,
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className,
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn("flex flex-col space-y-1.5 text-center sm:text-left", className)} {...props} />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)} {...props} />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description ref={ref} className={cn("text-sm text-muted-foreground", className)} {...props} />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: frontend/components/ui/drawer.tsx
================
"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}

================
File: frontend/components/ui/dropdown-menu.tsx
================
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className,
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName = DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName = DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className,
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName = DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", inset && "pl-8", className)}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator ref={ref} className={cn("-mx-1 my-1 h-px bg-muted", className)} {...props} />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {
  return <span className={cn("ml-auto text-xs tracking-widest opacity-60", className)} {...props} />
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

================
File: frontend/components/ui/form.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

================
File: frontend/components/ui/hover-card.tsx
================
"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }

================
File: frontend/components/ui/input-otp.tsx
================
"use client"

import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }

================
File: frontend/components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

export interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(({ className, type, ...props }, ref) => {
  return (
    <input
      type={type}
      className={cn(
        "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      ref={ref}
      {...props}
    />
  )
})
Input.displayName = "Input"

export { Input }

================
File: frontend/components/ui/label.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva("text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70")

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> & VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: frontend/components/ui/menubar.tsx
================
"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}

================
File: frontend/components/ui/navigation-menu.tsx
================
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}

================
File: frontend/components/ui/pagination.tsx
================
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}

================
File: frontend/components/ui/popover.tsx
================
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className,
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }

================
File: frontend/components/ui/progress.tsx
================
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn("relative h-4 w-full overflow-hidden rounded-full bg-secondary", className)}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }

================
File: frontend/components/ui/radio-group.tsx
================
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }

================
File: frontend/components/ui/resizable.tsx
================
"use client"

import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }

================
File: frontend/components/ui/scroll-area.tsx
================
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

================
File: frontend/components/ui/select.tsx
================
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className,
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName = SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className,
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]",
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label ref={ref} className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)} {...props} />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator ref={ref} className={cn("-mx-1 my-1 h-px bg-muted", className)} {...props} />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

================
File: frontend/components/ui/separator.tsx
================
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

================
File: frontend/components/ui/sheet.tsx
================
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}

================
File: frontend/components/ui/sidebar.tsx
================
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}

================
File: frontend/components/ui/skeleton.tsx
================
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }

================
File: frontend/components/ui/slider.tsx
================
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }

================
File: frontend/components/ui/sonner.tsx
================
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }

================
File: frontend/components/ui/switch.tsx
================
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

================
File: frontend/components/ui/table.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<HTMLTableElement, React.HTMLAttributes<HTMLTableElement>>(
  ({ className, ...props }, ref) => (
    <div className="relative w-full overflow-auto">
      <table ref={ref} className={cn("w-full caption-bottom text-sm", className)} {...props} />
    </div>
  ),
)
Table.displayName = "Table"

const TableHeader = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(
  ({ className, ...props }, ref) => <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />,
)
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(
  ({ className, ...props }, ref) => (
    <tbody ref={ref} className={cn("[&_tr:last-child]:border-0", className)} {...props} />
  ),
)
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(
  ({ className, ...props }, ref) => (
    <tfoot ref={ref} className={cn("border-t bg-muted/50 font-medium [&>tr]:last:border-b-0", className)} {...props} />
  ),
)
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<HTMLTableRowElement, React.HTMLAttributes<HTMLTableRowElement>>(
  ({ className, ...props }, ref) => (
    <tr
      ref={ref}
      className={cn("border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted", className)}
      {...props}
    />
  ),
)
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<HTMLTableCellElement, React.ThHTMLAttributes<HTMLTableCellElement>>(
  ({ className, ...props }, ref) => (
    <th
      ref={ref}
      className={cn(
        "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
        className,
      )}
      {...props}
    />
  ),
)
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<HTMLTableCellElement, React.TdHTMLAttributes<HTMLTableCellElement>>(
  ({ className, ...props }, ref) => (
    <td ref={ref} className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)} {...props} />
  ),
)
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<HTMLTableCaptionElement, React.HTMLAttributes<HTMLTableCaptionElement>>(
  ({ className, ...props }, ref) => (
    <caption ref={ref} className={cn("mt-4 text-sm text-muted-foreground", className)} {...props} />
  ),
)
TableCaption.displayName = "TableCaption"

export { Table, TableHeader, TableBody, TableFooter, TableHead, TableRow, TableCell, TableCaption }

================
File: frontend/components/ui/tabs.tsx
================
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className,
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className,
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className,
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

================
File: frontend/components/ui/textarea.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }

================
File: frontend/components/ui/toast.tsx
================
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

================
File: frontend/components/ui/toaster.tsx
================
"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

================
File: frontend/components/ui/toggle-group.tsx
================
"use client"

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }

================
File: frontend/components/ui/toggle.tsx
================
"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3 min-w-10",
        sm: "h-9 px-2.5 min-w-9",
        lg: "h-11 px-5 min-w-11",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }

================
File: frontend/components/ui/tooltip.tsx
================
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

================
File: frontend/components/ui/use-mobile.tsx
================
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

================
File: frontend/components/ui/use-toast.ts
================
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

================
File: frontend/components/analytics.tsx
================
"use client"

export function Analytics() {
  return (
    <>
      {/* Flight path animation elements */}
      <div className="fixed top-[10%] left-0 w-full h-0 z-0 pointer-events-none overflow-hidden">
        <div className="flight-path absolute w-16 h-8 opacity-30">
          <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M21 16L12 7L3 16H5L12 9L19 16H21Z" fill="currentColor" className="text-primary" />
            <path d="M19 19L12 12L5 19H7L12 14L17 19H19Z" fill="currentColor" className="text-primary" />
          </svg>
        </div>
      </div>
      <div className="fixed top-[30%] left-0 w-full h-0 z-0 pointer-events-none overflow-hidden">
        <div className="flight-path absolute w-16 h-8 opacity-30" style={{ animationDelay: "5s" }}>
          <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M21 16L12 7L3 16H5L12 9L19 16H21Z" fill="currentColor" className="text-accent" />
            <path d="M19 19L12 12L5 19H7L12 14L17 19H19Z" fill="currentColor" className="text-accent" />
          </svg>
        </div>
      </div>
      <div className="fixed top-[50%] left-0 w-full h-0 z-0 pointer-events-none overflow-hidden">
        <div className="flight-path absolute w-16 h-8 opacity-30" style={{ animationDelay: "8s" }}>
          <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M21 16L12 7L3 16H5L12 9L19 16H21Z" fill="currentColor" className="text-primary" />
            <path d="M19 19L12 12L5 19H7L12 14L17 19H19Z" fill="currentColor" className="text-primary" />
          </svg>
        </div>
      </div>
    </>
  )
}

================
File: frontend/components/footer.tsx
================
import { Plane } from "lucide-react"
import Link from "next/link"

export default function Footer() {
  return (
    <footer className="border-t bg-background/95 backdrop-blur-md">
      <div className="container flex flex-col gap-8 py-12 md:flex-row md:gap-12">
        <div className="flex flex-col gap-4 md:flex-1">
          <div className="flex items-center gap-2">
            <Plane className="h-6 w-6 text-primary rotate-45" />
            <span className="text-xl font-bold text-foreground">FBO LaunchPad</span>
          </div>
          <p className="text-muted-foreground leading-relaxed max-w-md">
            AI-powered aircraft ownership monitoring for Fixed Base Operators. Stay ahead of ownership changes with
            real-time intelligence.
          </p>
          <div className="text-sm text-muted-foreground">© 2025 FBO LaunchPad. All rights reserved.</div>
        </div>

        <div className="grid grid-cols-2 gap-8 sm:grid-cols-3 md:flex-1">
          <div className="space-y-4">
            <h3 className="text-sm font-semibold text-foreground uppercase tracking-wider">Platform</h3>
            <ul className="space-y-3">
              <li>
                <Link href="/#features" className="text-sm text-muted-foreground hover:text-primary transition-colors">
                  Features
                </Link>
              </li>
              <li>
                <Link href="/#benefits" className="text-sm text-muted-foreground hover:text-primary transition-colors">
                  Benefits
                </Link>
              </li>
              <li>
                <Link
                  href="/#how-it-works"
                  className="text-sm text-muted-foreground hover:text-primary transition-colors"
                >
                  How It Works
                </Link>
              </li>
              <li>
                <Link href="/faq" className="text-sm text-muted-foreground hover:text-primary transition-colors">
                  FAQ
                </Link>
              </li>
            </ul>
          </div>

          <div className="space-y-4">
            <h3 className="text-sm font-semibold text-foreground uppercase tracking-wider">Company</h3>
            <ul className="space-y-3">
              <li>
                <Link href="/about" className="text-sm text-muted-foreground hover:text-primary transition-colors">
                  About Us
                </Link>
              </li>
              <li>
                <Link
                  href="/request-demo"
                  className="text-sm text-muted-foreground hover:text-primary transition-colors"
                >
                  Contact
                </Link>
              </li>
            </ul>
          </div>

          <div className="space-y-4">
            <h3 className="text-sm font-semibold text-foreground uppercase tracking-wider">Legal</h3>
            <ul className="space-y-3">
              <li>
                <Link href="/privacy" className="text-sm text-muted-foreground hover:text-primary transition-colors">
                  Privacy Policy
                </Link>
              </li>
              <li>
                <Link href="/terms" className="text-sm text-muted-foreground hover:text-primary transition-colors">
                  Terms of Service
                </Link>
              </li>
            </ul>
          </div>
        </div>
      </div>

      <div className="border-t py-6">
        <div className="container flex flex-col items-center justify-between gap-4 md:flex-row">
          <div className="flex items-center gap-6">
            <Link href="/login" className="text-sm text-muted-foreground hover:text-primary transition-colors">
              Member Login
            </Link>
            <Link href="/request-demo" className="text-sm text-muted-foreground hover:text-primary transition-colors">
              Request Demo
            </Link>
          </div>

          <div className="flex items-center gap-4">
            <Link
              href="#"
              className="text-muted-foreground hover:text-primary transition-colors"
              aria-label="Follow us on Twitter"
            >
              <svg className="h-5 w-5" fill="currentColor" viewBox="0 0 24 24">
                <path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z" />
              </svg>
            </Link>
            <Link
              href="#"
              className="text-muted-foreground hover:text-primary transition-colors"
              aria-label="Connect on LinkedIn"
            >
              <svg className="h-5 w-5" fill="currentColor" viewBox="0 0 24 24">
                <path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z" />
                <rect width="4" height="12" x="2" y="9" />
                <circle cx="4" cy="4" r="2" />
              </svg>
            </Link>
          </div>
        </div>
      </div>
    </footer>
  )
}

================
File: frontend/components/header.tsx
================
"use client"

import { Button } from "@/components/ui/button"
import { Plane, Menu, X, Moon, Sun } from "lucide-react"
import Link from "next/link"
import { useRouter, usePathname } from "next/navigation"
import { useState, useEffect, useRef } from "react"
import { useTheme } from "next-themes"

export default function Header() {
  const router = useRouter()
  const pathname = usePathname()
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false)
  const { theme, setTheme } = useTheme()
  const [mounted, setMounted] = useState(false)
  const [isTransitioning, setIsTransitioning] = useState(false)
  const [btnClicked, setBtnClicked] = useState(false)
  const demoButtonRef = useRef(null)
  const mobileDemoButtonRef = useRef(null)

  useEffect(() => {
    setMounted(true)
  }, [])

  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    })
  }

  const scrollToSection = (e, sectionId) => {
    e.preventDefault()
    setMobileMenuOpen(false)

    const section = document.getElementById(sectionId)
    if (section) {
      // Add a small delay to make the transition feel more natural
      setTimeout(() => {
        section.scrollIntoView({
          behavior: "smooth",
          block: "start",
        })
      }, 100)
    }
  }

  const handleHomeClick = (e) => {
    e.preventDefault()
    setMobileMenuOpen(false)

    // Always navigate to the home page
    router.push("/")

    // If already on home page, scroll to top
    if (pathname === "/") {
      setTimeout(() => {
        scrollToTop()
      }, 100)
    }
  }

  const handleDemoClick = (e, isMobile = false) => {
    e.preventDefault()
    setIsTransitioning(true)
    setBtnClicked(true)

    // Reference to the correct button based on mobile or desktop
    const buttonRef = isMobile ? mobileDemoButtonRef : demoButtonRef

    // Wait for the animation to complete before navigating
    setTimeout(() => {
      router.push("/request-demo")
      setIsTransitioning(false)
      setBtnClicked(false)
    }, 800)
  }

  const toggleTheme = () => {
    setTheme(theme === "dark" ? "light" : "dark")
  }

  return (
    <header className="sticky top-0 z-40 w-full border-b backdrop-blur-md bg-background/80 dark:bg-background/80">
      <div className="container flex h-16 items-center justify-between space-x-4">
        <div className="flex items-center gap-1 md:gap-2 shrink-0">
          <Link href="/" className="flex items-center gap-2" onClick={handleHomeClick}>
            <Plane className="h-5 w-5 md:h-6 md:w-6 text-primary rotate-45" />
            <span className="text-lg md:text-xl font-bold">FBO LaunchPad</span>
          </Link>
        </div>

        {/* Desktop Navigation */}
        <nav className="hidden md:flex items-center justify-center gap-6 flex-1 mx-4">
          <Link
            href="/"
            className="text-sm font-medium hover:text-primary transition-colors flex items-center gap-1"
            onClick={handleHomeClick}
          >
            <svg className="w-4 h-4" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path
                d="M3 9L12 2L21 9V20C21 20.5304 20.7893 21.0391 20.4142 21.4142C20.0391 21.7893 19.5304 22 19 22H5C4.46957 22 3.96086 21.7893 3.58579 21.4142C3.21071 21.0391 3 20.5304 3 20V9Z"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
              <path
                d="M9 22V12H15V22"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
            </svg>
            Home
          </Link>
          <Link
            href="/#features"
            className="text-sm font-medium hover:text-primary transition-colors flex items-center gap-1"
            onClick={(e) => scrollToSection(e, "features")}
          >
            <svg className="w-4 h-4" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path
                d="M22 12H18L15 21L9 3L6 12H2"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
            </svg>
            Features
          </Link>
          <Link
            href="/#benefits"
            className="text-sm font-medium hover:text-primary transition-colors flex items-center gap-1"
            onClick={(e) => scrollToSection(e, "benefits")}
          >
            <svg className="w-4 h-4" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path
                d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
              <path d="M12 16V12" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
              <path
                d="M12 8H12.01"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
            </svg>
            Benefits
          </Link>
          <Link
            href="/#how-it-works"
            className="text-sm font-medium hover:text-primary transition-colors flex items-center gap-1"
            onClick={(e) => scrollToSection(e, "how-it-works")}
          >
            <svg className="w-4 h-4" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path
                d="M12 16V12L14 14"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
              <circle
                cx="12"
                cy="12"
                r="10"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
            </svg>
            How It Works
          </Link>
          <button
            onClick={toggleTheme}
            className="p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-800 transition-colors theme-toggle"
            aria-label="Toggle theme"
          >
            {mounted && (
              <span className="theme-toggle-icon inline-block">
                {theme === "dark" ? <Sun className="h-5 w-5" /> : <Moon className="h-5 w-5" />}
              </span>
            )}
          </button>
        </nav>

        <div className="flex items-center gap-4 shrink-0">
          <Button
            ref={demoButtonRef}
            className={`bg-primary hover:bg-primary/90 glow-effect hidden md:flex transition-all duration-300 demo-btn ${
              btnClicked ? "clicked" : ""
            } ${isTransitioning ? "scale-95 opacity-80" : ""}`}
            onClick={(e) => handleDemoClick(e, false)}
          >
            <span className="demo-btn-icon mr-2">
              <Plane className="h-4 w-4 rotate-45" />
            </span>
            Request a Demo
          </Button>

          <Button
            variant="outline"
            className="hidden md:flex border-gray-500 hover:bg-gray-200 dark:hover:bg-gray-800 transition-colors"
            onClick={() => router.push("/login")}
          >
            <svg className="h-4 w-4 mr-2" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path
                d="M15 3H19C19.5304 3 20.0391 3.21071 20.4142 3.58579C20.7893 3.96086 21 4.46957 21 5V19C21 19.5304 20.7893 20.0391 20.4142 20.4142C20.0391 20.7893 19.5304 21 19 21H15"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
              <path
                d="M10 17L15 12L10 7"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
              <path d="M15 12H3" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
            </svg>
            Member Log In
          </Button>

          {/* Mobile Menu Button */}
          <button
            className="md:hidden p-2 rounded-md hover:bg-gray-200 dark:hover:bg-gray-800 transition-colors"
            onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
            aria-label="Toggle menu"
          >
            {mobileMenuOpen ? <X className="h-6 w-6" /> : <Menu className="h-6 w-6" />}
          </button>
        </div>
      </div>

      {/* Mobile Menu */}
      {mobileMenuOpen && (
        <div className="md:hidden fixed inset-x-0 top-16 z-50 mobile-menu">
          <div className="px-2 pt-2 pb-3 space-y-1 sm:px-3 bg-background/95 backdrop-blur-md border-b shadow-lg">
            <Link
              href="/"
              className="block px-3 py-3 rounded-md text-base font-medium hover:bg-gray-200 dark:hover:bg-gray-800 transition-colors"
              onClick={handleHomeClick}
            >
              Home
            </Link>
            <Link
              href="/#features"
              className="block px-3 py-3 rounded-md text-base font-medium hover:bg-gray-200 dark:hover:bg-gray-800 transition-colors"
              onClick={(e) => scrollToSection(e, "features")}
            >
              Features
            </Link>
            <Link
              href="/#benefits"
              className="block px-3 py-3 rounded-md text-base font-medium hover:bg-gray-200 dark:hover:bg-gray-800 transition-colors"
              onClick={(e) => scrollToSection(e, "benefits")}
            >
              Benefits
            </Link>
            <Link
              href="/#how-it-works"
              className="block px-3 py-3 rounded-md text-base font-medium hover:bg-gray-200 dark:hover:bg-gray-800 transition-colors"
              onClick={(e) => scrollToSection(e, "how-it-works")}
            >
              How It Works
            </Link>
            <div className="flex flex-col gap-3 px-3 py-3">
              <div className="flex items-center justify-between">
                <button
                  onClick={toggleTheme}
                  className="p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-800 transition-colors theme-toggle"
                  aria-label="Toggle theme"
                >
                  {mounted && (
                    <span className="theme-toggle-icon inline-block">
                      {theme === "dark" ? <Sun className="h-5 w-5" /> : <Moon className="h-5 w-5" />}
                    </span>
                  )}
                </button>
                <Button
                  ref={mobileDemoButtonRef}
                  className={`bg-primary hover:bg-primary/90 transition-all duration-300 demo-btn ${
                    btnClicked ? "clicked" : ""
                  } ${isTransitioning ? "scale-95 opacity-80" : ""}`}
                  onClick={(e) => handleDemoClick(e, true)}
                >
                  <span className="demo-btn-icon mr-2">
                    <Plane className="h-4 w-4 rotate-45" />
                  </span>
                  Request a Demo
                </Button>
              </div>
              <Button
                variant="outline"
                className="w-full border-gray-500 hover:bg-gray-200 dark:hover:bg-gray-800 transition-colors"
                onClick={() => router.push("/login")}
              >
                <svg className="h-4 w-4 mr-2" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path
                    d="M15 3H19C19.5304 3 20.0391 3.21071 20.4142 3.58579C20.7893 3.96086 21 4.46957 21 5V19C21 19.5304 20.7893 20.0391 20.4142 20.4142C20.0391 20.7893 19.5304 21 19 21H15"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  />
                  <path
                    d="M10 17L15 12L10 7"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  />
                  <path
                    d="M15 12H3"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  />
                </svg>
                Member Log In
              </Button>
            </div>
          </div>
        </div>
      )}
    </header>
  )
}

================
File: frontend/components/page-transition.tsx
================
"use client"

import { motion, AnimatePresence } from "framer-motion"
import { usePathname } from "next/navigation"
import type { ReactNode } from "react"

interface PageTransitionProps {
  children: ReactNode
}

export function PageTransition({ children }: PageTransitionProps) {
  const pathname = usePathname()

  return (
    <AnimatePresence mode="wait">
      <motion.div
        key={pathname}
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0, y: -20 }}
        transition={{ duration: 0.3, ease: "easeInOut" }}
      >
        {children}
      </motion.div>
    </AnimatePresence>
  )
}

================
File: frontend/components/stagewise-toolbar.tsx
================
"use client"

import dynamic from "next/dynamic"

const StagewiseToolbar = dynamic(
  () => import("@stagewise/toolbar-next").then((mod) => mod.StagewiseToolbar),
  { ssr: false }
)

export default function StagewiseToolbarWrapper() {
  if (process.env.NODE_ENV !== "development") {
    return null
  }

  return <StagewiseToolbar config={{ plugins: [] }} />
}

================
File: frontend/components/theme-provider.tsx
================
"use client"
import { ThemeProvider as NextThemesProvider } from "next-themes"
import type { ThemeProviderProps } from "next-themes"

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}

================
File: frontend/components/theme-toggle.tsx
================
"use client"

import * as React from "react"
import { Moon, Sun } from "lucide-react"
import { useTheme } from "next-themes"

export function ThemeToggle() {
  const { setTheme, theme } = useTheme()
  const [mounted, setMounted] = React.useState(false)

  // Avoid hydration mismatch by only rendering after mount
  React.useEffect(() => {
    setMounted(true)
  }, [])

  if (!mounted) {
    return (
      <button className="h-9 w-9 rounded-md border border-[#DEE2E6] dark:border-[#2D3339] p-2 flex items-center justify-center">
        <span className="sr-only">Toggle theme</span>
        <Sun className="h-4 w-4 text-[#525F7F]" />
      </button>
    )
  }

  return (
    <button
      onClick={() => setTheme(theme === "dark" ? "light" : "dark")}
      className="h-9 w-9 rounded-md border border-[#DEE2E6] dark:border-[#2D3339] bg-white dark:bg-[#252A2E] p-2 flex items-center justify-center shadow-sm"
    >
      <span className="sr-only">Toggle theme</span>
      {theme === "dark" ? <Sun className="h-4 w-4 text-[#2A628F]" /> : <Moon className="h-4 w-4 text-[#2A628F]" />}
    </button>
  )
}

================
File: frontend/hooks/use-mobile.tsx
================
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

================
File: frontend/hooks/use-toast.ts
================
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

================
File: frontend/tailwind.config.ts
================
import type { Config } from "tailwindcss"
import { colors, typography, spacing, borderRadius, shadows } from "./app/styles/design-tokens"

const config: Config = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
    "*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1440px",
      },
    },
    extend: {
      fontFamily: {
        montserrat: ["var(--font-montserrat)", "sans-serif"],
      },
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
          ...colors.primary,
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
        // Add status colors
        success: colors.success,
        warning: colors.warning,
        error: colors.error,
        info: colors.info,
        // Add neutral colors
        neutral: colors.neutral,
      },
      borderRadius: {
        lg: `var(--radius)`,
        md: `calc(var(--radius) - 2px)`,
        sm: "calc(var(--radius) - 4px)",
        ...borderRadius,
      },
      fontFamily: {
        sans: [typography.fontFamily.base],
        mono: [typography.fontFamily.mono],
      },
      fontSize: typography.fontSize,
      fontWeight: typography.fontWeight,
      lineHeight: typography.lineHeight,
      spacing: spacing,
      boxShadow: shadows,
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
}

export default config

================
File: backend/src/models/permission.py
================
from src.extensions import db
from sqlalchemy import Integer, String, Text, DateTime, Boolean
from datetime import datetime

class Permission(db.Model):
    __tablename__ = 'permissions'

    id = db.Column(Integer, primary_key=True)
    name = db.Column(String(100), unique=True, nullable=False, index=True)
    description = db.Column(Text, nullable=True)
    category = db.Column(String(50), nullable=True, default='system')
    
    # Resource-specific permission fields
    resource_type = db.Column(String(50), nullable=True)  # e.g., 'fuel_order', 'user', 'aircraft', 'global'
    action = db.Column(String(50), nullable=True)         # e.g., 'create', 'read', 'update', 'delete', 'manage'
    scope = db.Column(String(50), nullable=True)          # e.g., 'own', 'any', 'department'
    
    # Permission metadata
    is_system_permission = db.Column(Boolean, default=False, nullable=False)  # System permissions cannot be deleted
    is_active = db.Column(Boolean, default=True, nullable=False)
    requires_resource_context = db.Column(Boolean, default=False, nullable=False)  # Whether this permission needs resource_id context
    
    created_at = db.Column(DateTime, default=datetime.utcnow, nullable=False)
    updated_at = db.Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)

    def get_full_name(self):
        """Get a descriptive full name for the permission."""
        parts = []
        if self.action:
            parts.append(self.action)
        if self.resource_type:
            parts.append(self.resource_type)
        if self.scope and self.scope != 'any':
            parts.append(f"({self.scope})")
        
        return "_".join(parts) if parts else self.name

    def is_resource_specific(self):
        """Check if this permission applies to specific resources."""
        return self.requires_resource_context or self.scope == 'own'

    def to_dict(self):
        """Convert to dictionary for API responses."""
        return {
            'id': self.id,
            'name': self.name,
            'description': self.description,
            'category': self.category,
            'resource_type': self.resource_type,
            'action': self.action,
            'scope': self.scope,
            'is_system_permission': self.is_system_permission,
            'is_active': self.is_active,
            'requires_resource_context': self.requires_resource_context,
            'full_name': self.get_full_name(),
            'created_at': self.created_at.isoformat() if self.created_at else None
        }

    def __repr__(self):
        return f'<Permission {self.name}>'

================
File: backend/src/models/user.py
================
from datetime import datetime, timedelta
from enum import Enum
from flask import current_app, g, has_request_context
from sqlalchemy import exists
from sqlalchemy.orm import joinedload
from werkzeug.security import generate_password_hash, check_password_hash
import jwt

from ..extensions import db
from ..models.permission import Permission
from ..models.role import Role
from ..models.role_permission import role_permissions, user_roles

class UserRole(Enum):
    """
    Enumeration of user roles for backward compatibility with role-based decorators.
    """
    ADMIN = "ADMIN"
    CSR = "CSR"
    LST = "LST"

class User(db.Model):
    __tablename__ = 'users'

    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), unique=True, nullable=False, index=True)
    email = db.Column(db.String(120), unique=True, nullable=False, index=True)
    name = db.Column(db.String(120), nullable=True)
    password_hash = db.Column(db.String(128))
    is_active = db.Column(db.Boolean, nullable=False, default=True)
    created_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # LST-specific fields
    employee_id = db.Column(db.String(20), nullable=True, unique=True, index=True)
    status = db.Column(db.String(20), nullable=True, default='active', index=True)
    shift = db.Column(db.String(20), nullable=True)
    certifications = db.Column(db.JSON, nullable=True)
    performance_rating = db.Column(db.Float, nullable=True)
    orders_completed = db.Column(db.Integer, nullable=True, default=0)
    average_time = db.Column(db.Float, nullable=True)
    last_active = db.Column(db.DateTime, nullable=True)
    hire_date = db.Column(db.DateTime, nullable=True)
    roles = db.relationship(
        'Role',
        secondary=user_roles,
        backref=db.backref('users', lazy='dynamic'),
        lazy='dynamic'
    )
    
    # Enhanced permission system relationships
    # Note: These relationships are defined in the respective model files
    # direct_permissions - defined in UserPermission model
    # permission_groups - defined in PermissionGroup model via user_permission_groups table

    def set_password(self, password):
        self.password_hash = generate_password_hash(password, method='pbkdf2:sha256')

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

    def to_dict(self):
        """Convert user object to dictionary."""
        result = {
            'id': self.id,
            'username': self.username,
            'email': self.email,
            'name': self.name,
            'roles': [role.name for role in self.roles.all()],
            'is_active': self.is_active,
            'created_at': self.created_at.isoformat()
        }
        
        # Add LST-specific fields if they exist
        if self.employee_id is not None:
            result['employee_id'] = self.employee_id
        if self.status is not None:
            result['status'] = self.status
        if self.shift is not None:
            result['shift'] = self.shift
        if self.certifications is not None:
            result['certifications'] = self.certifications
        if self.performance_rating is not None:
            result['performance_rating'] = self.performance_rating
        if self.orders_completed is not None:
            result['orders_completed'] = self.orders_completed
        if self.average_time is not None:
            result['average_time'] = self.average_time
        if self.last_active is not None:
            result['last_active'] = self.last_active.isoformat()
        if self.hire_date is not None:
            result['hire_date'] = self.hire_date.isoformat()
            
        return result

    @property
    def role_list(self):
        """Get list of roles for this user."""
        return self.roles.all()

    def __repr__(self):
        return f'<User {self.username}>'

    def has_permission(self, permission_name: str, resource_type: str = None, resource_id: str = None) -> bool:
        """
        Enhanced permission checking that supports the new granular permission system.
        Checks permissions from multiple sources: direct assignments, permission groups, and legacy roles.
        
        Args:
            permission_name (str): The name of the permission to check for.
            resource_type (str): Optional resource type for resource-specific permissions.
            resource_id (str): Optional resource ID for resource-specific permissions.
            
        Returns:
            bool: True if the user has the permission, False otherwise.
            
        Note:
            This method now uses the enhanced PermissionService for comprehensive permission checking.
            Falls back to legacy role-based checking for backward compatibility.
        """
        if not self.is_active:
            return False
        
        # Use the enhanced permission service for comprehensive checking
        try:
            # Import here to avoid circular imports
            from ..services.permission_service import PermissionService
            return PermissionService.user_has_permission(
                user_id=self.id,
                permission_name=permission_name,
                resource_type=resource_type,
                resource_id=resource_id
            )
        except ImportError:
            # Fallback to legacy role-based checking if PermissionService is not available
            return self._legacy_has_permission(permission_name)
    
    def _legacy_has_permission(self, permission_name: str) -> bool:
        """
        Legacy permission checking method for backward compatibility.
        Only checks role-based permissions.
        """
        # Use request-level caching if available
        if has_request_context():
            # Initialize permission cache if it doesn't exist
            if not hasattr(g, '_permission_cache'):
                g._permission_cache = {}
            
            cache_key = f'user_{self.id}_legacy_perm_{permission_name}'
            if cache_key in g._permission_cache:
                return g._permission_cache[cache_key]
            
            # Check permission and cache result
            result = db.session.query(exists().where(
                db.and_(
                    User.id == self.id,
                    User.roles.any(Role.permissions.any(Permission.name == permission_name))
                )
            )).scalar()
            
            g._permission_cache[cache_key] = result
            return result
            
        # If no request context, perform check without caching
        return db.session.query(exists().where(
            db.and_(
                User.id == self.id,
                User.roles.any(Role.permissions.any(Permission.name == permission_name))
            )
        )).scalar()
    
    def get_effective_permissions(self, include_resource_context: bool = False) -> dict:
        """
        Get all effective permissions for this user from all sources.
        
        Args:
            include_resource_context (bool): Whether to include resource-specific permissions
            
        Returns:
            dict: Dictionary of effective permissions
        """
        try:
            from ..services.permission_service import PermissionService
            return PermissionService.get_user_effective_permissions(
                user_id=self.id,
                include_resource_context=include_resource_context
            )
        except ImportError:
            # Fallback to legacy role-based permissions
            permissions = {}
            for role in self.roles:
                for role_perm in role.permissions:
                    perm = role_perm.permission
                    if perm and perm.is_active:
                        permissions[perm.name] = {
                            'permission': perm.name,
                            'source': f'role:{role.name}',
                            'role_id': role.id
                        }
            return permissions

    def generate_token(self, expires_in=3600):
        """
        Generate a JWT token for the user.
        
        Args:
            expires_in (int): Token expiration time in seconds (default: 1 hour)
            
        Returns:
            str: The generated JWT token
            
        Note:
            The token includes user ID, roles, and expiration time.
            Uses the app's JWT_SECRET_KEY for signing.
        """
        now = datetime.utcnow()
        payload = {
            'user_id': self.id,
            'username': self.username,
            'roles': [role.name for role in self.roles],
            'is_active': self.is_active,
            'exp': now + timedelta(seconds=expires_in),
            'iat': now
        }
        return jwt.encode(
            payload,
            current_app.config['JWT_SECRET_KEY'],
            algorithm='HS256'
        )

    @staticmethod
    def verify_token(token):
        """Verify a JWT token and return the user."""
        try:
            payload = jwt.decode(
                token,
                current_app.config['JWT_SECRET_KEY'],
                algorithms=['HS256']
            )
            user_id = payload['user_id']
            return User.query.get(user_id)
        except jwt.ExpiredSignatureError:
            return None
        except jwt.InvalidTokenError:
            return None

================
File: backend/src/routes/admin/role_admin_routes.py
================
from flask import request, jsonify
from ...services.role_service import RoleService
from ...services.permission_service import PermissionService
from src.utils.decorators import token_required, require_permission
from ...models.user import UserRole
from ...schemas.role_schemas import (
    RoleSchema,
    RoleListResponseSchema,
    RoleCreateRequestSchema,
    RoleUpdateRequestSchema,
    RoleAssignPermissionRequestSchema
)
from ...schemas.permission_schemas import PermissionSchema
from ...schemas import ErrorResponseSchema
from marshmallow import ValidationError
from src.extensions import apispec
from .routes import admin_bp

@admin_bp.route('/roles', methods=['GET', 'OPTIONS'])
@token_required
@require_permission('MANAGE_ROLES')
def get_roles():
    """
    ---
    get:
      summary: List all roles (admin, MANAGE_ROLES permission required)
      tags:
        - Admin - Roles
      responses:
        200:
          description: List of roles
          content:
            application/json:
              schema: RoleListResponseSchema
        401:
          description: Unauthorized
        403:
          description: Forbidden (missing permission)
    """
    roles, msg, status = RoleService.get_all_roles()
    schema = RoleSchema(many=True)
    return jsonify({"roles": schema.dump(roles)}), status

@admin_bp.route('/roles', methods=['POST', 'OPTIONS'])
@token_required
@require_permission('MANAGE_ROLES')
def create_role():
    """
    ---
    post:
      summary: Create a new role (admin, MANAGE_ROLES permission required)
      tags:
        - Admin - Roles
      requestBody:
        required: true
        content:
          application/json:
            schema: RoleCreateRequestSchema
      responses:
        201:
          description: Role created
          content:
            application/json:
              schema: RoleSchema
        400:
          description: Bad request
        409:
          description: Conflict
    """
    if request.method == 'OPTIONS':
        return jsonify({'message': 'OPTIONS request successful'}), 200
    data = request.get_json()
    role, msg, status = RoleService.create_role(data)
    if not role:
        return jsonify({"error": msg}), status
    schema = RoleSchema()
    return jsonify(schema.dump(role)), status

@admin_bp.route('/roles/<int:role_id>', methods=['GET'])
@token_required
@require_permission('MANAGE_ROLES')
def get_role(role_id):
    """
    ---
    get:
      summary: Get a role by ID (admin, MANAGE_ROLES permission required)
      tags:
        - Admin - Roles
      parameters:
        - in: path
          name: role_id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Role details
          content:
            application/json:
              schema: RoleSchema
        404:
          description: Not found
    """
    role, msg, status = RoleService.get_role_by_id(role_id)
    if not role:
        return jsonify({"error": msg}), status
    schema = RoleSchema()
    return jsonify(schema.dump(role)), status

@admin_bp.route('/roles/<int:role_id>', methods=['PATCH'])
@token_required
@require_permission('MANAGE_ROLES')
def update_role(role_id):
    """
    ---
    patch:
      summary: Update a role by ID (admin, MANAGE_ROLES permission required)
      tags:
        - Admin - Roles
      parameters:
        - in: path
          name: role_id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema: RoleUpdateRequestSchema
      responses:
        200:
          description: Role updated
          content:
            application/json:
              schema: RoleSchema
        400:
          description: Bad request
        404:
          description: Not found
    """
    data = request.get_json()
    role, msg, status = RoleService.update_role(role_id, data)
    if not role:
        return jsonify({"error": msg}), status
    schema = RoleSchema()
    return jsonify(schema.dump(role)), status

@admin_bp.route('/roles/<int:role_id>', methods=['DELETE'])
@token_required
@require_permission('MANAGE_ROLES')
def delete_role(role_id):
    """
    ---
    delete:
      summary: Delete a role by ID (admin, MANAGE_ROLES permission required)
      tags:
        - Admin - Roles
      parameters:
        - in: path
          name: role_id
          schema:
            type: integer
          required: true
      responses:
        204:
          description: Role deleted
        404:
          description: Not found
        409:
          description: Conflict (role is assigned to users)
    """
    deleted, msg, status = RoleService.delete_role(role_id)
    if not deleted:
        return jsonify({"error": msg}), status
    return '', 204

@admin_bp.route('/roles/<int:role_id>/permissions', methods=['GET'])
@token_required
@require_permission('MANAGE_ROLES')
def get_role_permissions(role_id):
    """
    ---
    get:
      summary: Get permissions assigned to a role (admin, MANAGE_ROLES permission required)
      tags:
        - Admin - Roles
      parameters:
        - in: path
          name: role_id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: List of permissions assigned to the role
          content:
            application/json:
              schema: PermissionSchema
        404:
          description: Role not found
    """
    permissions, msg, status = RoleService.get_role_permissions(role_id)
    if status != 200:
        return jsonify({"error": msg}), status
    schema = PermissionSchema(many=True)
    return jsonify(schema.dump(permissions)), status

@admin_bp.route('/roles/<int:role_id>/permissions', methods=['POST'])
@token_required
@require_permission('MANAGE_ROLES')
def assign_permission(role_id):
    """Assign a permission to a role.
    Requires MANAGE_ROLES permission.
    ---
    post:
      summary: Assign permission to role (admin, MANAGE_ROLES permission required)
      tags:
        - Admin - Roles
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: role_id
          schema:
            type: integer
          required: true
          description: ID of the role
      requestBody:
        required: true
        content:
          application/json:
            schema: RoleAssignPermissionRequestSchema
      responses:
        200:
          description: Permission assigned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        400:
          description: Bad request
          content:
            application/json:
              schema: ErrorResponseSchema
        401:
          description: Unauthorized
          content:
            application/json:
              schema: ErrorResponseSchema
        403:
          description: Forbidden (missing permission)
          content:
            application/json:
              schema: ErrorResponseSchema
        404:
          description: Role or permission not found
          content:
            application/json:
              schema: ErrorResponseSchema
        500:
          description: Server error
          content:
            application/json:
              schema: ErrorResponseSchema
    """
    try:
        schema = RoleAssignPermissionRequestSchema()
        data = schema.load(request.get_json())
    except ValidationError as e:
        return jsonify({
            "error": "Validation error",
            "details": e.messages
        }), 400

    role, message, status_code = RoleService.assign_permission_to_role(role_id, data['permission_id'])
    if role is not None:
        return jsonify({"message": message}), status_code
    return jsonify({"error": message}), status_code

@admin_bp.route('/roles/<int:role_id>/permissions/<int:permission_id>', methods=['DELETE'])
@token_required
@require_permission('MANAGE_ROLES')
def remove_permission(role_id, permission_id):
    """Remove a permission from a role.
    Requires MANAGE_ROLES permission.
    ---
    delete:
      summary: Remove permission from role (admin, MANAGE_ROLES permission required)
      tags:
        - Admin - Roles
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: role_id
          schema:
            type: integer
          required: true
          description: ID of the role
        - in: path
          name: permission_id
          schema:
            type: integer
          required: true
          description: ID of the permission to remove
      responses:
        200:
          description: Permission removed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema: ErrorResponseSchema
        403:
          description: Forbidden (missing permission)
          content:
            application/json:
              schema: ErrorResponseSchema
        404:
          description: Role or permission not found
          content:
            application/json:
              schema: ErrorResponseSchema
        500:
          description: Server error
          content:
            application/json:
              schema: ErrorResponseSchema
    """
    role, message, status_code = RoleService.remove_permission_from_role(role_id, permission_id)
    if role is not None:
        return jsonify({"message": message}), status_code
    return jsonify({"error": message}), status_code

================
File: backend/src/routes/admin/routes.py
================
from flask import Blueprint

admin_bp = Blueprint('admin', __name__)

# Import all admin route modules
from .user_admin_routes import *
from .permission_admin_routes import *
from .role_admin_routes import *
from .customer_admin_routes import *
from .aircraft_admin_routes import *
from .lst_admin_routes import *

# Register routes with the admin blueprint
# Note: The individual route modules should use admin_bp from this module

================
File: backend/src/routes/admin/user_admin_routes.py
================
from flask import request, jsonify, current_app
from marshmallow import ValidationError
from ...services.user_service import UserService
from src.utils.decorators import token_required, require_permission
from ...schemas.user_schemas import (
    UserUpdateRequestSchema,
    UserDetailSchema,
    ErrorResponseSchema
)
from .routes import admin_bp

# --- DIAGNOSTIC SIMPLIFICATION: All other routes temporarily commented out to isolate 404 error ---
# from ...models.user import UserRole
# from ...schemas.user_schemas import (
#     UserCreateRequestSchema,
#     UserListResponseSchema,
#     UserBriefSchema,
#     RoleBriefSchema
# )
# from ...schemas import ErrorResponseSchema
# from src.extensions import apispec

@admin_bp.route('/users', methods=['GET', 'OPTIONS'])
@token_required
@require_permission('MANAGE_USERS')
def get_users():
    if request.method == 'OPTIONS':
        return jsonify({'message': 'OPTIONS request successful'}), 200
    current_app.logger.info("--- Attempting to serve GET /api/admin/users/ via get_users ---")

    # Process query parameters for the service layer
    processed_filters = {}
    for key, value in request.args.items():
        if key == 'role_ids':
            # Use getlist for role_ids to ensure all values are captured as a list
            processed_filters[key] = request.args.getlist(key)
        else:
            # For other parameters, get the single value
            processed_filters[key] = value

    users, msg, status = UserService.get_users(processed_filters)
    if status == 200:
        schema = UserDetailSchema(many=True)
        return jsonify({"users": schema.dump(users), "message": msg}), status
    else:
        return jsonify({"error": msg}), status

@admin_bp.route('/users', methods=['POST'])
@token_required
@require_permission('MANAGE_USERS')
def create_user():
    data = request.get_json()
    # Assuming UserCreateRequestSchema was intended here
    # from ...schemas.user_schemas import UserCreateRequestSchema 
    # schema = UserCreateRequestSchema()
    # try:
    #     validated_data = schema.load(data)
    # except ValidationError as err:
    #     return jsonify({"error": "Invalid input", "messages": err.messages}), 400
    
    # For now, pass raw data to service, assuming service handles validation
    user, msg, status = UserService.create_user(data)
    
    if status == 201: # Created
        # Assuming UserDetailSchema for response
        response_schema = UserDetailSchema()
        return jsonify({"user": response_schema.dump(user), "message": msg}), status
    elif status == 400 or status == 409: # Bad request or Conflict
        return jsonify({"error": msg}), status
    else: # Other errors (e.g. 500)
        return jsonify({"error": "User creation failed", "details": msg}), status

@admin_bp.route('/users/<int:user_id>', methods=['PATCH'])
@token_required
@require_permission('MANAGE_USERS')
def update_user(user_id):
    """Update user details."""
    data = request.get_json()
    if not data:
        return jsonify({"error": "Request body cannot be empty"}), 400

    # Remove 'id' from data if present, as it's not part of UserUpdateRequestSchema
    # and user_id is passed via URL path
    data.pop('id', None)

    schema = UserUpdateRequestSchema()
    try:
        validated_data = schema.load(data)
    except ValidationError as err:
        return jsonify({"error": "Invalid input", "messages": err.messages}), 400

    user, msg, status = UserService.update_user(user_id, validated_data)

    if status == 200: # OK
        response_schema = UserDetailSchema()
        return jsonify({"user": response_schema.dump(user), "message": msg}), status
    elif status == 403: # Forbidden (e.g., self-update prevention)
         return jsonify({"error": "Forbidden", "details": msg}), status
    elif status == 404: # Not Found
        return jsonify({"error": "Not Found", "details": msg}), status
    elif status == 409: # Conflict (e.g., email exists)
        return jsonify({"error": "Conflict", "details": msg}), status
    elif status == 400: # Bad Request (e.g., invalid role id)
        return jsonify({"error": "Bad Request", "details": msg}), status
    else: # Other errors (e.g. 500)
        return jsonify({"error": "User update failed", "details": msg}), status

@admin_bp.route("/users/<int:user_id>", methods=["GET"])
@token_required
@require_permission("MANAGE_USERS")
def get_user(user_id):
    """Get a user by ID (admin endpoint)."""
    user, msg, status = UserService.get_user_by_id(user_id)
    if status == 200:
        response_schema = UserDetailSchema()
        return jsonify({"user": response_schema.dump(user), "message": msg}), status
    else:
        return jsonify({"error": msg}), status


@admin_bp.route('/users/<int:user_id>', methods=['DELETE'])
@token_required
@require_permission('MANAGE_USERS')
def delete_user(user_id):
    """Deactivate (soft delete) a user."""
    success, msg, status = UserService.delete_user(user_id)

    if success:
        return jsonify({"message": msg}), status
    elif status == 403: # Forbidden (e.g., self-delete prevention)
        return jsonify({"error": "Forbidden", "details": msg}), status
    elif status == 404: # Not Found
        return jsonify({"error": "Not Found", "details": msg}), status
    else: # Other errors (e.g. 500)
        return jsonify({"error": "User deactivation failed", "details": msg}), status

================
File: backend/src/routes/auth_routes.py
================
from flask import Blueprint, request, jsonify, current_app, g
from ..services.auth_service import AuthService
from flask_jwt_extended import create_access_token
from ..schemas import (
    RegisterRequestSchema,
    RegisterResponseSchema,
    LoginRequestSchema,
    LoginSuccessResponseSchema,
    ErrorResponseSchema,
    UserPermissionsResponseSchema
)
from ..models.user import User
from ..models.role import Role
from ..extensions import db, jwt
from marshmallow import ValidationError
from functools import wraps
import time
from datetime import datetime, timedelta
import jwt as pyjwt
from src.utils.rate_limiting import rate_limit
from flask import g
from ..utils.decorators import token_required

auth_bp = Blueprint('auth', __name__)

# Rate limiting state
login_attempts = {}
RATE_LIMIT = 5  # attempts
RATE_WINDOW = 300  # seconds (5 minutes)

def reset_rate_limits():
    """Reset rate limiting state (for testing)."""
    global login_attempts
    login_attempts = {}

@auth_bp.route('/register', methods=['POST', 'OPTIONS'])
def register():
    """Register a new user.
    ---
    tags:
      - Authentication
    requestBody:
      required: true
      content:
        application/json:
          schema: RegisterRequestSchema
    responses:
      201:
        description: User registered successfully
        content:
          application/json:
            schema: RegisterResponseSchema
      400:
        description: Bad Request (e.g., missing fields, invalid email/password format)
        content:
          application/json:
            schema: ErrorResponseSchema
      409:
        description: Conflict (e.g., email already registered)
        content:
          application/json:
            schema: ErrorResponseSchema
    """
    if request.method == 'OPTIONS':
        return jsonify({'message': 'OPTIONS request successful'}), 200

    schema = RegisterRequestSchema()
    try:
        data = schema.load(request.json)
    except:
        return jsonify({'error': 'Invalid request data'}), 400

    if User.query.filter_by(email=data['email']).first():
        return jsonify({'error': 'Email already registered'}), 409

    user = User(
        username=data['username'],
        email=data['email'],
        name=data['name'],
        is_active=True
    )
    user.set_password(data['password'])

    db.session.add(user)
    db.session.commit()

    return jsonify({
        'message': 'User registered successfully',
        'user': {
            'id': user.id,
            'email': user.email,
            'name': user.name
        }
    }), 201

@auth_bp.route('/login', methods=['POST', 'OPTIONS'])
@rate_limit(limit=5, window=300)
def login():
    """Login endpoint that returns a JWT token on successful authentication
    ---
    tags:
      - Authentication
    requestBody:
      required: true
      content:
        application/json:
          schema: LoginRequestSchema
    responses:
      200:
        description: Login successful
        content:
          application/json:
            schema: LoginSuccessResponseSchema
      400:
        description: Bad Request (e.g., missing fields)
        content:
          application/json:
            schema: ErrorResponseSchema
      401:
        description: Unauthorized (e.g., invalid credentials)
        content:
          application/json:
            schema: ErrorResponseSchema
      429:
        description: Too Many Requests (rate limit exceeded)
        content:
          application/json:
            schema: ErrorResponseSchema
    """
    if request.method == 'OPTIONS':
        return jsonify({'message': 'OPTIONS request successful'}), 200

    try:
        # Validate request data
        schema = LoginRequestSchema()
        data = request.get_json()
        
        if not data:
            return jsonify({
                'error': 'Missing required fields',
                'details': 'Request body is empty'
            }), 400
            
        try:
            data = schema.load(data)
        except ValidationError as err:
            return jsonify({
                'error': 'Missing required fields',
                'details': err.messages
            }), 400
        
        # Find user by email
        user = User.query.filter_by(email=data['email']).first()
        
        if not user:
            return jsonify({'error': 'Invalid email or password'}), 401
            
        if not user.is_active:
            return jsonify({'error': 'User account is inactive'}), 401
            
        # Check password
        if not user.check_password(data['password']):
            return jsonify({'error': 'Invalid email or password'}), 401
            
        # Generate access token with user roles and status
        access_token = create_access_token(
            identity=str(user.id),
            additional_claims={
                'username': user.username,
                'roles': [role.name for role in user.roles],
                'is_active': user.is_active
            }
        )
        
        # Construct user payload for the response, ensuring roles is a list of strings
        # and created_at is an ISO formatted string, to match frontend expectations.
        user_payload_for_response = {
            'id': user.id,
            'email': user.email,
            'username': user.username,
            'name': user.name,
            'roles': [role.name for role in user.roles], # Ensure roles is a list of strings
            'is_active': user.is_active,
            'created_at': user.created_at.isoformat() if user.created_at else None
        }
        
        response_schema = LoginSuccessResponseSchema()
        return response_schema.dump({
            'user': user_payload_for_response,
            'token': access_token
        }), 200
        
    except Exception as e:
        import traceback
        tb = traceback.format_exc()
        print(f"[LOGIN ERROR] {str(e)}\nTraceback:\n{tb}")
        return jsonify({
            'error': 'Internal server error',
            'details': str(e)
        }), 500 

@auth_bp.route('/me/permissions', methods=['GET'])
@token_required
def get_my_permissions():
    """Get the effective permissions for the currently authenticated user.
    ---
    tags:
      - Authentication
    security:
      - bearerAuth: []
    responses:
      200:
        description: List of effective permission strings for the user.
        content:
          application/json:
            schema: UserPermissionsResponseSchema
      401:
        description: Unauthorized (invalid/missing token)
        content:
          application/json:
            schema: ErrorResponseSchema
      500:
        description: Server error while retrieving permissions
        content:
          application/json:
            schema: ErrorResponseSchema
    """
    current_user = g.current_user
    permissions, message, status_code = AuthService.get_user_effective_permissions(current_user)
    if permissions is not None:
        result = UserPermissionsResponseSchema().dump({
            "message": message,
            "permissions": permissions
        })
        return jsonify(result), status_code
    else:
        return jsonify({"error": message}), status_code

================
File: backend/src/routes/fuel_truck_routes.py
================
from flask import Blueprint, request, jsonify, g
from ..utils.decorators import token_required, require_permission
from ..models.user import UserRole
from ..services import FuelTruckService
from ..schemas import (
    FuelTruckListResponseSchema,
    FuelTruckCreateRequestSchema,
    FuelTruckUpdateRequestSchema,
    FuelTruckCreateResponseSchema,
    FuelTruckSchema,
    ErrorResponseSchema
)

# Create the blueprint for fuel truck routes
truck_bp = Blueprint('truck_bp', __name__, url_prefix='/api/fuel-trucks')

@truck_bp.route('', methods=['GET', 'OPTIONS'])
@truck_bp.route('/', methods=['GET', 'OPTIONS'])
@token_required
@require_permission('VIEW_FUEL_TRUCKS')
def get_fuel_trucks():
    if request.method == 'OPTIONS':
        return jsonify({'message': 'OPTIONS request successful'}), 200
    """Get a list of fuel trucks.
    Requires VIEW_FUEL_TRUCKS permission. Supports filtering by active status.
    ---
    tags:
      - Fuel Trucks
    security:
      - bearerAuth: []
    parameters:
      - in: query
        name: is_active
        schema:
          type: string
          enum: ['true', 'false']
        required: false
        description: Filter trucks by active status ('true' or 'false')
    responses:
      200:
        description: List of fuel trucks retrieved successfully
        content:
          application/json:
            schema: FuelTruckListResponseSchema
      400:
        description: Bad Request (e.g., invalid filter value)
        content:
          application/json:
            schema: ErrorResponseSchema
      401:
        description: Unauthorized (invalid/missing token)
        content:
          application/json:
            schema: ErrorResponseSchema
      403:
        description: Forbidden (missing permission)
        content:
          application/json:
            schema: ErrorResponseSchema
      500:
        description: Server error (e.g., database error)
        content:
          application/json:
            schema: ErrorResponseSchema
    """
    # Extract filter parameters from request.args
    filters = {
        'is_active': request.args.get('is_active', None, type=str)
    }
    filters = {k: v for k, v in filters.items() if v is not None}

    # Call FuelTruckService to get trucks with filters
    trucks, message, status_code = FuelTruckService.get_trucks(filters=filters)

    if trucks is not None:
        trucks_list = [truck.to_dict() for truck in trucks]
        response = {
            "message": message,
            "fuel_trucks": trucks_list
        }
        return jsonify(response), status_code
    else:
        return jsonify({"error": message}), status_code

@truck_bp.route('/', methods=['POST'])
@token_required
@require_permission('MANAGE_FUEL_TRUCKS')
def create_fuel_truck():
    """Create a new fuel truck.
    Requires MANAGE_FUEL_TRUCKS permission.
    ---
    tags:
      - Fuel Trucks
    security:
      - bearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema: FuelTruckCreateRequestSchema
    responses:
      201:
        description: Fuel truck created successfully
        content:
          application/json:
            schema: FuelTruckCreateResponseSchema
      400:
        description: Bad Request (e.g., validation error, duplicate truck number)
        content:
          application/json:
            schema: ErrorResponseSchema
      401:
        description: Unauthorized (invalid/missing token)
        content:
          application/json:
            schema: ErrorResponseSchema
      403:
        description: Forbidden (missing permission)
        content:
          application/json:
            schema: ErrorResponseSchema
      500:
        description: Server error (e.g., database error)
        content:
          application/json:
            schema: ErrorResponseSchema
    """
    # Validate request data
    schema = FuelTruckCreateRequestSchema()
    try:
        data = schema.load(request.get_json())
    except Exception as e:
        return jsonify({"error": str(e)}), 400

    # Call service to create truck
    truck, message, status_code = FuelTruckService.create_truck(data)

    if truck is not None:
        response = {
            "message": message,
            "fuel_truck": FuelTruckSchema().dump(truck)
        }
        return jsonify(response), status_code
    else:
        return jsonify({"error": message}), status_code

@truck_bp.route('/<int:truck_id>', methods=['GET'])
@token_required
@require_permission('VIEW_FUEL_TRUCKS')
def get_fuel_truck(truck_id):
    """Get a fuel truck by ID.
    Requires VIEW_FUEL_TRUCKS permission.
    ---
    tags:
      - Fuel Trucks
    security:
      - bearerAuth: []
    parameters:
      - in: path
        name: truck_id
        schema:
          type: integer
        required: true
        description: ID of the fuel truck to retrieve
    responses:
      200:
        description: Fuel truck retrieved successfully
        content:
          application/json:
            schema: FuelTruckSchema
      401:
        description: Unauthorized
        content:
          application/json:
            schema: ErrorResponseSchema
      403:
        description: Forbidden (missing permission)
        content:
          application/json:
            schema: ErrorResponseSchema
      404:
        description: Fuel truck not found
        content:
          application/json:
            schema: ErrorResponseSchema
      500:
        description: Server error
        content:
          application/json:
            schema: ErrorResponseSchema
    """
    truck, message, status_code = FuelTruckService.get_truck_by_id(truck_id)
    if truck is not None:
        return jsonify({
            "message": message,
            "fuel_truck": FuelTruckSchema().dump(truck)
        }), status_code
    else:
        return jsonify({"error": message}), status_code

@truck_bp.route('/<int:truck_id>', methods=['PATCH'])
@token_required
@require_permission('MANAGE_FUEL_TRUCKS')
def update_fuel_truck(truck_id):
    """Update a fuel truck.
    Requires MANAGE_FUEL_TRUCKS permission.
    ---
    tags:
      - Fuel Trucks
    security:
      - bearerAuth: []
    parameters:
      - in: path
        name: truck_id
        schema:
          type: integer
        required: true
        description: ID of the fuel truck to update
    requestBody:
      required: true
      content:
        application/json:
          schema: FuelTruckUpdateRequestSchema
    responses:
      200:
        description: Fuel truck updated successfully
        content:
          application/json:
            schema: FuelTruckSchema
      400:
        description: Bad Request (validation error)
        content:
          application/json:
            schema: ErrorResponseSchema
      401:
        description: Unauthorized
        content:
          application/json:
            schema: ErrorResponseSchema
      403:
        description: Forbidden (missing permission)
        content:
          application/json:
            schema: ErrorResponseSchema
      404:
        description: Fuel truck not found
        content:
          application/json:
            schema: ErrorResponseSchema
      500:
        description: Server error
        content:
          application/json:
            schema: ErrorResponseSchema
    """
    schema = FuelTruckUpdateRequestSchema()
    try:
        data = schema.load(request.get_json())
    except Exception as e:
        return jsonify({"error": str(e)}), 400
    truck, message, status_code = FuelTruckService.update_truck(truck_id, data)
    if truck is not None:
        return jsonify({
            "message": message,
            "fuel_truck": FuelTruckSchema().dump(truck)
        }), status_code
    else:
        return jsonify({"error": message}), status_code

@truck_bp.route('/<int:truck_id>', methods=['DELETE'])
@token_required
@require_permission('MANAGE_FUEL_TRUCKS')
def delete_fuel_truck(truck_id):
    """Delete a fuel truck by ID.
    Requires MANAGE_FUEL_TRUCKS permission.
    ---
    tags:
      - Fuel Trucks
    security:
      - bearerAuth: []
    parameters:
      - in: path
        name: truck_id
        schema:
          type: integer
        required: true
        description: ID of the fuel truck to delete
    responses:
      200:
        description: Fuel truck deleted successfully
      401:
        description: Unauthorized
      403:
        description: Forbidden (missing permission)
      404:
        description: Fuel truck not found
      500:
        description: Server error
    """
    success, message, status_code = FuelTruckService.delete_truck(truck_id)
    if success:
        return jsonify({"message": message}), status_code
    else:
        return jsonify({"error": message}), status_code

================
File: backend/src/schemas/__init__.py
================
from .auth_schemas import (
    RegisterRequestSchema, UserResponseSchema, RegisterResponseSchema,
    LoginRequestSchema, LoginSuccessResponseSchema,
    UserPermissionsResponseSchema
)

from .fuel_order_schemas import (
    FuelOrderCreateRequestSchema, FuelOrderStatusUpdateRequestSchema,
    FuelOrderCompleteRequestSchema, FuelOrderResponseSchema,
    FuelOrderBriefResponseSchema, FuelOrderCreateResponseSchema,
    FuelOrderUpdateResponseSchema, PaginationSchema, FuelOrderListResponseSchema,
    OrderStatusCountsSchema, OrderStatusCountsResponseSchema
) # Ensure all schemas are imported

from .fuel_truck_schemas import (
    FuelTruckSchema, FuelTruckListResponseSchema,
    FuelTruckCreateRequestSchema, FuelTruckUpdateRequestSchema,
    FuelTruckCreateResponseSchema
)

from .admin_schemas import (
    AdminAircraftSchema, AdminAircraftListResponseSchema,
    AdminCustomerSchema, AdminCustomerListResponseSchema
)

from .role_schemas import (
    RoleSchema, RoleListResponseSchema,
    RoleCreateRequestSchema, RoleUpdateRequestSchema,
    RoleAssignPermissionRequestSchema
)

from .permission_schemas import PermissionSchema

from .user_schemas import (
    UserCreateRequestSchema,
    UserUpdateRequestSchema,
    UserDetailSchema,
    UserListResponseSchema,
    ErrorResponseSchema
)

from marshmallow import Schema, fields, validate

__all__ = [
    'RegisterRequestSchema', 'UserResponseSchema', 'RegisterResponseSchema',
    'LoginRequestSchema', 'LoginSuccessResponseSchema',
    'UserPermissionsResponseSchema',
    'FuelOrderCreateRequestSchema', 'FuelOrderStatusUpdateRequestSchema',
    'FuelOrderCompleteRequestSchema', 'FuelOrderResponseSchema',
    'FuelOrderBriefResponseSchema', 'FuelOrderCreateResponseSchema',
    'FuelOrderUpdateResponseSchema', 'PaginationSchema', 'FuelOrderListResponseSchema',
    'FuelTruckSchema', 'FuelTruckListResponseSchema',
    'FuelTruckCreateRequestSchema', 'FuelTruckUpdateRequestSchema',
    'FuelTruckCreateResponseSchema',
    'UserCreateRequestSchema',
    'UserUpdateRequestSchema',
    'UserDetailSchema',
    'UserListResponseSchema',
    'ErrorResponseSchema',
    'OrderStatusCountsSchema', 'OrderStatusCountsResponseSchema',
    'AdminAircraftSchema', 'AdminAircraftListResponseSchema',
    'AdminCustomerSchema', 'AdminCustomerListResponseSchema',
    'RoleSchema', 'RoleListResponseSchema',
    'RoleCreateRequestSchema', 'RoleUpdateRequestSchema',
    'RoleAssignPermissionRequestSchema',
    'PermissionSchema'
] # Ensure schemas are exported

================
File: backend/src/schemas/auth_schemas.py
================
from marshmallow import Schema, fields, validate

# Import RoleBriefSchema from user_schemas for consistency
from .user_schemas import RoleBriefSchema

class RegisterRequestSchema(Schema):
    """Schema for user registration request"""
    email = fields.Email(required=True)
    password = fields.String(required=True, validate=validate.Length(min=8))
    username = fields.String(required=False)  # Login username field
    fullName = fields.String(required=False, attribute="name")  # Full name field, maps to User.name

class UserResponseSchema(Schema):
    id = fields.Int(dump_only=True)
    username = fields.Str(dump_only=True)
    fullName = fields.Str(dump_only=True, attribute="name")  # Maps to User.name in database
    email = fields.Email(dump_only=True)
    roles = fields.List(fields.Nested(RoleBriefSchema), dump_only=True)  # Changed from single role string to list
    is_active = fields.Bool(dump_only=True)
    created_at = fields.DateTime(dump_only=True)

class RegisterResponseSchema(Schema):
    """Schema for user registration response"""
    message = fields.String(required=True)
    user = fields.Dict(keys=fields.String(), values=fields.Raw(), required=True)

class LoginRequestSchema(Schema):
    """Schema for login request"""
    email = fields.Email(required=True)
    password = fields.String(required=True)

class LoginSuccessResponseSchema(Schema):
    """Schema for successful login response"""
    token = fields.String(required=True)
    user = fields.Dict(keys=fields.String(), values=fields.Raw(), required=True)

class ErrorResponseSchema(Schema):
    """Schema for error responses"""
    error = fields.String(required=True)
    details = fields.Dict(keys=fields.String(), values=fields.Raw(), required=False)

# --- New schema for user permissions response ---
class UserPermissionsResponseSchema(Schema):
    message = fields.Str(dump_only=True)
    permissions = fields.List(fields.Str(), dump_only=True)

================
File: backend/src/schemas/permission_schemas.py
================
from marshmallow import Schema, fields

class PermissionSchema(Schema):
    """Schema for permission responses."""
    id = fields.Integer(dump_only=True)
    name = fields.String(dump_only=True)
    description = fields.String(dump_only=True)
    category = fields.String(dump_only=True)
    created_at = fields.DateTime(dump_only=True)

================
File: backend/src/schemas/role_schemas.py
================
from marshmallow import Schema, fields, post_dump

class RoleSchema(Schema):
    """Schema for role responses."""
    id = fields.Integer(dump_only=True)
    name = fields.String(required=True)
    description = fields.String(required=False, allow_none=True)
    created_at = fields.DateTime(dump_only=True)
    permissions = fields.Method("get_permissions", dump_only=True)
    
    def get_permissions(self, obj):
        """Get permission IDs for the role."""
        try:
            # Handle dynamic relationship - get all permissions and return their IDs
            return [permission.id for permission in obj.permissions.all()]
        except Exception:
            return []

class RoleCreateRequestSchema(Schema):
    """Schema for role creation requests."""
    name = fields.String(required=True)
    description = fields.String(required=False, allow_none=True)

class RoleUpdateRequestSchema(Schema):
    """Schema for role update requests."""
    name = fields.String(required=False)
    description = fields.String(required=False, allow_none=True)

class RoleListResponseSchema(Schema):
    """Schema for role list responses."""
    message = fields.String(required=True)
    roles = fields.Nested(RoleSchema, many=True, required=True)

class RoleAssignPermissionRequestSchema(Schema):
    """Schema for assigning a permission to a role."""
    permission_id = fields.Integer(required=True)

================
File: backend/src/services/role_service.py
================
from typing import Tuple, Any, List, Optional
from sqlalchemy.exc import SQLAlchemyError, IntegrityError
from src.app import db
from src.models import Role, Permission

class RoleService:
    """Service class for managing roles and their permissions."""

    @classmethod
    def get_all_roles(cls) -> Tuple[List[Role], str, int]:
        """Retrieve all roles ordered by name."""
        try:
            roles = Role.query.order_by(Role.name.asc()).all()
            return roles, "Roles retrieved successfully", 200
        except SQLAlchemyError as e:
            db.session.rollback()
            return [], f"Database error: {str(e)}", 500

    @classmethod
    def create_role(cls, data: dict) -> Tuple[Optional[Role], str, int]:
        """Create a new role with the provided data."""
        if not data.get('name'):
            return None, "Role name is required", 400

        try:
            # Check for existing role with same name
            existing_role = Role.query.filter_by(name=data['name']).first()
            if existing_role:
                return None, f"Role with name '{data['name']}' already exists", 409

            new_role = Role(
                name=data['name'],
                description=data.get('description')
            )
            db.session.add(new_role)
            db.session.commit()
            return new_role, "Role created successfully", 201
        except IntegrityError:
            db.session.rollback()
            return None, "Role name must be unique", 409
        except SQLAlchemyError as e:
            db.session.rollback()
            return None, f"Database error: {str(e)}", 500

    @classmethod
    def get_role_by_id(cls, role_id: int) -> Tuple[Optional[Role], str, int]:
        """Retrieve a role by its ID."""
        try:
            role = Role.query.get(role_id)
            if not role:
                return None, f"Role with ID {role_id} not found", 404
            return role, "Role retrieved successfully", 200
        except SQLAlchemyError as e:
            return None, f"Database error: {str(e)}", 500

    @classmethod
    def update_role(cls, role_id: int, data: dict) -> Tuple[Optional[Role], str, int]:
        """Update an existing role's information."""
        try:
            role = Role.query.get(role_id)
            if not role:
                return None, f"Role with ID {role_id} not found", 404

            if 'name' in data:
                # Check for duplicate name, excluding current role
                existing_role = Role.query.filter(
                    Role.name == data['name'],
                    Role.id != role_id
                ).first()
                if existing_role:
                    return None, f"Role with name '{data['name']}' already exists", 409
                role.name = data['name']

            if 'description' in data:
                role.description = data['description']

            db.session.commit()
            return role, "Role updated successfully", 200
        except IntegrityError:
            db.session.rollback()
            return None, "Role name must be unique", 409
        except SQLAlchemyError as e:
            db.session.rollback()
            return None, f"Database error: {str(e)}", 500

    @classmethod
    def delete_role(cls, role_id: int) -> Tuple[bool, str, int]:
        """Delete a role and its permission assignments."""
        try:
            role = Role.query.get(role_id)
            if not role:
                return False, f"Role with ID {role_id} not found", 404

            # Check if any users are assigned this role
            if role.users.first():
                return False, "Cannot delete role: Users are currently assigned to this role", 409

            # Clear permission assignments
            role.permissions = []
            db.session.delete(role)
            db.session.commit()
            return True, "Role deleted successfully", 200
        except SQLAlchemyError as e:
            db.session.rollback()
            return False, f"Database error: {str(e)}", 500

    @classmethod
    def get_role_permissions(cls, role_id: int) -> Tuple[List[Permission], str, int]:
        """Get all permissions assigned to a role."""
        try:
            role = Role.query.get(role_id)
            if not role:
                return [], f"Role with ID {role_id} not found", 404
            
            # Since permissions is a dynamic relationship, we need to call .all() to get the actual list
            permissions = list(role.permissions.all())
            return permissions, "Permissions retrieved successfully", 200
        except SQLAlchemyError as e:
            return [], f"Database error: {str(e)}", 500

    @classmethod
    def assign_permission_to_role(cls, role_id: int, permission_id: int) -> Tuple[Optional[Role], str, int]:
        """Assign a permission to a role."""
        try:
            role = Role.query.get(role_id)
            if not role:
                return None, f"Role with ID {role_id} not found", 404

            permission = Permission.query.get(permission_id)
            if not permission:
                return None, f"Permission with ID {permission_id} not found", 404

            # Check if permission is already assigned
            if permission in role.permissions:
                return role, "Permission already assigned to role", 200

            role.permissions.append(permission)
            db.session.commit()
            return role, "Permission assigned successfully", 200
        except SQLAlchemyError as e:
            db.session.rollback()
            return None, f"Database error: {str(e)}", 500

    @classmethod
    def remove_permission_from_role(cls, role_id: int, permission_id: int) -> Tuple[Optional[Role], str, int]:
        """Remove a permission from a role."""
        try:
            role = Role.query.get(role_id)
            if not role:
                return None, f"Role with ID {role_id} not found", 404

            permission = Permission.query.get(permission_id)
            if not permission:
                return None, f"Permission with ID {permission_id} not found", 404

            # Check if permission is actually assigned
            if permission not in role.permissions:
                return role, "Permission not assigned to role", 200

            role.permissions.remove(permission)
            db.session.commit()
            return role, "Permission removed successfully", 200
        except SQLAlchemyError as e:
            db.session.rollback()
            return None, f"Database error: {str(e)}", 500

================
File: backend/src/seeds.py
================
from src.extensions import db
from src.models import Permission, Role, User
from datetime import datetime
from sqlalchemy import text

# --- Data Definitions ---
all_permissions = [
    # Fuel Orders
    {'name': 'CREATE_ORDER', 'description': 'Allows creating new fuel orders', 'category': 'fuel_orders'},
    {'name': 'VIEW_ASSIGNED_ORDERS', 'description': 'Allows viewing orders assigned to self', 'category': 'fuel_orders'},
    {'name': 'VIEW_ALL_ORDERS', 'description': 'Allows viewing all fuel orders', 'category': 'fuel_orders'},
    {'name': 'UPDATE_OWN_ORDER_STATUS', 'description': 'Allows LST to update status of own orders', 'category': 'fuel_orders'},
    {'name': 'COMPLETE_OWN_ORDER', 'description': 'Allows LST to complete own orders', 'category': 'fuel_orders'},
    {'name': 'REVIEW_ORDERS', 'description': 'Allows CSR/Admin to mark orders as reviewed', 'category': 'fuel_orders'},
    {'name': 'EXPORT_ORDERS_CSV', 'description': 'Allows exporting order data to CSV', 'category': 'fuel_orders'},
    {'name': 'VIEW_ORDER_STATS', 'description': 'Allows viewing order statistics', 'category': 'fuel_orders'},
    {'name': 'EDIT_FUEL_ORDER', 'description': 'Allows editing fuel order details', 'category': 'fuel_orders'},
    {'name': 'DELETE_FUEL_ORDER', 'description': 'Allows deleting fuel orders', 'category': 'fuel_orders'},
    {'name': 'PERFORM_FUELING_TASK', 'description': 'Allows performing fueling operations and task management', 'category': 'fuel_orders'},
    
    # Users
    {'name': 'VIEW_USERS', 'description': 'Allows viewing user list', 'category': 'users'},
    {'name': 'MANAGE_USERS', 'description': 'Allows creating, updating, deleting users and assigning roles', 'category': 'users'},
    
    # Fuel Trucks (renamed for consistency)
    {'name': 'VIEW_FUEL_TRUCKS', 'description': 'Allows viewing fuel truck list', 'category': 'fuel_trucks'},
    {'name': 'MANAGE_FUEL_TRUCKS', 'description': 'Allows creating, updating, deleting fuel trucks', 'category': 'fuel_trucks'},
    
    # Aircraft
    {'name': 'VIEW_AIRCRAFT', 'description': 'Allows viewing aircraft list', 'category': 'aircraft'},
    {'name': 'MANAGE_AIRCRAFT', 'description': 'Allows creating, updating, deleting aircraft', 'category': 'aircraft'},
    
    # Customers
    {'name': 'VIEW_CUSTOMERS', 'description': 'Allows viewing customer list', 'category': 'customers'},
    {'name': 'MANAGE_CUSTOMERS', 'description': 'Allows creating, updating, deleting customers', 'category': 'customers'},
    
    # System
    {'name': 'MANAGE_ROLES', 'description': 'Allows managing roles and their permissions', 'category': 'system'},
    {'name': 'VIEW_PERMISSIONS', 'description': 'Allows viewing available system permissions', 'category': 'system'},
    {'name': 'MANAGE_SETTINGS', 'description': 'Allows managing global application settings', 'category': 'system'},
    
    # Dashboard Access Permissions
    {'name': 'ACCESS_ADMIN_DASHBOARD', 'description': 'Allows access to admin dashboard', 'category': 'dashboard_access'},
    {'name': 'ACCESS_CSR_DASHBOARD', 'description': 'Allows access to CSR dashboard', 'category': 'dashboard_access'},
    {'name': 'ACCESS_FUELER_DASHBOARD', 'description': 'Allows access to fueler dashboard', 'category': 'dashboard_access'},
    {'name': 'ACCESS_MEMBER_DASHBOARD', 'description': 'Allows access to member dashboard', 'category': 'dashboard_access'},
    
    # Billing/Fees Permissions
    {'name': 'VIEW_BILLING_INFO', 'description': 'Allows viewing billing information and fee calculations', 'category': 'billing'},
    {'name': 'CALCULATE_FEES', 'description': 'Allows calculating fees and charges', 'category': 'billing'},
    
    # Fuel Receipt System Permissions
    {'name': 'VIEW_ALL_RECEIPTS', 'description': 'Allows viewing all fuel receipts', 'category': 'receipts'},
    {'name': 'VIEW_OWN_RECEIPTS', 'description': 'Allows viewing own fuel receipts', 'category': 'receipts'},
    {'name': 'MANAGE_RECEIPTS', 'description': 'Allows creating, editing, and managing fuel receipts', 'category': 'receipts'},
    {'name': 'EXPORT_RECEIPTS_CSV', 'description': 'Allows exporting receipt data to CSV', 'category': 'receipts'},
]

default_roles = [
    {"name": "System Administrator", "description": "Full system access"},
    {"name": "Customer Service Representative", "description": "Handles customer orders and assignments"},
    {"name": "Line Service Technician", "description": "Executes fuel orders and updates status"},
    {"name": "Member", "description": "Basic member with limited view access"},
]

role_permission_mapping = {
    'System Administrator': [p['name'] for p in all_permissions],  # All permissions
    'Customer Service Representative': [
        # Dashboard Access
        'ACCESS_CSR_DASHBOARD',
        # Fuel Orders
        'CREATE_ORDER', 'VIEW_ALL_ORDERS', 'REVIEW_ORDERS', 'EXPORT_ORDERS_CSV',
        'VIEW_ORDER_STATS', 'EDIT_FUEL_ORDER',
        # Users and Resources
        'VIEW_USERS', 'VIEW_FUEL_TRUCKS', 'VIEW_AIRCRAFT', 'VIEW_CUSTOMERS',
        'MANAGE_AIRCRAFT', 'MANAGE_CUSTOMERS',
        # System
        'VIEW_PERMISSIONS',
        # Billing
        'VIEW_BILLING_INFO'
    ],
    'Line Service Technician': [
        # Dashboard Access
        'ACCESS_FUELER_DASHBOARD',
        # Fuel Orders
        'CREATE_ORDER', 'VIEW_ASSIGNED_ORDERS', 'UPDATE_OWN_ORDER_STATUS', 'COMPLETE_OWN_ORDER',
        'VIEW_ORDER_STATS', 'PERFORM_FUELING_TASK',
        # Receipts
        'VIEW_OWN_RECEIPTS'
    ],
    'Member': [
        # Dashboard Access
        'ACCESS_MEMBER_DASHBOARD',
        # Limited View Access
        'VIEW_ORDER_STATS', 'VIEW_CUSTOMERS', 'VIEW_AIRCRAFT',
        # Receipts
        'VIEW_OWN_RECEIPTS'
    ]
}

def seed_data():
    """Seeds the database with initial permissions, roles, assignments, and admin user."""
    print("Starting database seeding...")
    try:
        # Clear existing data respecting FK constraints (in correct order)
        print("Clearing existing PBAC data (if any)...")
        
        # Clear all dependent tables first (in order of dependencies)
        db.session.execute(text('DELETE FROM user_permission_group_assignments'))
        db.session.execute(text('DELETE FROM permission_group_permissions'))
        db.session.execute(text('DELETE FROM user_permission_groups'))
        db.session.execute(text('DELETE FROM permission_groups'))
        db.session.execute(text('DELETE FROM user_permissions'))
        db.session.execute(text('DELETE FROM user_roles'))
        db.session.execute(text('DELETE FROM role_permissions'))
        db.session.execute(text('DELETE FROM fuel_orders'))
        db.session.execute(text('DELETE FROM users'))
        db.session.execute(text('DELETE FROM roles'))
        db.session.execute(text('DELETE FROM permissions'))
        db.session.commit()

        # Seed Permissions
        print("Seeding Permissions...")
        permission_objects = [Permission(name=p['name'], description=p.get('description'), category=p.get('category', 'system')) for p in all_permissions]
        db.session.add_all(permission_objects)
        db.session.commit()
        print(f"Seeded {len(permission_objects)} permissions.")

        # Seed Roles
        print("Seeding Roles...")
        role_objects = [Role(name=r['name'], description=r.get('description')) for r in default_roles]
        db.session.add_all(role_objects)
        db.session.commit()
        print(f"Seeded {len(role_objects)} roles.")

        # Assign Permissions to Roles
        print("Assigning Permissions to Roles...")
        permission_map = {p.name: p for p in Permission.query.all()}
        role_map = {r.name: r for r in Role.query.all()}
        assignments_count = 0
        for role_name, permission_names in role_permission_mapping.items():
            role = role_map.get(role_name)
            if role:
                for perm_name in permission_names:
                    permission = permission_map.get(perm_name)
                    if permission and permission not in role.permissions:
                        role.permissions.append(permission)
                        assignments_count += 1
        db.session.commit()
        print(f"Assigned {assignments_count} permissions to roles.")

        # Create Default Users
        print("Creating Default Users...")
        default_users = [
            {
                'email': 'admin@fbolaunchpad.com',
                'username': 'admin',
                'name': 'Admin User',
                'password': 'Admin123!',
                'role': 'System Administrator'
            },
            {
                'email': 'csr@fbolaunchpad.com',
                'username': 'csr',
                'name': 'CSR User',
                'password': 'CSR123!',
                'role': 'Customer Service Representative'
            },
            {
                'email': 'fueler@fbolaunchpad.com',
                'username': 'fueler',
                'name': 'Fueler User',
                'password': 'Fueler123!',
                'role': 'Line Service Technician'
            },
            {
                'email': 'member@fbolaunchpad.com',
                'username': 'member',
                'name': 'Member User',
                'password': 'Member123!',
                'role': 'Member'
            }
        ]

        users_created = 0
        for user_data in default_users:
            if not User.query.filter_by(email=user_data['email']).first():
                user_role = role_map.get(user_data['role'])
                if user_role:
                    user = User(
                        email=user_data['email'],
                        username=user_data['username'],
                        name=user_data['name'],
                        is_active=True
                    )
                    user.set_password(user_data['password'])
                    user.roles.append(user_role)
                    db.session.add(user)
                    users_created += 1
                    print(f"Default User '{user_data['email']}' with role '{user_data['role']}' created.")
                else:
                    print(f"ERROR: '{user_data['role']}' role not found. Cannot create user '{user_data['email']}'.")
            else:
                print(f"User '{user_data['email']}' already exists.")

        if users_created > 0:
            db.session.commit()
            print(f"Successfully created {users_created} default users.")

        print("Database seeding completed successfully.")
    except Exception as e:
        db.session.rollback()
        print(f"An error occurred during seeding: {str(e)}")
        raise

================
File: backend/Dockerfile
================
# Use Python 3.10 slim image as base
FROM python:3.10-slim

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    FLASK_APP=src/app.py \
    PYTHONDONTWRITEBYTECODE=1

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements file
COPY requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy the rest of the application
COPY src/ src/
COPY migrations/ migrations/
COPY entrypoint.sh .

# Make entrypoint script executable
RUN chmod +x entrypoint.sh

# Expose the application port
EXPOSE 5000

# Set the entrypoint
ENTRYPOINT ["./entrypoint.sh"]

# Command to run the application
CMD ["gunicorn", "--bind", "0.0.0.0:5000", "src.app:create_app()", "--workers", "4", "--reload", "--log-level", "info"]

================
File: frontend/app/admin/customers/page.tsx
================
"use client"

import React, { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import {
  UserPlus,
  MoreHorizontal,
  Edit2,
  Trash2,
  Loader2,
  AlertCircle,
} from "lucide-react"
import {
  getAllAdminCustomers,
  createAdminCustomer,
  updateAdminCustomer,
  deleteAdminCustomer, // Import deleteAdminCustomer
  type Customer,
  type AdminCustomerCreateRequest,
  type AdminCustomerUpdateRequest,
} from "../../services/customer-service" // Adjusted path
import { toast } from "sonner" // For notifications

export default function CustomerManagementPage() {
  const [customers, setCustomers] = useState<Customer[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false)
  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null)

  const [newCustomerData, setNewCustomerData] = useState({
    name: "",
    email: "",
    phone: "",
  })
  // Adjusted editCustomerData state for form fields
  const [editCustomerData, setEditCustomerData] = useState<{
    id: number | null
    name: string
    email: string
    phone: string
  }>({ id: null, name: "", email: "", phone: "" })
  const [isSubmitting, setIsSubmitting] = useState(false) // Used for Create/Edit forms
  const [createFormError, setCreateFormError] = useState<string | null>(null)
  const [editFormError, setEditFormError] = useState<string | null>(null)
  const [isDeletingCustomer, setIsDeletingCustomer] = useState(false)
  const [deleteError, setDeleteError] = useState<string | null>(null)

  // Define fetchCustomers here to be accessible by other functions
  const fetchCustomers = async () => {
    setIsLoading(true)
    try {
      const fetchedData = await getAllAdminCustomers()
      setCustomers(fetchedData)
      setError(null)
    } catch (err) {
      setError("Failed to fetch customers.")
      setCustomers([])
      console.error("Error fetching customers:", err)
    } finally {
      setIsLoading(false)
    }
  }

  useEffect(() => {
    fetchCustomers()
  }, [])

  const handleEditClick = (customer: Customer) => {
    setSelectedCustomer(customer)
    // Populate editCustomerData with the selected customer's details
    setEditCustomerData({
      id: customer.id,
      name: customer.name,
      email: customer.email,
      phone: customer.phone || "", // Ensure phone is always a string
    })
    setEditFormError(null) // Clear previous edit errors
    setIsEditDialogOpen(true)
  }

  const handleDeleteClick = (customer: Customer) => {
    setSelectedCustomer(customer)
    setDeleteError(null) // Clear previous delete errors
    setIsDeleteDialogOpen(true)
  }

  const handleCreateCustomerSubmit = async () => {
    setCreateFormError(null) // Reset previous errors

    // Basic client-side validation
    if (!newCustomerData.name.trim()) {
      setCreateFormError("Name is required.")
      return
    }
    if (!newCustomerData.email.trim() || !/\S+@\S+\.\S+/.test(newCustomerData.email)) {
      setCreateFormError("A valid email is required.")
      return
    }

    setIsSubmitting(true)
    try {
      const payload: AdminCustomerCreateRequest = {
        name: newCustomerData.name.trim(),
        email: newCustomerData.email.trim(),
        phone: newCustomerData.phone?.trim() || undefined, // Send undefined if phone is empty or only whitespace
      }
      await createAdminCustomer(payload)
      toast.success("Customer created successfully!")
      await fetchCustomers() // Refresh the list
      setIsCreateDialogOpen(false) // Close dialog on success
      // Resetting form is handled by onOpenChange of Dialog
    } catch (error: any) {
      console.error("Failed to create customer:", error)
      setCreateFormError(error.message || "An unknown error occurred. Please try again.")
      toast.error(error.message || "Failed to create customer.")
    } finally {
      setIsSubmitting(false)
    }
  }

  const handleEditCustomerSubmit = async () => {
    if (!editCustomerData || !editCustomerData.id) {
      setEditFormError("No customer selected or customer ID is missing.")
      return
    }
    setEditFormError(null)

    // Basic client-side validation
    if (!editCustomerData.name.trim()) {
      setEditFormError("Name is required.")
      return
    }
    if (!editCustomerData.email.trim() || !/\S+@\S+\.\S+/.test(editCustomerData.email)) {
      setEditFormError("A valid email is required.")
      return
    }

    setIsSubmitting(true)
    try {
      const payload: AdminCustomerUpdateRequest = {
        name: editCustomerData.name.trim(),
        email: editCustomerData.email.trim(),
        phone: editCustomerData.phone?.trim() || undefined,
      }
      await updateAdminCustomer(editCustomerData.id, payload)
      toast.success("Customer updated successfully!")
      await fetchCustomers()
      setIsEditDialogOpen(false)
    } catch (error: any) {
      console.error("Failed to update customer:", error)
      setEditFormError(error.message || "An unknown error occurred. Please try again.")
      toast.error(error.message || "Failed to update customer.")
    } finally {
      setIsSubmitting(false)
    }
  }

  const handleConfirmDelete = async () => {
    if (!selectedCustomer || !selectedCustomer.id) {
      console.error("No customer selected for deletion or ID is missing.")
      setDeleteError("No customer selected for deletion or ID is missing.")
      return
    }
    setDeleteError(null)
    setIsDeletingCustomer(true)

    try {
      await deleteAdminCustomer(selectedCustomer.id)
      toast.success("Customer deleted successfully.")
      await fetchCustomers()
      setIsDeleteDialogOpen(false)
      setSelectedCustomer(null) // Clear selection after successful delete
    } catch (error: any) {
      console.error("Failed to delete customer:", error)
      // Basic error parsing for conflict
      if (error.message && (error.message.includes("constraint") || error.message.includes("foreign key") || error.message.includes("409"))) {
        setDeleteError("This customer cannot be deleted as they are referenced by other records (e.g., aircraft).")
        toast.error("Deletion failed: Customer is in use.")
      } else {
        const genericError = "Failed to delete customer. Please try again."
        setDeleteError(genericError)
        toast.error(genericError)
      }
    } finally {
      setIsDeletingCustomer(false)
    }
  }

  return (
    <div className="container mx-auto py-8 px-4 md:px-6 lg:px-8">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold">Customer Management</h1>
        <Dialog 
          open={isCreateDialogOpen} 
          onOpenChange={(isOpen) => {
            setIsCreateDialogOpen(isOpen);
            if (!isOpen) {
              setNewCustomerData({ name: "", email: "", phone: "" }); // Reset form data
              setCreateFormError(null); // Clear any form errors
            }
          }}
        >
          <DialogTrigger asChild>
            {/* Ensure DialogTrigger's child is a valid trigger, e.g., Button */}
            <Button onClick={() => setIsCreateDialogOpen(true)}>
              <UserPlus className="mr-2 h-4 w-4" /> Add Customer
            </Button>
          </DialogTrigger>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Add New Customer</DialogTitle>
              <DialogDescription>
                Fill in the details to add a new customer. Click create when you&apos;re done.
              </DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="name-create" className="text-right">Name</Label>
                <Input
                  id="name-create"
                  value={newCustomerData.name}
                  onChange={(e) => setNewCustomerData({ ...newCustomerData, name: e.target.value })}
                  className="col-span-3"
                  placeholder="John Doe"
                  disabled={isSubmitting}
                />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="email-create" className="text-right">Email</Label>
                <Input
                  id="email-create"
                  type="email"
                  value={newCustomerData.email}
                  onChange={(e) => setNewCustomerData({ ...newCustomerData, email: e.target.value })}
                  className="col-span-3"
                  placeholder="john.doe@example.com"
                  disabled={isSubmitting}
                />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="phone-create" className="text-right">Phone</Label>
                <Input
                  id="phone-create"
                  value={newCustomerData.phone}
                  onChange={(e) => setNewCustomerData({ ...newCustomerData, phone: e.target.value })}
                  className="col-span-3"
                  placeholder="(123) 456-7890 (Optional)"
                  disabled={isSubmitting}
                />
              </div>
              {createFormError && (
                <div className="col-span-4 bg-red-50 p-2 rounded-md border border-red-200 text-xs text-red-600 flex items-center">
                  <AlertCircle className="h-4 w-4 mr-2 flex-shrink-0" />
                  {createFormError}
                </div>
              )}
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setIsCreateDialogOpen(false)} disabled={isSubmitting}>
                Cancel
              </Button>
              <Button onClick={handleCreateCustomerSubmit} disabled={isSubmitting}>
                {isSubmitting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                {isSubmitting ? "Creating..." : "Create Customer"}
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>

      {isLoading && (
        <div className="flex justify-center items-center py-10">
          <Loader2 className="h-8 w-8 animate-spin text-primary" />
          <p className="ml-2">Loading customers...</p>
        </div>
      )}

      {error && !isLoading && (
        <div className="flex flex-col items-center justify-center py-10 bg-red-50 border border-red-200 rounded-md">
          <AlertCircle className="h-10 w-10 text-red-500 mb-3" />
          <p className="text-red-600 font-medium text-lg">Error</p>
          <p className="text-red-500">{error}</p>
          <Button onClick={() => { /* Allow retry or specific action */ }} className="mt-4">Try Again</Button>
        </div>
      )}

      {!isLoading && !error && (
        <Card>
          <CardHeader>
            <CardTitle>Customer List</CardTitle>
            <CardDescription>
              A list of all customers in the system.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>ID</TableHead>
                  <TableHead>Name</TableHead>
                  <TableHead>Email</TableHead>
                  <TableHead>Phone</TableHead>
                  <TableHead>Created At</TableHead>
                  <TableHead className="text-right">Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {customers.length > 0 ? (
                  customers.map((customer) => (
                    <TableRow key={customer.id}>
                      <TableCell>{customer.id}</TableCell>
                      <TableCell className="font-medium">{customer.name}</TableCell>
                      <TableCell>{customer.email}</TableCell>
                      <TableCell>{customer.phone || "N/A"}</TableCell>
                      <TableCell>
                        {customer.created_at
                          ? new Date(customer.created_at).toLocaleDateString()
                          : "N/A"}
                      </TableCell>
                      <TableCell className="text-right">
                        <DropdownMenu>
                          <DropdownMenuTrigger asChild>
                            <Button variant="ghost" className="h-8 w-8 p-0">
                              <span className="sr-only">Open menu</span>
                              <MoreHorizontal className="h-4 w-4" />
                            </Button>
                          </DropdownMenuTrigger>
                          <DropdownMenuContent align="end">
                            <DropdownMenuItem onClick={() => handleEditClick(customer)}>
                              <Edit2 className="mr-2 h-4 w-4" />
                              Edit
                            </DropdownMenuItem>
                            <DropdownMenuItem onClick={() => handleDeleteClick(customer)} className="text-red-600 hover:!text-red-600 hover:!bg-red-100">
                              <Trash2 className="mr-2 h-4 w-4" />
                              Delete
                            </DropdownMenuItem>
                          </DropdownMenuContent>
                        </DropdownMenu>
                      </TableCell>
                    </TableRow>
                  ))
                ) : (
                  <TableRow>
                    <TableCell colSpan={6} className="text-center h-24">
                      No customers found.
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          </CardContent>
        </Card>
      )}

      {/* Edit Customer Dialog */}
      <Dialog 
        open={isEditDialogOpen} 
        onOpenChange={(isOpen) => {
          setIsEditDialogOpen(isOpen);
          if (!isOpen) {
            setEditCustomerData({ id: null, name: "", email: "", phone: "" }); // Reset edit form
            setSelectedCustomer(null); // Clear selected customer
            setEditFormError(null); // Clear edit form errors
          }
        }}
      >
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Edit Customer</DialogTitle>
            <DialogDescription>
              Update the customer&apos;s information. Click save when you&apos;re done.
            </DialogDescription>
          </DialogHeader>
          {editCustomerData && (
            <div className="grid gap-4 py-4">
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="name-edit" className="text-right">Name</Label>
                <Input
                  id="name-edit"
                  value={editCustomerData.name}
                  onChange={(e) => setEditCustomerData({ ...editCustomerData, name: e.target.value })}
                  className="col-span-3"
                  disabled={isSubmitting}
                />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="email-edit" className="text-right">Email</Label>
                <Input
                  id="email-edit"
                  type="email"
                  value={editCustomerData.email}
                  onChange={(e) => setEditCustomerData({ ...editCustomerData, email: e.target.value })}
                  className="col-span-3"
                  disabled={isSubmitting}
                />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="phone-edit" className="text-right">Phone</Label>
                <Input
                  id="phone-edit"
                  value={editCustomerData.phone}
                  onChange={(e) => setEditCustomerData({ ...editCustomerData, phone: e.target.value })}
                  className="col-span-3"
                  disabled={isSubmitting}
                />
              </div>
              {editFormError && (
                <div className="col-span-4 bg-red-50 p-2 rounded-md border border-red-200 text-xs text-red-600 flex items-center">
                  <AlertCircle className="h-4 w-4 mr-2 flex-shrink-0" />
                  {editFormError}
                </div>
              )}
            </div>
          )}
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsEditDialogOpen(false)} disabled={isSubmitting}>
              Cancel
            </Button>
            <Button onClick={handleEditCustomerSubmit} disabled={isSubmitting || !editCustomerData?.id}>
              {isSubmitting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
              {isSubmitting ? "Saving..." : "Save Changes"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Delete Customer Dialog */}
      <Dialog 
        open={isDeleteDialogOpen} 
        onOpenChange={(isOpen) => {
          setIsDeleteDialogOpen(isOpen);
          if (!isOpen) {
            setSelectedCustomer(null); // Clear selected customer when dialog is closed
            setDeleteError(null); // Clear delete error when dialog is closed
          }
        }}
      >
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Confirm Deletion</DialogTitle>
            <DialogDescription>
              Are you sure you want to delete customer "{selectedCustomer?.name}"? This action cannot be undone.
            </DialogDescription>
          </DialogHeader>
          {deleteError && (
            <div className="bg-red-50 p-3 rounded-md border border-red-200 text-sm text-red-700 flex items-center my-2">
              <AlertCircle className="h-4 w-4 mr-2 flex-shrink-0" />
              {deleteError}
            </div>
          )}
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsDeleteDialogOpen(false)} disabled={isDeletingCustomer}>
              Cancel
            </Button>
            <Button variant="destructive" onClick={handleConfirmDelete} disabled={isDeletingCustomer}>
              {isDeletingCustomer && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
              {isDeletingCustomer ? "Deleting..." : "Delete Customer"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}

================
File: frontend/app/admin/lst-management/page.tsx
================
"use client"

import { useState, useEffect } from "react"
import {
  UserCheck,
  Plus,
  Search,
  Filter,
  MoreHorizontal,
  Edit,
  Trash2,
  Award,
  Clock,
  TrendingUp,
  Star,
  Loader2,
} from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { useToast } from "@/hooks/use-toast"
import { 
  LST,
  getAllLSTs,
  createLST,
  updateLST,
  deleteLST,
  getLSTStats,
  LSTCreateRequest,
  LSTUpdateRequest
} from "@/app/services/lst-service"

export default function LSTManagement() {
  const [lsts, setLsts] = useState<LST[]>([])
  const [filteredLsts, setFilteredLsts] = useState<LST[]>([])
  const [searchTerm, setSearchTerm] = useState("")
  const [statusFilter, setStatusFilter] = useState("all")
  const [shiftFilter, setShiftFilter] = useState("all")
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)
  const [selectedLst, setSelectedLst] = useState<LST | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [isSaving, setIsSaving] = useState(false)
  const [stats, setStats] = useState({
    total_lsts: 0,
    active_lsts: 0,
    average_performance: 0,
    average_completion_time: 0,
  })

  const { toast } = useToast()

  const [newLst, setNewLst] = useState<LSTCreateRequest>({
    name: "",
    email: "",
    employee_id: "",
    shift: "day",
    certifications: [],
    password: "",
  })

  const shifts = [
    { value: "day", label: "Day Shift (6AM - 2PM)" },
    { value: "swing", label: "Swing Shift (2PM - 10PM)" },
    { value: "night", label: "Night Shift (10PM - 6AM)" },
  ]

  const availableCertifications = [
    "Fuel Safety",
    "Aircraft Ground Support",
    "Hazmat Handling",
    "Fire Safety",
    "First Aid/CPR",
    "Equipment Operation",
    "Quality Control",
    "Environmental Safety",
  ]

  // Load LSTs and stats from backend
  const loadData = async () => {
    try {
      setIsLoading(true)
      const [lstsData, statsData] = await Promise.all([
        getAllLSTs(),
        getLSTStats(),
      ])
      setLsts(lstsData)
      setFilteredLsts(lstsData)
      setStats(statsData)
    } catch (error) {
      console.error("Error loading LST data:", error)
      toast({
        title: "Error",
        description: "Failed to load LST data. Please try again.",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  useEffect(() => {
    loadData()
  }, [])

  useEffect(() => {
    let filtered = lsts

    if (searchTerm) {
      filtered = filtered.filter(
        (lst) =>
          lst.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
          lst.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
          lst.employeeId.toLowerCase().includes(searchTerm.toLowerCase()),
      )
    }

    if (statusFilter !== "all") {
      filtered = filtered.filter((lst) => lst.status === statusFilter)
    }

    if (shiftFilter !== "all") {
      filtered = filtered.filter((lst) => lst.shift === shiftFilter)
    }

    setFilteredLsts(filtered)
  }, [lsts, searchTerm, statusFilter, shiftFilter])

  const handleCreateLst = async () => {
    try {
      setIsSaving(true)
      const createdLst = await createLST(newLst)
      
      // Refresh the data after creation
      await loadData()

      setNewLst({
        name: "",
        email: "",
        employee_id: "",
        shift: "day",
        certifications: [],
        password: "",
      })
      setIsCreateDialogOpen(false)
      
      toast({
        title: "Success",
        description: "LST created successfully.",
      })
    } catch (error) {
      console.error("Error creating LST:", error)
      toast({
        title: "Error",
        description: "Failed to create LST. Please try again.",
        variant: "destructive",
      })
    } finally {
      setIsSaving(false)
    }
  }

  const handleEditLst = async () => {
    if (!selectedLst) return

    try {
      setIsSaving(true)
      
      const updateData: LSTUpdateRequest = {
        name: selectedLst.name,
        email: selectedLst.email,
        employee_id: selectedLst.employeeId,
        status: selectedLst.status,
        shift: selectedLst.shift,
        certifications: selectedLst.certifications,
      }
      
      await updateLST(selectedLst.id, updateData)
      
      // Refresh the data after update
      await loadData()
      
      setIsEditDialogOpen(false)
      setSelectedLst(null)
      
      toast({
        title: "Success",
        description: "LST updated successfully.",
      })
    } catch (error) {
      console.error("Error updating LST:", error)
      toast({
        title: "Error",
        description: "Failed to update LST. Please try again.",
        variant: "destructive",
      })
    } finally {
      setIsSaving(false)
    }
  }

  const handleDeleteLst = async (lstId: string) => {
    try {
      await deleteLST(lstId)
      
      // Refresh the data after deletion
      await loadData()
      
      toast({
        title: "Success",
        description: "LST deleted successfully.",
      })
    } catch (error) {
      console.error("Error deleting LST:", error)
      toast({
        title: "Error",
        description: "Failed to delete LST. Please try again.",
        variant: "destructive",
      })
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case "active":
        return "bg-green-100 text-green-800"
      case "inactive":
        return "bg-red-100 text-red-800"
      case "on_leave":
        return "bg-yellow-100 text-yellow-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  const getShiftColor = (shift: string) => {
    switch (shift) {
      case "day":
        return "bg-blue-100 text-blue-800"
      case "swing":
        return "bg-orange-100 text-orange-800"
      case "night":
        return "bg-purple-100 text-purple-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  const getPerformanceColor = (rating: number | undefined | null) => {
    if (!rating || typeof rating !== 'number') return "text-gray-400"
    if (rating >= 4.5) return "text-green-600"
    if (rating >= 4.0) return "text-yellow-600"
    return "text-red-600"
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">LST Management</h1>
          <p className="text-muted-foreground">Manage line service technician profiles and performance</p>
        </div>
        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
          <DialogTrigger asChild>
            <Button className="gap-2">
              <Plus className="h-4 w-4" />
              Add LST
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[425px]">
            <DialogHeader>
              <DialogTitle>Add New LST</DialogTitle>
              <DialogDescription>Register a new line service technician to the team.</DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="grid gap-2">
                <Label htmlFor="name">Full Name</Label>
                <Input
                  id="name"
                  value={newLst.name}
                  onChange={(e) => setNewLst({ ...newLst, name: e.target.value })}
                  placeholder="John Doe"
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="email">Email</Label>
                <Input
                  id="email"
                  type="email"
                  value={newLst.email}
                  onChange={(e) => setNewLst({ ...newLst, email: e.target.value })}
                  placeholder="john@example.com"
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="password">Password</Label>
                <Input
                  id="password"
                  type="password"
                  value={newLst.password || ""}
                  onChange={(e) => setNewLst({ ...newLst, password: e.target.value })}
                  placeholder="Enter password for the LST account"
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="employee_id">Employee ID</Label>
                <Input
                  id="employee_id"
                  value={newLst.employee_id}
                  onChange={(e) => setNewLst({ ...newLst, employee_id: e.target.value })}
                  placeholder="LST001"
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="shift">Shift</Label>
                <Select
                  value={newLst.shift}
                  onValueChange={(value: "day" | "swing" | "night") => setNewLst({ ...newLst, shift: value })}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {shifts.map((shift) => (
                      <SelectItem key={shift.value} value={shift.value}>
                        {shift.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>
            <DialogFooter>
              <Button type="button" variant="outline" onClick={() => setIsCreateDialogOpen(false)}>
                Cancel
              </Button>
              <Button type="button" onClick={handleCreateLst} disabled={isSaving}>
                {isSaving ? <Loader2 className="h-4 w-4 animate-spin mr-2" /> : null}
                Add LST
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>

      {/* Statistics Cards */}
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total LSTs</CardTitle>
            <UserCheck className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {isLoading ? <Loader2 className="h-6 w-6 animate-spin" /> : stats.total_lsts ?? 0}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Active LSTs</CardTitle>
            <TrendingUp className="h-4 w-4 text-green-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {isLoading ? <Loader2 className="h-6 w-6 animate-spin" /> : stats.active_lsts ?? 0}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Avg Performance</CardTitle>
            <Star className="h-4 w-4 text-yellow-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {isLoading ? <Loader2 className="h-6 w-6 animate-spin" /> : (stats.average_performance ?? 0).toFixed(1)}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Avg Completion Time</CardTitle>
            <Clock className="h-4 w-4 text-blue-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {isLoading ? <Loader2 className="h-6 w-6 animate-spin" /> : Math.round(stats.average_completion_time ?? 0)}m
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Filters and Search */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Filter className="h-5 w-5" />
            Filters
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col gap-4 md:flex-row md:items-center">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
              <Input
                placeholder="Search by name, email, or employee ID..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10"
              />
            </div>
            <Select value={statusFilter} onValueChange={setStatusFilter}>
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="Filter by status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Status</SelectItem>
                <SelectItem value="active">Active</SelectItem>
                <SelectItem value="inactive">Inactive</SelectItem>
                <SelectItem value="on_leave">On Leave</SelectItem>
              </SelectContent>
            </Select>
            <Select value={shiftFilter} onValueChange={setShiftFilter}>
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="Filter by shift" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Shifts</SelectItem>
                <SelectItem value="day">Day Shift</SelectItem>
                <SelectItem value="swing">Swing Shift</SelectItem>
                <SelectItem value="night">Night Shift</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </CardContent>
      </Card>

      {/* LSTs Table */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <UserCheck className="h-5 w-5" />
            Line Service Technicians ({filteredLsts.length})
          </CardTitle>
          <CardDescription>Monitor LST performance, certifications, and assignments</CardDescription>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>LST</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Shift</TableHead>
                <TableHead>Performance</TableHead>
                <TableHead>Orders Completed</TableHead>
                <TableHead>Avg Time</TableHead>
                <TableHead>Certifications</TableHead>
                <TableHead className="text-right">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {isLoading ? (
                <TableRow>
                  <TableCell colSpan={8} className="text-center py-8">
                    <Loader2 className="h-6 w-6 animate-spin mx-auto" />
                    <p className="mt-2 text-muted-foreground">Loading LSTs...</p>
                  </TableCell>
                </TableRow>
              ) : filteredLsts.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={8} className="text-center py-8">
                    <p className="text-muted-foreground">No LSTs found</p>
                  </TableCell>
                </TableRow>
              ) : (
                filteredLsts.map((lst) => (
                <TableRow key={lst.id}>
                  <TableCell>
                    <div>
                      <div className="font-medium">{lst.name}</div>
                      <div className="text-sm text-muted-foreground">{lst.employeeId}</div>
                    </div>
                  </TableCell>
                  <TableCell>
                    <Badge className={getStatusColor(lst.status)}>{lst.status.replace("_", " ")}</Badge>
                  </TableCell>
                  <TableCell>
                    <Badge className={getShiftColor(lst.shift)}>{lst.shift}</Badge>
                  </TableCell>
                  <TableCell>
                    <div className="flex items-center gap-2">
                      <Star className={`h-4 w-4 ${getPerformanceColor(lst.performanceRating)}`} />
                      <span className={getPerformanceColor(lst.performanceRating)}>
                        {lst.performanceRating ? lst.performanceRating.toFixed(1) : 'N/A'}
                      </span>
                    </div>
                  </TableCell>
                  <TableCell>{lst.ordersCompleted ?? 0}</TableCell>
                  <TableCell>{lst.averageTime ?? 0}m</TableCell>
                  <TableCell>
                    <div className="flex flex-wrap gap-1">
                      {lst.certifications.slice(0, 2).map((cert) => (
                        <Badge key={cert} variant="secondary" className="text-xs">
                          {cert}
                        </Badge>
                      ))}
                      {lst.certifications.length > 2 && (
                        <Badge variant="secondary" className="text-xs">
                          +{lst.certifications.length - 2}
                        </Badge>
                      )}
                    </div>
                  </TableCell>
                  <TableCell className="text-right">
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button variant="ghost" className="h-8 w-8 p-0">
                          <MoreHorizontal className="h-4 w-4" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end">
                        <DropdownMenuLabel>Actions</DropdownMenuLabel>
                        <DropdownMenuItem
                          onClick={() => {
                            setSelectedLst(lst)
                            setIsEditDialogOpen(true)
                          }}
                        >
                          <Edit className="mr-2 h-4 w-4" />
                          Edit
                        </DropdownMenuItem>
                        <DropdownMenuItem>
                          <Award className="mr-2 h-4 w-4" />
                          View Performance
                        </DropdownMenuItem>
                        <DropdownMenuItem>
                          <Clock className="mr-2 h-4 w-4" />
                          Schedule Training
                        </DropdownMenuItem>
                        <DropdownMenuSeparator />
                        <DropdownMenuItem className="text-destructive" onClick={() => handleDeleteLst(lst.id)}>
                          <Trash2 className="mr-2 h-4 w-4" />
                          Delete
                        </DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </TableCell>
                </TableRow>
                ))
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>

      {/* Edit LST Dialog */}
      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Edit LST</DialogTitle>
            <DialogDescription>Update line service technician information.</DialogDescription>
          </DialogHeader>
          {selectedLst && (
            <div className="grid gap-4 py-4">
              <div className="grid gap-2">
                <Label htmlFor="edit-name">Full Name</Label>
                <Input
                  id="edit-name"
                  value={selectedLst.name}
                  onChange={(e) => setSelectedLst({ ...selectedLst, name: e.target.value })}
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="edit-email">Email</Label>
                <Input
                  id="edit-email"
                  type="email"
                  value={selectedLst.email}
                  onChange={(e) => setSelectedLst({ ...selectedLst, email: e.target.value })}
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="edit-employeeId">Employee ID</Label>
                <Input
                  id="edit-employeeId"
                  value={selectedLst.employeeId}
                  onChange={(e) => setSelectedLst({ ...selectedLst, employeeId: e.target.value })}
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="edit-status">Status</Label>
                <Select
                  value={selectedLst.status}
                  onValueChange={(value: "active" | "inactive" | "on_leave") =>
                    setSelectedLst({ ...selectedLst, status: value })
                  }
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="active">Active</SelectItem>
                    <SelectItem value="inactive">Inactive</SelectItem>
                    <SelectItem value="on_leave">On Leave</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="grid gap-2">
                <Label htmlFor="edit-shift">Shift</Label>
                <Select
                  value={selectedLst.shift}
                  onValueChange={(value: "day" | "swing" | "night") => setSelectedLst({ ...selectedLst, shift: value })}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {shifts.map((shift) => (
                      <SelectItem key={shift.value} value={shift.value}>
                        {shift.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>
          )}
          <DialogFooter>
            <Button type="button" variant="outline" onClick={() => setIsEditDialogOpen(false)}>
              Cancel
            </Button>
            <Button type="button" onClick={handleEditLst} disabled={isSaving}>
              {isSaving ? <Loader2 className="h-4 w-4 animate-spin mr-2" /> : null}
              Save Changes
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}

================
File: frontend/app/admin/permissions/page.tsx
================
"use client"

import type React from "react"
import { useEffect, useState } from "react"
import { LogOut, Plane, Bell, Settings, User, Shield, Plus, Search, Filter, Edit, Lock, Trash2 } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import {
  type Permission,
  PermissionCategory,
  type Role,
  getAllPermissions,
  getAllRoles,
  createRole,
  updateRole,
  deleteRole,
} from "@/app/services/permission-service"
import ProtectedRoute from "@/app/components/protected-route"

export default function PermissionsPage() {
  const [isLoading, setIsLoading] = useState(true)
  const [permissions, setPermissions] = useState<Permission[]>([])
  const [roles, setRoles] = useState<Role[]>([])
  const [activeTab, setActiveTab] = useState("roles")
  const [searchQuery, setSearchQuery] = useState("")
  const [categoryFilter, setCategoryFilter] = useState<PermissionCategory | "all">("all")

  // Role management
  const [showRoleForm, setShowRoleForm] = useState(false)
  const [editingRole, setEditingRole] = useState<Role | null>(null)
  const [newRole, setNewRole] = useState<{
    name: string
    description: string
    permissions: string[]
  }>({
    name: "",
    description: "",
    permissions: [],
  })
  const [formError, setFormError] = useState("")

  // Role deletion
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false)
  const [roleToDelete, setRoleToDelete] = useState<Role | null>(null)

  // User role assignment - Disabled: Backend doesn't support user-role assignment endpoints yet
  // const [showAssignRoleDialog, setShowAssignRoleDialog] = useState(false)
  // const [userEmail, setUserEmail] = useState("")
  // const [userRoles, setUserRoles] = useState<string[]>([])
  // const [assignmentError, setAssignmentError] = useState("")

  useEffect(() => {
    // Load permissions and roles
    loadPermissionsAndRoles()
  }, [])

  const loadPermissionsAndRoles = async () => {
    try {
      setIsLoading(true)
      const [allPermissions, allRoles] = await Promise.all([
        getAllPermissions(),
        getAllRoles()
      ])

      setPermissions(allPermissions)
      setRoles(allRoles)
    } catch (error) {
      console.error("Error loading permissions and roles:", error)
      setFormError("Failed to load permissions and roles")
      // Ensure arrays are set even on error
      setPermissions([])
      setRoles([])
    } finally {
      setIsLoading(false)
    }
  }

  const handleLogout = () => {
    localStorage.removeItem("fboUser")
    window.location.href = "/login"
  }

  // Filter permissions based on search query and category
  const filteredPermissions = (permissions || []).filter((permission) => {
    const matchesSearch =
      permission.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      permission.description.toLowerCase().includes(searchQuery.toLowerCase())

    const matchesCategory = categoryFilter === "all" || (permission.category || "") === categoryFilter

    return matchesSearch && matchesCategory
  })

  // Filter roles based on search query
  const filteredRoles = (roles || []).filter(
    (role) =>
      role.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      role.description.toLowerCase().includes(searchQuery.toLowerCase()),
  )

  // Handle role form submission
  const handleRoleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setFormError("")

    // Validate form
    if (!newRole.name) {
      setFormError("Role name is required")
      return
    }

    if (newRole.permissions.length === 0) {
      setFormError("Select at least one permission")
      return
    }

    try {
      if (editingRole) {
        // Update existing role
        await updateRole(editingRole.id, {
          name: newRole.name,
          description: newRole.description,
          permissions: newRole.permissions,
        })
      } else {
        // Create new role
        await createRole({
          name: newRole.name,
          description: newRole.description,
          permissions: newRole.permissions,
          isSystemRole: false,
        })
      }

      // Reload roles
      await loadPermissionsAndRoles()

      // Reset form
      setNewRole({
        name: "",
        description: "",
        permissions: [],
      })
      setEditingRole(null)
      setShowRoleForm(false)
    } catch (error) {
      console.error("Error saving role:", error)
      setFormError("Failed to save role. Please try again.")
    }
  }

  // Handle role deletion
  const handleDeleteRole = async () => {
    if (!roleToDelete) return

    try {
      await deleteRole(roleToDelete.id)

      // Reload roles
      await loadPermissionsAndRoles()

      // Close dialog
      setShowDeleteConfirm(false)
      setRoleToDelete(null)
    } catch (error) {
      console.error("Error deleting role:", error)
      setFormError("Failed to delete role. System roles cannot be deleted.")
    }
  }

  // Handle permission toggle in role form
  const handlePermissionToggle = (permissionId: string) => {
    setNewRole((prev) => {
      const permissions = prev.permissions.includes(permissionId)
        ? prev.permissions.filter((id) => id !== permissionId)
        : [...prev.permissions, permissionId]

      return { ...prev, permissions }
    })
  }

  // Handle edit role
  const handleEditRole = (role: Role) => {
    setEditingRole(role)
    setNewRole({
      name: role.name,
      description: role.description,
      permissions: [...role.permissions],
    })
    setShowRoleForm(true)
  }

  // User role assignment functions - Disabled: Backend doesn't support user-role assignment endpoints yet
  /*
  const handleLookupUserRoles = () => {
    setAssignmentError("")

    if (!userEmail.trim()) {
      setAssignmentError("Email is required")
      return
    }

    try {
      const userRolesList = getUserRoles(userEmail)
      setUserRoles(userRolesList.map((role) => role.id))
    } catch (error) {
      console.error("Error looking up user roles:", error)
      setAssignmentError("Failed to lookup user roles")
      setUserRoles([])
    }
  }

  const handleRoleAssignmentToggle = (roleId: string) => {
    if (!userEmail) return

    try {
      if (userRoles.includes(roleId)) {
        // Remove role
        removeRoleFromUser(userEmail, roleId)
        setUserRoles((prev) => prev.filter((id) => id !== roleId))
      } else {
        // Assign role
        assignRoleToUser(userEmail, roleId, user?.email || "admin")
        setUserRoles((prev) => [...prev, roleId])
      }
    } catch (error) {
      console.error("Error toggling role assignment:", error)
      setAssignmentError("Failed to update role assignment")
    }
  }
  */

  // Group permissions by category
  const permissionsByCategory = (permissions || []).reduce(
    (acc, permission) => {
      const category = permission.category || "uncategorized"
      if (!acc[category]) {
        acc[category] = []
      }
      acc[category].push(permission)
      return acc
    },
    {} as Record<string, Permission[]>,
  )

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-background">
        <div className="flex flex-col items-center gap-4">
          <div className="h-8 w-8 border-4 border-primary border-t-transparent rounded-full animate-spin"></div>
          <p>Loading permissions...</p>
        </div>
      </div>
    )
  }

  return (
    // <ProtectedRoute requiredPermission="manage_roles">
      <div className="min-h-screen bg-background">
        {/* Admin Header */}
        <header className="border-b bg-background/80 backdrop-blur-md sticky top-0 z-40">
          <div className="container flex h-16 items-center justify-between px-4">
            <div className="flex items-center gap-2">
              <Plane className="h-6 w-6 text-primary rotate-45" />
              <span className="text-xl font-bold">FBO LaunchPad</span>
              <span className="bg-primary/10 text-primary text-xs px-2 py-1 rounded-md ml-2">Admin</span>
            </div>

            <div className="flex items-center gap-4">
              <Button variant="ghost" size="sm" className="gap-2">
                <Bell className="h-4 w-4" />
                <span className="sr-only">Notifications</span>
              </Button>
              <Button variant="ghost" size="sm" className="gap-2">
                <Settings className="h-4 w-4" />
                <span className="sr-only">Settings</span>
              </Button>
              <div className="flex items-center gap-2">
                <div className="rounded-full bg-primary/10 p-1">
                  <User className="h-5 w-5 text-primary" />
                </div>
                <span className="text-sm font-medium hidden md:inline-block">Administrator</span>
              </div>
              <Button variant="outline" size="sm" onClick={handleLogout} className="gap-2">
                <LogOut className="h-4 w-4" />
                <span className="hidden md:inline-block">Logout</span>
              </Button>
            </div>
          </div>
        </header>

        <main className="container px-4 md:px-6 py-6 md:py-8">
          <div className="flex flex-col gap-6">
            <div className="flex items-center justify-between">
              <h1 className="text-3xl font-bold">Permissions & Roles</h1>
              <Button variant="outline" size="sm" onClick={() => window.location.href = "/admin/dashboard"} className="gap-2">
                Back to Dashboard
              </Button>
            </div>

            <Tabs defaultValue="roles" value={activeTab} onValueChange={setActiveTab}>
              <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-4">
                <TabsList className="grid w-full md:w-auto grid-cols-2 md:grid-cols-none md:flex">
                  <TabsTrigger value="roles" className="flex items-center gap-2">
                    <Shield className="h-4 w-4" />
                    <span>Roles</span>
                  </TabsTrigger>
                  <TabsTrigger value="permissions" className="flex items-center gap-2">
                    <Lock className="h-4 w-4" />
                    <span>Permissions</span>
                  </TabsTrigger>
                </TabsList>

                <div className="flex gap-2">
                  {activeTab === "roles" && (
                    <Button
                      onClick={() => {
                        setEditingRole(null)
                        setNewRole({
                          name: "",
                          description: "",
                          permissions: [],
                        })
                        setShowRoleForm(true)
                      }}
                      className="flex items-center gap-2"
                    >
                      <Plus className="h-4 w-4" />
                      <span>Create Role</span>
                    </Button>
                  )}
                  {/* User role assignment disabled - Backend doesn't support user-role assignment endpoints yet
                  <Button
                    variant="outline"
                    onClick={() => setShowAssignRoleDialog(true)}
                    className="flex items-center gap-2"
                  >
                    <User className="h-4 w-4" />
                    <span>Assign Roles</span>
                  </Button>
                  */}
                </div>
              </div>

              {/* Search and Filter */}
              <div className="flex flex-col md:flex-row gap-3 mb-4">
                <div className="relative flex-1">
                  <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                  <Input
                    placeholder={`Search ${activeTab}...`}
                    className="pl-10"
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                  />
                </div>
                {activeTab === "permissions" && (
                  <div className="flex items-center gap-2">
                    <Filter className="h-4 w-4 text-muted-foreground" />
                    <select
                      value={categoryFilter}
                      onChange={(e) => setCategoryFilter(e.target.value as PermissionCategory | "all")}
                      className="flex h-10 rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                    >
                      <option value="all">All Categories</option>
                      {Object.values(PermissionCategory).map((category) => (
                        <option key={category} value={category}>
                          {category.charAt(0).toUpperCase() + category.slice(1).replace("_", " ")}
                        </option>
                      ))}
                    </select>
                  </div>
                )}
              </div>

              <TabsContent value="roles">
                <Card>
                  <CardHeader>
                    <CardTitle>Roles</CardTitle>
                    <CardDescription>Manage roles that define sets of permissions for users</CardDescription>
                  </CardHeader>
                  <CardContent>
                    {filteredRoles.length === 0 ? (
                      <div className="text-center py-8">
                        <Shield className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                        <h3 className="text-lg font-medium mb-2">No roles found</h3>
                        <p className="text-muted-foreground mb-4">
                          {searchQuery ? "Try adjusting your search" : "Create your first role using the button above"}
                        </p>
                      </div>
                    ) : (
                      <div className="space-y-4">
                        {filteredRoles.map((role) => (
                          <Card key={role.id} className="overflow-hidden">
                            <CardHeader className="pb-2 bg-muted/50">
                              <div className="flex justify-between items-start">
                                <div>
                                  <CardTitle className="text-lg flex items-center gap-2">
                                    {role.name}
                                    {role.isSystemRole && (
                                      <Badge variant="outline" className="bg-blue-500/10 text-blue-600 border-blue-200">
                                        System
                                      </Badge>
                                    )}
                                  </CardTitle>
                                  <CardDescription>{role.description}</CardDescription>
                                </div>
                                <div className="flex gap-2">
                                  <Button
                                    variant="ghost"
                                    size="sm"
                                    onClick={() => handleEditRole(role)}
                                    disabled={role.isSystemRole}
                                    title={role.isSystemRole ? "System roles cannot be edited" : "Edit role"}
                                  >
                                    <Edit className="h-4 w-4" />
                                    <span className="sr-only">Edit</span>
                                  </Button>
                                  <Button
                                    variant="ghost"
                                    size="sm"
                                    onClick={() => {
                                      setRoleToDelete(role)
                                      setShowDeleteConfirm(true)
                                    }}
                                    disabled={role.isSystemRole}
                                    title={role.isSystemRole ? "System roles cannot be deleted" : "Delete role"}
                                  >
                                    <Trash2 className="h-4 w-4" />
                                    <span className="sr-only">Delete</span>
                                  </Button>
                                </div>
                              </div>
                            </CardHeader>
                            <CardContent>
                              <div className="space-y-2">
                                <div className="text-sm text-muted-foreground">
                                  <strong>Permissions ({(role.permissions || []).length}):</strong>
                                </div>
                                <div className="flex flex-wrap gap-1">
                                  {(role.permissions || []).slice(0, 5).map((permissionId) => {
                                    const permission = permissions.find((p) => p.id === permissionId)
                                    return permission ? (
                                      <Badge key={permissionId} variant="secondary" className="text-xs">
                                        {permission.name}
                                      </Badge>
                                    ) : null
                                  })}
                                  {(role.permissions || []).length > 5 && (
                                    <Badge variant="outline" className="text-xs">
                                      +{(role.permissions || []).length - 5} more
                                    </Badge>
                                  )}
                                </div>
                              </div>
                            </CardContent>
                          </Card>
                        ))}
                      </div>
                    )}
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="permissions">
                <Card>
                  <CardHeader>
                    <CardTitle>System Permissions</CardTitle>
                    <CardDescription>View all available permissions organized by category</CardDescription>
                  </CardHeader>
                  <CardContent>
                    {filteredPermissions.length === 0 ? (
                      <div className="text-center py-8">
                        <Lock className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                        <h3 className="text-lg font-medium mb-2">No permissions found</h3>
                        <p className="text-muted-foreground">Try adjusting your search or filter criteria</p>
                      </div>
                    ) : (
                      <div className="space-y-6">
                        {Object.entries(permissionsByCategory).map(([category, categoryPermissions]) => {
                          const filteredCategoryPermissions = categoryPermissions.filter((permission) => {
                            const matchesSearch =
                              permission.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                              permission.description.toLowerCase().includes(searchQuery.toLowerCase())

                            const matchesCategory = categoryFilter === "all" || (permission.category || "") === categoryFilter

                            return matchesSearch && matchesCategory
                          })

                          if (filteredCategoryPermissions.length === 0) return null

                          return (
                            <div key={category}>
                              <h3 className="text-lg font-semibold mb-3 capitalize">
                                {category.replace("_", " ")} Permissions
                              </h3>
                              <div className="grid gap-3 md:grid-cols-2 lg:grid-cols-3">
                                {filteredCategoryPermissions.map((permission) => (
                                  <Card key={permission.id} className="p-4">
                                    <div className="space-y-2">
                                      <div className="flex items-center justify-between">
                                        <h4 className="font-medium">{permission.name}</h4>
                                        <Badge variant="outline" className="text-xs">
                                          {(permission.category || "").replace("_", " ")}
                                        </Badge>
                                      </div>
                                      <p className="text-sm text-muted-foreground">{permission.description}</p>
                                      <div className="text-xs text-muted-foreground">ID: {permission.id}</div>
                                    </div>
                                  </Card>
                                ))}
                              </div>
                            </div>
                          )
                        })}
                      </div>
                    )}
                  </CardContent>
                </Card>
              </TabsContent>
            </Tabs>

            {/* Role Form Dialog */}
            {showRoleForm && (
              <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
                <Card className="w-full max-w-2xl max-h-[90vh] overflow-y-auto">
                  <CardHeader>
                    <CardTitle>{editingRole ? "Edit Role" : "Create New Role"}</CardTitle>
                    <CardDescription>
                      {editingRole
                        ? "Update role details and permissions"
                        : "Define a new role with specific permissions"}
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <form onSubmit={handleRoleSubmit} className="space-y-4">
                      {formError && (
                        <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
                          {formError}
                        </div>
                      )}

                      <div className="space-y-2">
                        <label htmlFor="roleName" className="text-sm font-medium">
                          Role Name
                        </label>
                        <Input
                          id="roleName"
                          value={newRole.name}
                          onChange={(e) => setNewRole((prev) => ({ ...prev, name: e.target.value }))}
                          placeholder="Enter role name"
                          required
                        />
                      </div>

                      <div className="space-y-2">
                        <label htmlFor="roleDescription" className="text-sm font-medium">
                          Description
                        </label>
                        <Input
                          id="roleDescription"
                          value={newRole.description}
                          onChange={(e) => setNewRole((prev) => ({ ...prev, description: e.target.value }))}
                          placeholder="Enter role description"
                        />
                      </div>

                      <div className="space-y-3">
                        <label className="text-sm font-medium">Permissions</label>
                        <div className="space-y-4 max-h-60 overflow-y-auto border rounded p-3">
                          {Object.entries(permissionsByCategory).map(([category, categoryPermissions]) => (
                            <div key={category}>
                              <h4 className="font-medium text-sm mb-2 capitalize">{category.replace("_", " ")}</h4>
                              <div className="space-y-2 ml-4">
                                {categoryPermissions.map((permission) => (
                                  <label key={permission.id} className="flex items-center space-x-2 text-sm">
                                    <input
                                      type="checkbox"
                                      checked={newRole.permissions.includes(permission.id)}
                                      onChange={() => handlePermissionToggle(permission.id)}
                                      className="rounded border-gray-300"
                                    />
                                    <span>{permission.name}</span>
                                    <span className="text-muted-foreground">- {permission.description}</span>
                                  </label>
                                ))}
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>

                      <div className="flex justify-end gap-2 pt-4">
                        <Button
                          type="button"
                          variant="outline"
                          onClick={() => {
                            setShowRoleForm(false)
                            setEditingRole(null)
                            setFormError("")
                          }}
                        >
                          Cancel
                        </Button>
                        <Button type="submit">{editingRole ? "Update Role" : "Create Role"}</Button>
                      </div>
                    </form>
                  </CardContent>
                </Card>
              </div>
            )}

            {/* Delete Confirmation Dialog */}
            {showDeleteConfirm && roleToDelete && (
              <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
                <Card className="w-full max-w-md">
                  <CardHeader>
                    <CardTitle>Delete Role</CardTitle>
                    <CardDescription>
                      Are you sure you want to delete the role "{roleToDelete.name}"? This action cannot be undone.
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="flex justify-end gap-2">
                      <Button
                        variant="outline"
                        onClick={() => {
                          setShowDeleteConfirm(false)
                          setRoleToDelete(null)
                        }}
                      >
                        Cancel
                      </Button>
                      <Button variant="destructive" onClick={handleDeleteRole}>
                        Delete Role
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              </div>
            )}

            {/* User Role Assignment Dialog - Disabled: Backend doesn't support user-role assignment endpoints yet
            {showAssignRoleDialog && (
              <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
                <Card className="w-full max-w-md">
                  <CardHeader>
                    <CardTitle>Assign Roles to User</CardTitle>
                    <CardDescription>Enter a user email to view and modify their role assignments</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {assignmentError && (
                        <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded text-sm">
                          {assignmentError}
                        </div>
                      )}

                      <div className="flex gap-2">
                        <Input
                          value={userEmail}
                          onChange={(e) => setUserEmail(e.target.value)}
                          placeholder="Enter user email"
                          type="email"
                        />
                        <Button onClick={handleLookupUserRoles}>Lookup</Button>
                      </div>

                      {userEmail && (
                        <div className="space-y-2">
                          <label className="text-sm font-medium">Roles</label>
                          <div className="space-y-2 max-h-40 overflow-y-auto border rounded p-2">
                            {roles.map((role) => (
                              <label key={role.id} className="flex items-center space-x-2 text-sm">
                                <input
                                  type="checkbox"
                                  checked={userRoles.includes(role.id)}
                                  onChange={() => handleRoleAssignmentToggle(role.id)}
                                  className="rounded border-gray-300"
                                />
                                <span>{role.name}</span>
                                <span className="text-muted-foreground">- {role.description</span>
                              </label>
                            ))}
                          </div>
                        </div>
                      )}

                      <div className="flex justify-end gap-2">
                        <Button
                          variant="outline"
                          onClick={() => {
                            setShowAssignRoleDialog(false)
                            setUserEmail("")
                            setUserRoles([])
                            setAssignmentError("")
                          }}
                        >
                          Close
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            )}
            */}
          </div>
        </main>
      </div>
    // </ProtectedRoute>
  )
}

================
File: frontend/app/admin/layout.tsx
================
// Create the admin layout file to match the CSR layout structure

"use client"

import type React from "react"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { usePermissions } from "@/hooks/usePermissions"
import AppSidebar from "@/components/layout/app-sidebar"
import { cn } from "@/lib/utils"

export default function AdminLayout({ children }: { children: React.ReactNode }) {
  const router = useRouter()
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false)
  const [isLoading, setIsLoading] = useState(true)
  const [hasAccess, setHasAccess] = useState(false)

  const { 
    loading: permissionsLoading, 
    user, 
    canAny,
    isAdmin 
  } = usePermissions()

  useEffect(() => {
    // Wait for permissions to load
    if (permissionsLoading) {
      return
    }

    // Check authentication and admin permissions
    if (!user || !user.isLoggedIn) {
      router.push("/login")
      return
    }

    // Check for admin access using backend permissions
    const adminPermissions = [
      'ACCESS_ADMIN_DASHBOARD',
      'MANAGE_SETTINGS', 
      'MANAGE_USERS',
      'MANAGE_ROLES'
    ]

    const hasAdminAccess = canAny(adminPermissions) || isAdmin

    if (!hasAdminAccess) {
      console.log("User does not have admin permissions, redirecting to appropriate dashboard")
      
      // Redirect to appropriate dashboard based on user's permissions
      if (canAny(['ACCESS_CSR_DASHBOARD', 'VIEW_ALL_ORDERS', 'CREATE_ORDER'])) {
        router.push("/csr/dashboard")
      } else if (canAny(['ACCESS_FUELER_DASHBOARD', 'PERFORM_FUELING_TASK'])) {
        router.push("/fueler/dashboard")
      } else if (canAny(['ACCESS_MEMBER_DASHBOARD']) || user.is_active) {
        router.push("/member/dashboard")
      } else {
        router.push("/login")
      }
      return
    }

    setHasAccess(true)
    setIsLoading(false)
  }, [
    permissionsLoading, 
    user, 
    canAny, 
    isAdmin,
    router
  ])

  // Show loading while permissions are being checked
  if (isLoading || permissionsLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-background">
        <div className="flex flex-col items-center gap-4">
          <div className="h-8 w-8 border-4 border-primary border-t-transparent rounded-full animate-spin"></div>
          <p className="text-sm text-muted-foreground">
            {permissionsLoading ? "Loading permissions..." : "Checking admin access..."}
          </p>
        </div>
      </div>
    )
  }

  // Don't render anything if user doesn't have access (they'll be redirected)
  if (!hasAccess) {
    return null
  }

  return (
    <div className="min-h-screen bg-background">
      <AppSidebar 
        collapsed={sidebarCollapsed} 
        setCollapsed={setSidebarCollapsed} 
        userRole="admin" // Keep for compatibility, but sidebar should use permissions internally
      />
      <div
        className={cn(
          "transition-all duration-300 ease-in-out min-h-screen",
          sidebarCollapsed ? "lg:pl-[80px]" : "lg:pl-[280px]",
        )}
      >
        <main className="p-4 md:p-6 lg:p-8">
          <div className="mx-auto max-w-7xl">{children}</div>
        </main>
      </div>
    </div>
  )
}

================
File: frontend/app/contexts/permission-context.tsx
================
"use client"

import type React from "react"
import { createContext, useContext, useEffect, useState, useCallback } from "react"
import { 
  fetchAndStoreUserPermissions, 
  getCurrentUser, 
  isAuthenticated,
  hasPermission,
  hasAnyPermission,
  hasAllPermissions,
  hasResourcePermission,
  getPermissionSource,
  refreshUserPermissions,
  type EnhancedUser,
  type EffectivePermission,
  type PermissionSummary
} from "@/app/services/auth-service"

interface PermissionContextType {
  // Legacy compatibility
  userPermissions: string[]
  userRoles: Array<{ id: number; name: string }>
  checkPermission: (permissionId: string) => boolean
  loading: boolean
  
  // Enhanced permission features
  effectivePermissions: Record<string, EffectivePermission>
  permissionSummary: PermissionSummary | null
  user: EnhancedUser | null
  
  // Enhanced permission checking methods
  hasPermission: (permissionName: string) => boolean
  hasAnyPermission: (permissionNames: string[]) => boolean
  hasAllPermissions: (permissionNames: string[]) => boolean
  hasResourcePermission: (permissionName: string, resourceType?: string, resourceId?: string) => boolean
  
  // Permission metadata
  getPermissionSource: (permissionName: string) => string | null
  isPermissionFromGroup: (permissionName: string) => boolean
  isPermissionFromRole: (permissionName: string) => boolean
  isDirectPermission: (permissionName: string) => boolean
  
  // Utility methods
  refreshPermissions: () => Promise<boolean>
  getAccessibleResources: (permissionName: string, resourceType: string) => string[]
  canPerformAction: (action: string, resourceType: string, resourceId?: string) => boolean
}

const PermissionContext = createContext<PermissionContextType>({
  // Legacy compatibility
  userPermissions: [],
  userRoles: [],
  checkPermission: () => false,
  loading: true,
  
  // Enhanced features
  effectivePermissions: {},
  permissionSummary: null,
  user: null,
  
  // Enhanced methods
  hasPermission: () => false,
  hasAnyPermission: () => false,
  hasAllPermissions: () => false,
  hasResourcePermission: () => false,
  
  // Metadata methods
  getPermissionSource: () => null,
  isPermissionFromGroup: () => false,
  isPermissionFromRole: () => false,
  isDirectPermission: () => false,
  
  // Utility methods
  refreshPermissions: async () => false,
  getAccessibleResources: () => [],
  canPerformAction: () => false,
})

export const usePermissions = () => useContext(PermissionContext)

export const PermissionProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  // Legacy state for backward compatibility
  const [userPermissions, setUserPermissions] = useState<string[]>([])
  const [userRoles, setUserRoles] = useState<Array<{ id: number; name: string }>>([])
  const [loading, setLoading] = useState(true)
  
  // Enhanced state
  const [effectivePermissions, setEffectivePermissions] = useState<Record<string, EffectivePermission>>({})
  const [permissionSummary, setPermissionSummary] = useState<PermissionSummary | null>(null)
  const [user, setUser] = useState<EnhancedUser | null>(null)
  const [lastRefresh, setLastRefresh] = useState<string | null>(null)

  const loadPermissions = useCallback(async () => {
    try {
      // Check if we're in a browser environment
      if (typeof window === 'undefined') {
        setLoading(false)
        return
      }

      if (isAuthenticated()) {
        const currentUser = getCurrentUser()
        if (currentUser) {
          setUser(currentUser)
          
          // Set legacy roles for backward compatibility
          if (currentUser.roles) {
            setUserRoles(currentUser.roles)
          } else {
            setUserRoles([])
          }

          // If permissions are already loaded and recent, use them
          const permissionsAge = currentUser.permissions_loaded_at 
            ? Date.now() - new Date(currentUser.permissions_loaded_at).getTime()
            : Infinity
          
          // Refresh if permissions are older than 5 minutes or not loaded
          if (permissionsAge > 5 * 60 * 1000 || !currentUser.permissions) {
            try {
              const permissionData = await fetchAndStoreUserPermissions()
              
              // Update state with fresh data
              setUserPermissions(permissionData.permissions || [])
              setEffectivePermissions(permissionData.effective_permissions || {})
              setPermissionSummary(permissionData.summary || null)
              setLastRefresh(new Date().toISOString())
              
              // Update user state with fresh data
              const updatedUser = getCurrentUser()
              if (updatedUser) {
                setUser(updatedUser)
              }
            } catch (error) {
              console.error("Failed to fetch fresh permissions:", error)
              
              // Fall back to cached permissions if available
              if (currentUser.permissions) {
                setUserPermissions(currentUser.permissions)
                setEffectivePermissions(currentUser.effective_permissions || {})
                setPermissionSummary(currentUser.permission_summary || null)
              } else {
                setUserPermissions([])
                setEffectivePermissions({})
                setPermissionSummary(null)
              }
            }
          } else {
            // Use cached permissions
            setUserPermissions(currentUser.permissions || [])
            setEffectivePermissions(currentUser.effective_permissions || {})
            setPermissionSummary(currentUser.permission_summary || null)
            setLastRefresh(currentUser.permissions_loaded_at || null)
          }
        } else {
          // User data not found
          setUser(null)
          setUserPermissions([])
          setUserRoles([])
          setEffectivePermissions({})
          setPermissionSummary(null)
        }
      } else {
        // Not authenticated
        setUser(null)
        setUserPermissions([])
        setUserRoles([])
        setEffectivePermissions({})
        setPermissionSummary(null)
      }
    } catch (error) {
      console.error("Error loading permissions and roles:", error)
      setUser(null)
      setUserPermissions([])
      setUserRoles([])
      setEffectivePermissions({})
      setPermissionSummary(null)
    } finally {
      setLoading(false)
    }
  }, [])

  useEffect(() => {
    loadPermissions()
  }, [loadPermissions])

  // Legacy permission checking for backward compatibility
  const checkPermission = useCallback((permissionId: string): boolean => {
    return userPermissions.includes(permissionId)
  }, [userPermissions])

  // Enhanced permission checking methods
  const hasPermissionMethod = useCallback((permissionName: string): boolean => {
    return hasPermission(permissionName, user)
  }, [user])

  const hasAnyPermissionMethod = useCallback((permissionNames: string[]): boolean => {
    return hasAnyPermission(permissionNames, user)
  }, [user])

  const hasAllPermissionsMethod = useCallback((permissionNames: string[]): boolean => {
    return hasAllPermissions(permissionNames, user)
  }, [user])

  const hasResourcePermissionMethod = useCallback((
    permissionName: string, 
    resourceType?: string, 
    resourceId?: string
  ): boolean => {
    return hasResourcePermission(permissionName, resourceType, resourceId, user)
  }, [user])

  // Permission metadata methods
  const getPermissionSourceMethod = useCallback((permissionName: string): string | null => {
    return getPermissionSource(permissionName, user)
  }, [user])

  const isPermissionFromGroupMethod = useCallback((permissionName: string): boolean => {
    const source = getPermissionSource(permissionName, user)
    return source ? source.startsWith('group:') : false
  }, [user])

  const isPermissionFromRoleMethod = useCallback((permissionName: string): boolean => {
    const source = getPermissionSource(permissionName, user)
    return source ? source.startsWith('role:') : false
  }, [user])

  const isDirectPermissionMethod = useCallback((permissionName: string): boolean => {
    const source = getPermissionSource(permissionName, user)
    return source === 'direct'
  }, [user])

  // Utility methods
  const refreshPermissions = useCallback(async (): Promise<boolean> => {
    setLoading(true)
    try {
      const success = await refreshUserPermissions()
      if (success) {
        await loadPermissions()
      }
      return success
    } catch (error) {
      console.error("Failed to refresh permissions:", error)
      return false
    } finally {
      setLoading(false)
    }
  }, [loadPermissions])

  const getAccessibleResources = useCallback((permissionName: string, resourceType: string): string[] => {
    if (!effectivePermissions) return []
    
    const accessibleResources: string[] = []
    
    // Check for global permission (allows access to all resources)
    if (userPermissions.includes(permissionName)) {
      return ['*'] // Wildcard indicates access to all resources
    }
    
    // Look for resource-specific permissions
    Object.keys(effectivePermissions).forEach(key => {
      if (key.startsWith(`${permissionName}:${resourceType}:`)) {
        const resourceId = key.split(':')[2]
        if (resourceId && resourceId !== 'any') {
          accessibleResources.push(resourceId)
        }
      }
    })
    
    return accessibleResources
  }, [effectivePermissions, userPermissions])

  const canPerformAction = useCallback((
    action: string, 
    resourceType: string, 
    resourceId?: string
  ): boolean => {
    // Common permission patterns
    const permissionPatterns = [
      `${action}_${resourceType}`,
      `${action}_any_${resourceType}`,
      `manage_${resourceType}`,
      `ACCESS_ADMIN_DASHBOARD`
    ]
    
    // If resource ID is provided, also check ownership-based permissions
    if (resourceId) {
      permissionPatterns.unshift(`${action}_own_${resourceType}`)
    }
    
    return hasAnyPermission(permissionPatterns, user)
  }, [user])

  const contextValue: PermissionContextType = {
    // Legacy compatibility
    userPermissions,
    userRoles,
    checkPermission,
    loading,
    
    // Enhanced features
    effectivePermissions,
    permissionSummary,
    user,
    
    // Enhanced methods
    hasPermission: hasPermissionMethod,
    hasAnyPermission: hasAnyPermissionMethod,
    hasAllPermissions: hasAllPermissionsMethod,
    hasResourcePermission: hasResourcePermissionMethod,
    
    // Metadata methods
    getPermissionSource: getPermissionSourceMethod,
    isPermissionFromGroup: isPermissionFromGroupMethod,
    isPermissionFromRole: isPermissionFromRoleMethod,
    isDirectPermission: isDirectPermissionMethod,
    
    // Utility methods
    refreshPermissions,
    getAccessibleResources,
    canPerformAction,
  }

  return (
    <PermissionContext.Provider value={contextValue}>
      {children}
    </PermissionContext.Provider>
  )
}

================
File: frontend/app/csr/dashboard/page.tsx
================
"use client"

import { useEffect, useState } from "react"
import { useRouter } from "next/navigation"
import { motion } from "framer-motion"
import { BarChart3, Clock, CheckCircle, AlertCircle, FileText, Plus } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { getFuelOrders, getFuelOrderStats, type FuelOrderDisplay } from "@/app/services/fuel-order-service"
import PermissionDebug from "@/app/components/permission-debug"

export default function CSRDashboard() {
  const router = useRouter()
  const [user, setUser] = useState<any>(null)
  const [fuelOrders, setFuelOrders] = useState<FuelOrderDisplay[]>([])
  const [ordersLoading, setOrdersLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [activeTab, setActiveTab] = useState("all")
  const [currentDate, setCurrentDate] = useState<string>("")
  const [recentReceipts, setRecentReceipts] = useState<any[]>([])

  useEffect(() => {
    // Set current date
    const now = new Date()
    setCurrentDate(
      now.toLocaleDateString("en-US", {
        day: "numeric",
        month: "short",
        year: "numeric",
      }),
    )

    // Mock receipts data
    setRecentReceipts([
      {
        id: "R-2001",
        tailNumber: "N12345",
        customer: "SkyWay Airlines",
        fuelType: "Jet A",
        quantity: 795,
        totalAmount: 3975.0,
        date: new Date(Date.now() - 2 * 60 * 60 * 1000),
        paymentMethod: "Credit Card",
        status: "Paid",
        fuelerName: "Tyler Johnson",
        location: "Gate A-12",
      },
      {
        id: "R-2002",
        tailNumber: "N98765",
        customer: "Mountain Air",
        fuelType: "Jet A",
        quantity: 650,
        totalAmount: 3250.0,
        date: new Date(Date.now() - 8 * 60 * 60 * 1000),
        paymentMethod: "Account",
        status: "Paid",
        fuelerName: "Josh Davis",
        location: "Gate B-5",
      },
      {
        id: "R-2003",
        tailNumber: "N54789",
        customer: "Executive Jets",
        fuelType: "Jet A",
        quantity: 1200,
        totalAmount: 6000.0,
        date: new Date(Date.now() - 24 * 60 * 60 * 1000),
        paymentMethod: "Credit Card",
        status: "Paid",
        fuelerName: "Sarah Miller",
        location: "Gate C-8",
      },
    ])

    // Get user data
    const userData = localStorage.getItem("fboUser")
    if (userData) {
      setUser(JSON.parse(userData))
    }

    loadFuelOrders()
  }, [])

  const loadFuelOrders = async () => {
    try {
      setOrdersLoading(true)
      setError(null)

      // Load fuel orders from backend API
      const orders = await getFuelOrders()
      setFuelOrders(orders)
    } catch (error) {
      console.error("Error loading fuel orders:", error)
      setError("Failed to load fuel orders. Please try again.")
      setFuelOrders([])
    } finally {
      setOrdersLoading(false)
    }
  }

  const handleTabChange = (value: string) => {
    setActiveTab(value)
  }

  const getFilteredOrders = () => {
    switch (activeTab) {
      case "pending":
        return fuelOrders.filter((o) => o.status === "PENDING")
      case "in_progress":
        return fuelOrders.filter((o) => o.status === "IN_PROGRESS")
      case "completed":
        return fuelOrders.filter((o) => o.status === "COMPLETED")
      default:
        return fuelOrders
    }
  }

  // Get counts for quick statistics
  const getOrderCounts = () => {
    const pending = fuelOrders.filter((o) => o.status === "PENDING").length
    const inProgress = fuelOrders.filter((o) => o.status === "IN_PROGRESS").length
    const completed = fuelOrders.filter((o) => o.status === "COMPLETED").length

    return { pending, inProgress, completed, total: fuelOrders.length }
  }

  const handleViewFuelOrderDetails = (orderId: number) => {
    // Navigate to order details page
    router.push(`/csr/fuel-orders/${orderId}`)
  }

  const handleViewReceiptDetails = (receiptId: string) => {
    // Store the receipt details in localStorage for the detail page
    const receipt = recentReceipts.find((r) => r.id === receiptId)
    if (receipt) {
      localStorage.setItem(`receipt_${receiptId}`, JSON.stringify(receipt))
      router.push(`/csr/receipts/${receiptId}`)
    }
  }

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "PENDING":
        return (
          <div className="flex items-center gap-1.5">
            <div className="w-2 h-2 rounded-full bg-warning dark:bg-warning"></div>
            <span className="text-foreground text-sm font-medium">{status === "PENDING" ? "Pending" : status}</span>
          </div>
        )
      case "IN_PROGRESS":
        return (
          <div className="flex items-center gap-1.5">
            <div className="w-2 h-2 rounded-full bg-primary dark:bg-primary"></div>
            <span className="text-foreground text-sm font-medium">
              {status === "IN_PROGRESS" ? "In Progress" : status}
            </span>
          </div>
        )
      case "COMPLETED":
        return (
          <div className="flex items-center gap-1.5">
            <div className="w-2 h-2 rounded-full bg-success dark:bg-success"></div>
            <span className="text-foreground text-sm font-medium">{status === "COMPLETED" ? "Completed" : status}</span>
          </div>
        )
      default:
        return <span className="text-foreground text-sm font-medium">{status}</span>
    }
  }

  // Format timestamp
  const formatTimestamp = (timestamp: string | Date) => {
    const date = new Date(timestamp)
    const now = new Date()
    const diffMs = now.getTime() - date.getTime()
    const diffMins = Math.round(diffMs / 60000)
    const diffHours = Math.round(diffMs / 3600000)

    if (diffMins < 60) {
      return `${diffMins} min${diffMins !== 1 ? "s" : ""} ago`
    } else if (diffHours < 24) {
      return `${diffHours} hour${diffHours !== 1 ? "s" : ""} ago`
    } else {
      return date.toLocaleDateString("en-US", {
        month: "short",
        day: "numeric",
      })
    }
  }

  // Format currency
  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat("en-US", {
      style: "currency",
      currency: "USD",
    }).format(amount)
  }

  // Framer Motion variants for animations
  const cardVariants = {
    initial: { opacity: 0, y: 10 },
    animate: {
      opacity: 1,
      y: 0,
      transition: {
        type: "spring",
        stiffness: 400,
        damping: 25,
      },
    },
    hover: {
      y: -5,
      transition: {
        type: "spring",
        stiffness: 300,
        damping: 20,
      },
    },
    tap: {
      scale: 0.98,
      transition: {
        type: "spring",
        stiffness: 500,
        damping: 20,
      },
    },
  }

  const buttonVariants = {
    initial: { scale: 1 },
    hover: {
      scale: 1.05,
      transition: {
        type: "spring",
        stiffness: 400,
        damping: 10,
      },
    },
    tap: {
      scale: 0.95,
      transition: {
        type: "spring",
        stiffness: 400,
        damping: 15,
      },
    },
  }

  const listItemVariants = {
    initial: { opacity: 0, x: -5 },
    animate: (i: number) => ({
      opacity: 1,
      x: 0,
      transition: {
        delay: i * 0.1,
        type: "spring",
        stiffness: 300,
        damping: 30,
      },
    }),
    hover: {
      x: 2,
      backgroundColor: "rgba(240, 242, 245, 0.5)",
      transition: {
        type: "spring",
        stiffness: 300,
        damping: 20,
      },
    },
  }

  const statCardVariants = {
    initial: { opacity: 0, scale: 0.9 },
    animate: {
      opacity: 1,
      scale: 1,
      transition: {
        type: "spring",
        stiffness: 300,
        damping: 20,
      },
    },
    hover: {
      y: -5,
      boxShadow: "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",
      transition: {
        type: "spring",
        stiffness: 300,
        damping: 20,
      },
    },
  }

  const orderCounts = getOrderCounts()

  return (
    <div className="space-y-6">
      {/* Permission Debug Component (development only) */}
      <PermissionDebug />
      
      {/* Welcome section */}
      <motion.div className="bg-card p-6 rounded-lg border" initial="initial" animate="animate" variants={cardVariants}>
        <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
          <div>
            <h1 className="text-2xl font-bold text-foreground">Welcome back, {user?.name || "CSR"}</h1>
            <p className="text-muted-foreground mt-1">Here's what's happening with your fuel orders today.</p>
          </div>
          <motion.div variants={buttonVariants} whileHover="hover" whileTap="tap">
            <Button onClick={() => router.push("/csr/fuel-orders/new")} className="gap-2">
              <Plus className="h-4 w-4" />
              <span>New Fuel Order</span>
            </Button>
          </motion.div>
        </div>
      </motion.div>

      {/* Quick Statistics */}
      <motion.div className="bg-card p-6 rounded-lg border" initial="initial" animate="animate" variants={cardVariants}>
        <h2 className="text-xl font-semibold text-foreground mb-6">Quick Statistics</h2>

        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <motion.div className="bg-muted p-4 rounded-lg border" variants={statCardVariants} whileHover="hover">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Total Orders</p>
                <h3 className="text-2xl font-bold text-foreground mt-1">{orderCounts.total}</h3>
              </div>
              <div className="p-2 bg-primary/10 rounded-full">
                <BarChart3 className="h-6 w-6 text-primary" />
              </div>
            </div>
          </motion.div>

          <motion.div className="bg-muted p-4 rounded-lg border" variants={statCardVariants} whileHover="hover">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Pending</p>
                <h3 className="text-2xl font-bold text-foreground mt-1">{orderCounts.pending}</h3>
              </div>
              <div className="p-2 bg-warning/10 rounded-full">
                <AlertCircle className="h-6 w-6 text-warning" />
              </div>
            </div>
          </motion.div>

          <motion.div className="bg-muted p-4 rounded-lg border" variants={statCardVariants} whileHover="hover">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">In Progress</p>
                <h3 className="text-2xl font-bold text-foreground mt-1">{orderCounts.inProgress}</h3>
              </div>
              <div className="p-2 bg-primary/10 rounded-full">
                <Clock className="h-6 w-6 text-primary" />
              </div>
            </div>
          </motion.div>

          <motion.div className="bg-muted p-4 rounded-lg border" variants={statCardVariants} whileHover="hover">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Completed</p>
                <h3 className="text-2xl font-bold text-foreground mt-1">{orderCounts.completed}</h3>
              </div>
              <div className="p-2 bg-success/10 rounded-full">
                <CheckCircle className="h-6 w-6 text-success" />
              </div>
            </div>
          </motion.div>
        </div>
      </motion.div>

      {/* Fuel Orders */}
      <Card>
        <CardHeader className="flex flex-row items-center justify-between">
          <div>
            <CardTitle>Fuel Orders</CardTitle>
            <CardDescription>Manage and track all fuel orders</CardDescription>
          </div>
          <Button variant="outline" onClick={() => router.push("/csr/fuel-orders")}>
            <FileText className="mr-2 h-4 w-4" />
            View All Orders
          </Button>
        </CardHeader>
        <CardContent>
          {error && (
            <div className="bg-red-50 border border-red-200 rounded-md p-3 mb-4">
              <p className="text-red-500 text-sm">{error}</p>
            </div>
          )}
          {ordersLoading ? (
            <div className="flex justify-center items-center py-8">
              <motion.div
                className="h-8 w-8 border-4 border-primary border-t-transparent rounded-full"
                animate={{
                  rotate: 360,
                  transition: {
                    repeat: Number.POSITIVE_INFINITY,
                    duration: 1,
                    ease: "linear",
                  },
                }}
              ></motion.div>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead>
                  <tr className="border-b">
                    <th className="text-left py-3 px-4 text-xs font-medium text-muted-foreground uppercase tracking-wider">
                      Order ID
                    </th>
                    <th className="text-left py-3 px-4 text-xs font-medium text-muted-foreground uppercase tracking-wider">
                      Tail Number
                    </th>
                    <th className="text-left py-3 px-4 text-xs font-medium text-muted-foreground uppercase tracking-wider">
                      Customer
                    </th>
                    <th className="text-left py-3 px-4 text-xs font-medium text-muted-foreground uppercase tracking-wider">
                      Status
                    </th>
                    <th className="text-right py-3 px-4 text-xs font-medium text-muted-foreground uppercase tracking-wider">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody>
                  {getFilteredOrders()
                    .slice(0, 5)
                    .map((order, index) => (
                      <motion.tr
                        key={order.id}
                        custom={index}
                        variants={listItemVariants}
                        initial="initial"
                        animate="animate"
                        whileHover="hover"
                        className="cursor-pointer border-b"
                        onClick={() => handleViewFuelOrderDetails(order.id)}
                      >
                        <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-foreground">{order.id}</td>
                        <td className="px-4 py-3 whitespace-nowrap text-sm text-muted-foreground">
                          {order.aircraft_tail_number}
                        </td>
                        <td className="px-4 py-3 whitespace-nowrap text-sm text-muted-foreground">{order.customer_name}</td>
                        <td className="px-4 py-3 whitespace-nowrap">{getStatusBadge(order.status)}</td>
                        <td className="px-4 py-3 whitespace-nowrap text-sm text-right">
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={(e) => {
                              e.stopPropagation()
                              handleViewFuelOrderDetails(order.id)
                            }}
                          >
                            View Details
                          </Button>
                        </td>
                      </motion.tr>
                    ))}
                </tbody>
              </table>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Recent Receipts */}
      <Card>
        <CardHeader className="flex flex-row items-center justify-between">
          <div>
            <CardTitle>Recent Receipts</CardTitle>
            <CardDescription>View and manage recent transaction receipts</CardDescription>
          </div>
          <Button variant="outline" onClick={() => router.push("/csr/receipts")}>
            <FileText className="mr-2 h-4 w-4" />
            View All Receipts
          </Button>
        </CardHeader>
        <CardContent>
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="border-b">
                  <th className="text-left py-3 px-4 text-xs font-medium text-muted-foreground uppercase tracking-wider">
                    Receipt ID
                  </th>
                  <th className="text-left py-3 px-4 text-xs font-medium text-muted-foreground uppercase tracking-wider">
                    Tail Number
                  </th>
                  <th className="text-left py-3 px-4 text-xs font-medium text-muted-foreground uppercase tracking-wider">
                    Customer
                  </th>
                  <th className="text-left py-3 px-4 text-xs font-medium text-muted-foreground uppercase tracking-wider">
                    Amount
                  </th>
                  <th className="text-left py-3 px-4 text-xs font-medium text-muted-foreground uppercase tracking-wider">
                    Date
                  </th>
                  <th className="text-right py-3 px-4 text-xs font-medium text-muted-foreground uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody>
                {recentReceipts.map((receipt, index) => (
                  <motion.tr
                    key={receipt.id}
                    custom={index}
                    variants={listItemVariants}
                    initial="initial"
                    animate="animate"
                    whileHover="hover"
                    className="cursor-pointer border-b"
                    onClick={() => handleViewReceiptDetails(receipt.id)}
                  >
                    <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-foreground">{receipt.id}</td>
                    <td className="px-4 py-3 whitespace-nowrap text-sm text-muted-foreground">{receipt.tailNumber}</td>
                    <td className="px-4 py-3 whitespace-nowrap text-sm text-muted-foreground">{receipt.customer}</td>
                    <td className="px-4 py-3 whitespace-nowrap text-sm text-muted-foreground">
                      {formatCurrency(receipt.totalAmount)}
                    </td>
                    <td className="px-4 py-3 whitespace-nowrap text-sm text-muted-foreground">
                      {formatTimestamp(receipt.date)}
                    </td>
                    <td className="px-4 py-3 whitespace-nowrap text-sm text-right">
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={(e) => {
                          e.stopPropagation()
                          handleViewReceiptDetails(receipt.id)
                        }}
                      >
                        View Receipt
                      </Button>
                    </td>
                  </motion.tr>
                ))}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

================
File: frontend/app/csr/fuel-orders/new/page.tsx
================
"use client"

import type React from "react"

import { useEffect, useState } from "react"
import { useRouter } from "next/navigation"
import { ArrowLeft, Info, Bot, AlertCircle } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Checkbox } from "@/components/ui/checkbox"
import { isAuthenticated } from "@/app/services/auth-service"
import { type User, getActiveLSTs } from "@/app/services/user-service"
import { type FuelTruck, getActiveFuelTrucks } from "@/app/services/fuel-truck-service"
import { 
  type FuelOrderCreateRequest, 
  type FuelOrderDisplay,
  createFuelOrder,
  transformToBackend 
} from "@/app/services/fuel-order-service"
import AircraftLookup from "@/app/components/aircraft-lookup"
import CustomerSelector from "@/app/components/customer-selector"

import Link from "next/link"
import type { Aircraft } from "@/app/services/aircraft-service"
import type { Customer } from "@/app/services/customer-service"

// Enhanced form data interface for the new fields
interface EnhancedFormData {
  aircraft_id: string  // Changed from number to string since we use tail_number as ID
  customer_id: number | undefined // Made optional since customer is now optional
  quantity: string
  priority: 'normal' | 'high' | 'urgent'
  csr_notes: string
  additive_requested: boolean
  location_on_ramp: string
  assigned_lst_name: string
  assigned_truck_name: string
}

export default function NewFuelOrderPage() {
  const router = useRouter()
  const [isLoading, setIsLoading] = useState(true)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [lsts, setLsts] = useState<User[]>([])
  const [fuelTrucks, setFuelTrucks] = useState<FuelTruck[]>([])
  const [isApiConnected, setIsApiConnected] = useState<boolean>(true)
  const [selectedAircraft, setSelectedAircraft] = useState<Aircraft | null>(null)
  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null)

  // Enhanced form state with new fields
  const [formData, setFormData] = useState<EnhancedFormData>({
    aircraft_id: "",
    customer_id: undefined, // Customer is now optional
    quantity: "",
    priority: 'normal',
    csr_notes: "",
    additive_requested: false,
    location_on_ramp: "",
    assigned_lst_name: 'auto-assign',
    assigned_truck_name: 'auto-assign',
  })

  useEffect(() => {
    // Check if user is logged in and is CSR
    if (!isAuthenticated()) {
      router.push("/login")
      return
    }

    const userData = localStorage.getItem("fboUser")
    if (userData) {
      const parsedUser = JSON.parse(userData)
      
      // Check if user has CSR role - handle both array and string formats (same as CSR layout)
      const userRoles = parsedUser.roles || []
      const hasCSRRole = Array.isArray(userRoles) 
        ? userRoles.some(role => role.toLowerCase().includes("customer service") || role.toLowerCase().includes("csr"))
        : false
        
      if (!parsedUser.isLoggedIn || !hasCSRRole) {
        router.push("/login")
        return
      }
    }

    // Load LSTs and fuel trucks
    const loadData = async () => {
      try {
        setIsLoading(true)
        setError(null)

        // Note: Removed API health check as it was causing console 401 errors
        // The actual API calls below will determine if the backend is available
        setIsApiConnected(true) // Assume connected, will be updated based on actual API calls

        // Use Promise.allSettled to handle partial failures
        const results = await Promise.allSettled([getActiveLSTs(), getActiveFuelTrucks()])

        let apiCallsSuccessful = 0

        if (results[0].status === "fulfilled") {
          setLsts(results[0].value)
          apiCallsSuccessful++
        } else {
          console.error("Error loading LSTs:", results[0].reason)
        }

        if (results[1].status === "fulfilled") {
          setFuelTrucks(results[1].value)
          apiCallsSuccessful++
        } else {
          console.error("Error loading fuel trucks:", results[1].reason)
        }

        // Update API connection status based on actual API call results
        setIsApiConnected(apiCallsSuccessful > 0)

        // Show error if both failed
        if (results[0].status === "rejected" && results[1].status === "rejected") {
          setError("Failed to load required data. Using demo data instead.")
        }
      } catch (error) {
        console.error("Error loading data:", error)
        setError("Failed to load required data. Using demo data instead.")
        setIsApiConnected(false)
      } finally {
        setIsLoading(false)
      }
    }

    loadData()
  }, [router])

  // DEBUG: Track state changes
  useEffect(() => {
    console.log('State change detected:', {
      selectedAircraft: selectedAircraft ? { id: selectedAircraft.id, tailNumber: selectedAircraft.tailNumber } : null,
      formData_aircraft_id: formData.aircraft_id
    })
  }, [selectedAircraft, formData.aircraft_id])

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target
    setFormData((prev) => ({ ...prev, [name]: value }))
  }

  const handleSelectChange = (name: string, value: string) => {
    setFormData((prev) => ({ ...prev, [name]: value }))
  }

  const handleCheckboxChange = (name: string, checked: boolean) => {
    setFormData((prev) => ({ ...prev, [name]: checked }))
  }

  const handleAircraftFound = (aircraft: Aircraft) => {
    console.log('Aircraft found handler called with:', aircraft)
    
    // Validate aircraft object
    if (!aircraft || !aircraft.id) {
      console.error('Invalid aircraft object received:', aircraft)
      setError("Invalid aircraft data received. Please try again.")
      return
    }
    
    // Update both state variables synchronously
    setSelectedAircraft(aircraft)
    setFormData((prev) => ({
      ...prev,
      aircraft_id: aircraft.id,
    }))
    
    console.log('Aircraft state updated:', {
      aircraftId: aircraft.id,
      tailNumber: aircraft.tailNumber
    })
    
    // Clear any previous aircraft lookup errors
    if (error?.includes("Aircraft with tail number")) {
      setError(null)
    }
  }

  const handleAircraftNotFound = (tailNumber: string) => {
    setSelectedAircraft(null)
    setFormData((prev) => ({
      ...prev,
      aircraft_id: "",
    }))
    setError(`Aircraft "${tailNumber}" not found. Please verify the tail number and try again.`)
  }

  const handleCustomerSelected = (customer: Customer) => {
    setSelectedCustomer(customer)
    setFormData((prev) => ({
      ...prev,
      customer_id: customer.id,
    }))
    // Clear any previous customer errors
    if (error?.includes("customer")) {
      setError(null)
    }
  }

  const handleCustomerCleared = () => {
    setSelectedCustomer(null)
    setFormData((prev) => ({
      ...prev,
      customer_id: undefined,
    }))
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setError(null)
    setIsSubmitting(true)

    try {
      // Get the current state values at the time of submission
      const currentSelectedAircraft = selectedAircraft
      const currentFormData = formData
      
      console.log('Form submission - Current state:', {
        selectedAircraft: currentSelectedAircraft,
        formData: currentFormData
      })

      // Validate required fields using current state
      if (!currentSelectedAircraft || !currentSelectedAircraft.id) {
        console.error('VALIDATION FAILED: selectedAircraft:', currentSelectedAircraft, 'selectedAircraft?.id:', currentSelectedAircraft?.id)
        throw new Error("Please select an aircraft")
      }
      
      // Also check formData.aircraft_id as a backup
      if (!currentFormData.aircraft_id) {
        console.error('VALIDATION FAILED: formData.aircraft_id is missing:', currentFormData.aircraft_id)
        throw new Error("Please select an aircraft")
      }
      
      // Customer is now optional - no validation required
      if (!currentFormData.quantity || parseFloat(currentFormData.quantity) <= 0) {
        throw new Error("Please enter a valid quantity")
      }

      // Transform form data to backend format using the new service layer
      const displayData: Partial<FuelOrderDisplay> = {
        aircraft_id: currentSelectedAircraft.id, // Use selectedAircraft.id as primary source
        customer_id: selectedCustomer?.id || undefined, // Use actual customer ID or undefined if no customer selected
        quantity: currentFormData.quantity,
        priority: currentFormData.priority,
        csr_notes: currentFormData.csr_notes,
        additive_requested: currentFormData.additive_requested,
        location_on_ramp: currentFormData.location_on_ramp,
        assigned_lst_name: currentFormData.assigned_lst_name,
        assigned_truck_name: currentFormData.assigned_truck_name,
      }

      // Transform to backend format
      const backendData = await transformToBackend(displayData)

      // Add the fuel_type from the selected aircraft (required by backend)
      const fuelOrderRequest: FuelOrderCreateRequest = {
        ...backendData,
        fuel_type: currentSelectedAircraft.preferredFuelType, // Get fuel type from selected aircraft
      } as FuelOrderCreateRequest

      // Create the fuel order using the new service
      const result = await createFuelOrder(fuelOrderRequest)

      // Show success message before redirecting
      setError(null)

      // Redirect after a short delay to show success
      setTimeout(() => {
        router.push(`/csr/fuel-orders/${result.id}`)
      }, 1000)
    } catch (error) {
      console.error("Error creating fuel order:", error)
      setError(error instanceof Error ? error.message : "Failed to create fuel order. Please try again.")
    } finally {
      setIsSubmitting(false)
    }
  }

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="flex flex-col items-center gap-4">
          <div className="h-8 w-8 border-4 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
          <p>Loading...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">


      <main className="container px-4 md:px-6 py-6 md:py-8">
        <div className="flex flex-col gap-6 max-w-4xl mx-auto">
          <div className="flex items-center gap-2">
            <Button variant="ghost" size="sm" asChild>
              <Link href="/csr/dashboard">
                <ArrowLeft className="h-4 w-4 mr-1" /> Back to Dashboard
              </Link>
            </Button>
          </div>

          <Card className="bg-white border border-gray-200 shadow-sm">
            <CardHeader>
              <CardTitle>Create New Fuel Order</CardTitle>
              <CardDescription>Fill in the details to create a new fuel order</CardDescription>
            </CardHeader>
            <CardContent>
              {/* Error Display */}
              {error && (
                <div className="mb-4 p-4 bg-red-50 border border-red-200 rounded-md">
                  <div className="flex items-center gap-2 text-red-800">
                    <AlertCircle className="h-4 w-4" />
                    <span className="font-medium">Error</span>
                  </div>
                  <p className="text-red-700 mt-1">{error}</p>
                </div>
              )}


              
              <form onSubmit={handleSubmit} className="space-y-4">
                {/* Aircraft Information Section */}
                <div className="space-y-2">
                  <AircraftLookup 
                    onAircraftFound={handleAircraftFound} 
                    onAircraftNotFound={handleAircraftNotFound}
                  />
                </div>

                {/* Customer Information Section */}
                <div className="border-t pt-4 space-y-2">
                  <CustomerSelector 
                    onCustomerSelected={handleCustomerSelected}
                    onCustomerCleared={handleCustomerCleared}
                    initialCustomerId={formData.customer_id}
                    required={false}
                  />
                </div>

                {/* Fuel Details Section */}
                <div className="border-t pt-4 space-y-2">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="quantity">Quantity (gallons) *</Label>
                      <Input
                        id="quantity"
                        name="quantity"
                        type="number"
                        min="1"
                        step="0.1"
                        placeholder="Enter quantity"
                        required
                        value={formData.quantity}
                        onChange={handleInputChange}
                      />
                      {selectedAircraft && selectedAircraft.fuelCapacity && (
                        <div className="text-xs text-blue-600 flex items-center gap-1 mt-1">
                          <Info className="h-3 w-3" />
                          Max capacity: {selectedAircraft.fuelCapacity} gallons
                        </div>
                      )}
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="priority">Priority</Label>
                      <Select
                        onValueChange={(value) => handleSelectChange("priority", value)}
                        value={formData.priority}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Select priority" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="normal">Normal</SelectItem>
                          <SelectItem value="high">High Priority</SelectItem>
                          <SelectItem value="urgent">Urgent</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <div className="flex items-center space-x-2">
                    <Checkbox
                      id="additive_requested"
                      checked={formData.additive_requested}
                      onCheckedChange={(checked) => handleCheckboxChange("additive_requested", checked as boolean)}
                    />
                    <Label htmlFor="additive_requested" className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
                      Additive Requested
                    </Label>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="location_on_ramp">Location on Ramp</Label>
                    <Input
                      id="location_on_ramp"
                      name="location_on_ramp"
                      type="text"
                      placeholder="e.g., Hangar 5, Gate A2, Terminal Ramp"
                      value={formData.location_on_ramp}
                      onChange={handleInputChange}
                    />
                  </div>
                </div>

                {/* Assignment Section */}
                <div className="border-t pt-4 space-y-2">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="assigned_lst_name">Assigned LST</Label>
                      <Select
                        onValueChange={(value) => handleSelectChange("assigned_lst_name", value)}
                        value={formData.assigned_lst_name}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Select LST" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="auto-assign">
                            <div className="flex items-center gap-2">
                              <Bot className="h-4 w-4 text-blue-500" />
                              <span>Auto-assign best LST</span>
                            </div>
                          </SelectItem>
                          {lsts.map((lst) => (
                            <SelectItem key={lst.id} value={lst.name || `User ${lst.id}`}>
                              {lst.name || `User ${lst.id}`}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="assigned_truck_name">Assigned Fuel Truck</Label>
                      <Select
                        onValueChange={(value) => handleSelectChange("assigned_truck_name", value)}
                        value={formData.assigned_truck_name}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Select fuel truck" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="auto-assign">
                            <div className="flex items-center gap-2">
                              <Bot className="h-4 w-4 text-blue-500" />
                              <span>Auto-assign best truck</span>
                            </div>
                          </SelectItem>
                          {fuelTrucks.map((truck) => (
                            <SelectItem 
                              key={truck.id} 
                              value={truck.truck_number}
                              disabled={!truck.is_active}
                            >
                              <div className="flex items-center justify-between w-full">
                                <span>{truck.truck_number}</span>
                                <span className="text-xs text-gray-500 ml-2">
                                  {truck.capacity}gal, {truck.is_active ? 'Available' : 'Unavailable'}
                                </span>
                              </div>
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                </div>

                {/* Notes Section */}
                <div className="border-t pt-4 space-y-2">
                  <div className="space-y-2">
                    <Label htmlFor="csr_notes">CSR Notes</Label>
                                          <Textarea
                        id="csr_notes"
                        name="csr_notes"
                        placeholder="Special instructions, customer requests, etc."
                        rows={2}
                        value={formData.csr_notes}
                        onChange={handleInputChange}
                      />
                    </div>
                  </div>
                </form>
              </CardContent>
              <CardFooter className="flex justify-between border-t pt-4">
              <Button variant="outline" asChild>
                <Link href="/csr/dashboard">Cancel</Link>
              </Button>
              <Button
                type="submit"
                onClick={handleSubmit}
                disabled={isSubmitting}
                className="bg-blue-500 hover:bg-blue-600"
              >
                {isSubmitting ? (
                  <>
                    <span className="mr-2">Creating...</span>
                    <div className="h-4 w-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                  </>
                ) : (
                  "Create Fuel Order"
                )}
              </Button>
            </CardFooter>
          </Card>
        </div>
      </main>
    </div>
  )
}

================
File: frontend/app/csr/layout.tsx
================
"use client"

import type React from "react"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { usePermissions } from "@/hooks/usePermissions"
import AppSidebar from "@/components/layout/app-sidebar"
import { cn } from "@/lib/utils"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { Button } from "@/components/ui/button"
import { RefreshCw, AlertTriangle } from "lucide-react"

export default function CSRLayout({ children }: { children: React.ReactNode }) {
  const router = useRouter()
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false)
  const [isLoading, setIsLoading] = useState(true)
  const [hasAccess, setHasAccess] = useState(false)
  const [debugInfo, setDebugInfo] = useState<any>(null)
  const [showDebug, setShowDebug] = useState(false)

  const { 
    loading: permissionsLoading, 
    user, 
    canAny,
    isCSR,
    userPermissions,
    refresh
  } = usePermissions()

  useEffect(() => {
    // Wait for permissions to load
    if (permissionsLoading) {
      return
    }

    // Check authentication and CSR permissions
    if (!user || !user.isLoggedIn) {
      console.log("CSR Layout: User not authenticated, redirecting to login")
      router.push("/login")
      return
    }

    // Check for CSR access using backend permissions
    const csrPermissions = [
      'ACCESS_CSR_DASHBOARD',   // Dashboard access permission
      'CREATE_ORDER',           // Allows creating new fuel orders
      'VIEW_ALL_ORDERS',        // Allows viewing all fuel orders  
      'REVIEW_ORDERS',          // Allows CSR/Admin to mark orders as reviewed
      'EXPORT_ORDERS_CSV',      // Allows exporting order data to CSV
      'VIEW_ORDER_STATS',       // Allows viewing order statistics
      'EDIT_FUEL_ORDER',        // Allows editing fuel order details
      'VIEW_CUSTOMERS',         // Allows viewing customer list
      'MANAGE_CUSTOMERS',       // Allows creating, updating, deleting customers
    ]

    const hasCSRAccess = canAny(csrPermissions) || isCSR

    // Create debug information
    const debug = {
      user: {
        id: user.id,
        email: user.email,
        name: user.name,
        isLoggedIn: user.isLoggedIn,
        roles: user.roles
      },
      permissions: {
        total: userPermissions.length,
        list: userPermissions,
        csrPermissions,
        hasAnyCSRPermission: canAny(csrPermissions),
        isCSRFromHook: isCSR,
        hasCSRAccess
      },
      checks: {
        canAny_ACCESS_CSR_DASHBOARD: canAny(['ACCESS_CSR_DASHBOARD']),
        canAny_CREATE_ORDER: canAny(['CREATE_ORDER']),
        canAny_VIEW_ALL_ORDERS: canAny(['VIEW_ALL_ORDERS']),
        canAny_REVIEW_ORDERS: canAny(['REVIEW_ORDERS']),
      }
    }

    setDebugInfo(debug)

    if (!hasCSRAccess) {
      console.log("CSR Layout: User does not have CSR permissions")
      console.log("Debug info:", debug)
      
      // Show debug info in development
      if (process.env.NODE_ENV === 'development') {
        setShowDebug(true)
        setIsLoading(false)
        return
      }
      
      // Redirect to appropriate dashboard based on user's permissions
      if (canAny(['ACCESS_ADMIN_DASHBOARD', 'MANAGE_USERS', 'MANAGE_SETTINGS', 'MANAGE_ROLES'])) {
        console.log("CSR Layout: Redirecting to admin dashboard")
        router.push("/admin/dashboard")
      } else if (canAny(['ACCESS_FUELER_DASHBOARD', 'PERFORM_FUELING_TASK', 'UPDATE_OWN_ORDER_STATUS'])) {
        console.log("CSR Layout: Redirecting to fueler dashboard")
        router.push("/fueler/dashboard")
      } else if (canAny(['ACCESS_MEMBER_DASHBOARD']) || user.is_active) {
        console.log("CSR Layout: Redirecting to member dashboard")
        router.push("/member/dashboard")
      } else {
        console.log("CSR Layout: User not active, redirecting to login")
        router.push("/login")
      }
      return
    }

    console.log("CSR Layout: User has CSR access, proceeding")
    setHasAccess(true)
    setIsLoading(false)
  }, [
    permissionsLoading, 
    user, 
    canAny, 
    isCSR,
    userPermissions,
    router
  ])

  const handleRefreshPermissions = async () => {
    setIsLoading(true)
    try {
      await refresh()
    } catch (error) {
      console.error("Failed to refresh permissions:", error)
    }
    setIsLoading(false)
  }

  // Show loading while permissions are being checked
  if (isLoading || permissionsLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-background">
        <div className="flex flex-col items-center gap-4">
          <div className="h-8 w-8 border-4 border-primary border-t-transparent rounded-full animate-spin"></div>
          <p className="text-sm text-muted-foreground">
            {permissionsLoading ? "Loading permissions..." : "Checking CSR access..."}
          </p>
        </div>
      </div>
    )
  }

  // Show debug information in development when access is denied
  if (showDebug && !hasAccess) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-background p-4">
        <div className="max-w-2xl w-full space-y-4">
          <Alert variant="destructive">
            <AlertTriangle className="h-4 w-4" />
            <AlertTitle>CSR Access Denied</AlertTitle>
            <AlertDescription>
              You don't have the required permissions to access the CSR module.
            </AlertDescription>
          </Alert>

          <div className="bg-card border rounded-lg p-4">
            <h3 className="font-semibold mb-2">Debug Information</h3>
            <pre className="text-xs bg-muted p-2 rounded overflow-auto max-h-96">
              {JSON.stringify(debugInfo, null, 2)}
            </pre>
          </div>

          <div className="flex gap-2">
            <Button onClick={handleRefreshPermissions} disabled={isLoading}>
              <RefreshCw className={cn("h-4 w-4 mr-2", isLoading && "animate-spin")} />
              Refresh Permissions
            </Button>
            <Button variant="outline" onClick={() => router.push("/member/dashboard")}>
              Go to Member Dashboard
            </Button>
            <Button variant="outline" onClick={() => router.push("/login")}>
              Back to Login
            </Button>
          </div>
        </div>
      </div>
    )
  }

  // Don't render anything if user doesn't have access (they'll be redirected)
  if (!hasAccess) {
    return null
  }

  return (
    <div className="min-h-screen bg-background">
      <AppSidebar 
        collapsed={sidebarCollapsed} 
        setCollapsed={setSidebarCollapsed} 
        userRole="csr" // Keep for compatibility, but sidebar should use permissions internally
      />
      <div
        className={cn(
          "transition-all duration-300 ease-in-out min-h-screen",
          sidebarCollapsed ? "lg:pl-[80px]" : "lg:pl-[280px]",
        )}
      >
        <main className="p-4 md:p-6 lg:p-8">
          <div className="mx-auto max-w-7xl">{children}</div>
        </main>
      </div>
    </div>
  )
}

================
File: frontend/app/fueler/layout.tsx
================
"use client"

import type React from "react"
import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { usePermissions } from "@/hooks/usePermissions"
import AppSidebar from "@/components/layout/app-sidebar"
import { TooltipProvider } from "@/components/ui/tooltip"

export default function FuelerLayout({
  children,
}: {
  children: React.ReactNode
}) {
  const router = useRouter()
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false)
  const [isLoading, setIsLoading] = useState(true)
  const [hasAccess, setHasAccess] = useState(false)

  const { 
    loading: permissionsLoading, 
    user, 
    canAny,
    isFueler 
  } = usePermissions()

  useEffect(() => {
    // Wait for permissions to load
    if (permissionsLoading) {
      return
    }

    // Check authentication and fueler permissions
    if (!user || !user.isLoggedIn) {
      router.push("/login")
      return
    }

    // Check for fueler access using backend permissions
    const fuelerPermissions = [
      'ACCESS_FUELER_DASHBOARD',
      'PERFORM_FUELING_TASK',
      'UPDATE_OWN_ORDER_STATUS',
      'VIEW_ASSIGNED_ORDERS',
      'COMPLETE_OWN_ORDER'
    ]

    const hasFuelerAccess = canAny(fuelerPermissions) || isFueler

    if (!hasFuelerAccess) {
      console.log("User does not have fueler permissions, redirecting to appropriate dashboard")
      
      // Redirect to appropriate dashboard based on user's permissions
      if (canAny(['ACCESS_ADMIN_DASHBOARD', 'MANAGE_SETTINGS', 'MANAGE_USERS', 'MANAGE_ROLES'])) {
        router.push("/admin/dashboard")
      } else if (canAny(['ACCESS_CSR_DASHBOARD', 'VIEW_ALL_ORDERS', 'CREATE_ORDER'])) {
        router.push("/csr/dashboard")
      } else if (canAny(['ACCESS_MEMBER_DASHBOARD']) || user.is_active) {
        router.push("/member/dashboard")
      } else {
        router.push("/login")
      }
      return
    }

    setHasAccess(true)
    setIsLoading(false)
  }, [
    permissionsLoading, 
    user, 
    canAny, 
    isFueler,
    router
  ])

  // Show loading while permissions are being checked
  if (isLoading || permissionsLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-background">
        <div className="flex flex-col items-center gap-4">
          <div className="h-8 w-8 border-4 border-primary border-t-transparent rounded-full animate-spin"></div>
          <p className="text-sm text-muted-foreground">
            {permissionsLoading ? "Loading permissions..." : "Checking fueler access..."}
          </p>
        </div>
      </div>
    )
  }

  // Don't render anything if user doesn't have access (they'll be redirected)
  if (!hasAccess) {
    return null
  }

  return (
    <TooltipProvider>
      <div className="flex h-screen bg-background">
        <AppSidebar 
          collapsed={sidebarCollapsed} 
          setCollapsed={setSidebarCollapsed} 
          userRole="fueler" // Keep for compatibility, but sidebar should use permissions internally
        />
        <main
          className={`flex-1 overflow-auto transition-all duration-300 ${
            sidebarCollapsed ? "ml-[80px]" : "ml-[280px]"
          }`}
        >
          <div className="p-6">{children}</div>
        </main>
      </div>
    </TooltipProvider>
  )
}

================
File: frontend/app/services/aircraft-service.ts
================
import { API_BASE_URL, getAuthHeaders, handleApiResponse } from "./api-config"

// Frontend Aircraft model (updated to use tail_number as id)
export interface Aircraft {
  id: string  // Use tail_number as the ID
  tailNumber: string
  type: string // Corresponds to aircraft_type from backend
  model: string // Will be 'N/A' or derived if not directly from backend
  owner: string // Will be 'N/A' or derived if not directly from backend, potentially customer_id
  homeBase: string // Will be 'N/A' or derived
  lastMaintenance?: string
  nextMaintenance?: string
  status: "active" | "maintenance" | "inactive" // Default to 'active' or derived
  fuelCapacity: number // Default or derived
  preferredFuelType: string // Corresponds to fuel_type from backend
  mtow?: number
  lastFaaSyncAt?: string
  // Potentially add customer_id if needed on frontend representation
  customer_id?: number
}

// Backend API-aligned interfaces
interface BackendAdminAircraft {
  id: number
  tail_number: string
  aircraft_type: string
  fuel_type: string
  customer_id?: number
  // Add other fields if the backend AdminAircraftSchema provides more that are useful for mapping
}

interface BackendAircraft {
  tail_number: string  // Primary key in backend
  aircraft_type: string
  fuel_type: string
  // Add other fields if the backend AircraftResponseSchema provides more that are useful for mapping
}

// Request payload interfaces
export interface AdminAircraftCreateRequest {
  tail_number: string
  aircraft_type: string
  fuel_type: string
  customer_id?: number
}

export interface AdminAircraftUpdateRequest {
  aircraft_type?: string
  fuel_type?: string
  customer_id?: number
}

// CSR Aircraft Creation Request (limited fields)
export interface CSRAircraftCreateRequest {
  tail_number: string
  aircraft_type: string
  fuel_type: string
}

// Response type for list endpoints
interface AdminAircraftListResponse {
  aircraft: BackendAdminAircraft[]
  message: string
}

interface AircraftListResponse {
  aircraft: BackendAircraft[]
  message: string
}

// --- Data Mapping Helper Functions ---

function mapBackendAdminToFrontendAircraft(backend: BackendAdminAircraft): Aircraft {
  return {
    id: backend.tail_number,
    tailNumber: backend.tail_number,
    type: backend.aircraft_type,
    model: "N/A", // Or derive if possible from aircraft_type or other data
    owner: backend.customer_id ? `Customer ID: ${backend.customer_id}` : "N/A", // Example mapping
    homeBase: "N/A",
    status: "active", // Default status
    fuelCapacity: 0, // Default, consider if backend can provide this
    preferredFuelType: backend.fuel_type,
    customer_id: backend.customer_id,
    // Initialize other optional fields from Aircraft interface as undefined or default
    lastMaintenance: undefined,
    nextMaintenance: undefined,
    mtow: undefined,
    lastFaaSyncAt: undefined,
  }
}

function mapBackendToFrontendAircraft(backend: BackendAircraft): Aircraft {
  return {
    id: backend.tail_number,
    tailNumber: backend.tail_number,
    type: backend.aircraft_type,
    model: "N/A",
    owner: "N/A", // General endpoint might not have customer info
    homeBase: "N/A",
    status: "active",
    fuelCapacity: 0,
    preferredFuelType: backend.fuel_type,
    // Initialize other optional fields
    lastMaintenance: undefined,
    nextMaintenance: undefined,
    mtow: undefined,
    lastFaaSyncAt: undefined,
  }
}

// --- Admin Aircraft CRUD Functions ---

export async function getAllAdminAircraft(filters?: { customer_id?: number }): Promise<Aircraft[]> {
  let url = `${API_BASE_URL}/admin/aircraft/`
  if (filters?.customer_id) {
    url += `?customer_id=${filters.customer_id}`
  }
  const response = await fetch(url, {
    method: "GET",
    headers: getAuthHeaders(),
  })
  const data = await handleApiResponse<AdminAircraftListResponse>(response)
  return data.aircraft.map(mapBackendAdminToFrontendAircraft)
}

export async function getAdminAircraftByTailNumber(tailNumber: string): Promise<Aircraft | null> {
  try {
    const response = await fetch(`${API_BASE_URL}/admin/aircraft/${encodeURIComponent(tailNumber)}`, {
      method: "GET",
      headers: getAuthHeaders(),
    })
    // handleApiResponse will throw for non-ok status, including 404
    const backendAircraft = await handleApiResponse<BackendAdminAircraft>(response)
    return mapBackendAdminToFrontendAircraft(backendAircraft)
  } catch (error) {
    // Check if the error message indicates a 404 Not Found
    if (error instanceof Error && error.message.includes("API error (404)")) {
      return null // Return null for 404s as per requirement
    }
    // Re-throw other errors
    throw error
  }
}

// Functions to be removed as per subtask description:
// - getAircraftById(id: number)
// - validateAircraft(tailNumber: string)
// These functions were part of the original file but are not included in the refactored version below this comment block.
// Their removal will be completed by not re-defining them.

export async function createAdminAircraft(aircraftData: AdminAircraftCreateRequest): Promise<Aircraft> {
  const response = await fetch(`${API_BASE_URL}/admin/aircraft/`, {
    method: "POST",
    headers: getAuthHeaders(), // Ensure Content-Type: application/json is set by getAuthHeaders
    body: JSON.stringify(aircraftData),
  })
  const backendAircraft = await handleApiResponse<BackendAdminAircraft>(response)
  return mapBackendAdminToFrontendAircraft(backendAircraft)
}

// CSR Aircraft Creation Function (using existing permissions)
export async function createCSRAircraft(aircraftData: CSRAircraftCreateRequest): Promise<Aircraft> {
  const response = await fetch(`${API_BASE_URL}/aircraft/quick-create`, {
    method: "POST",
    headers: getAuthHeaders(),
    body: JSON.stringify(aircraftData),
  })
  const data = await handleApiResponse<{ message: string; aircraft: BackendAircraft }>(response)
  return mapBackendToFrontendAircraft(data.aircraft)
}

export async function updateAdminAircraft(
  tailNumber: string,
  aircraftData: AdminAircraftUpdateRequest,
): Promise<Aircraft> {
  const response = await fetch(`${API_BASE_URL}/admin/aircraft/${encodeURIComponent(tailNumber)}`, {
    method: "PATCH",
    headers: getAuthHeaders(),
    body: JSON.stringify(aircraftData),
  })
  const backendAircraft = await handleApiResponse<BackendAdminAircraft>(response)
  return mapBackendAdminToFrontendAircraft(backendAircraft)
}

export async function deleteAdminAircraft(tailNumber: string): Promise<void> {
  const response = await fetch(`${API_BASE_URL}/admin/aircraft/${encodeURIComponent(tailNumber)}`, {
    method: "DELETE",
    headers: getAuthHeaders(),
  })
  // handleApiResponse will throw if response is not ok (e.g. 204 is ok)
  // For DELETE 204, response.json() would fail, so we might need a custom check or rely on handleApiResponse
  // Assuming handleApiResponse correctly handles 204 No Content or similar success statuses for DELETE
  // If handleApiResponse expects JSON, and DELETE returns no body, this might need adjustment in handleApiResponse
  // For now, let's assume handleApiResponse can deal with it or throws an error for non-204/non-200.
  await handleApiResponse<unknown>(response) // Expecting no content, so unknown is fine.
}

// --- General Aircraft Functions ---

export async function getAircraftList(): Promise<Aircraft[]> {
  const response = await fetch(`${API_BASE_URL}/aircraft/`, {
    method: "GET",
    headers: getAuthHeaders(),
  })
  const data = await handleApiResponse<AircraftListResponse>(response)
  return data.aircraft.map(mapBackendToFrontendAircraft)
}

export async function getAircraftByTailNumber(tailNumber: string): Promise<Aircraft | null> {
  try {
    const response = await fetch(`${API_BASE_URL}/aircraft/${encodeURIComponent(tailNumber)}`, {
      method: "GET",
      headers: getAuthHeaders(),
    })
    const data = await handleApiResponse<{ message: string; aircraft: BackendAircraft }>(response)
    
    // Validate that the backend aircraft has required fields
    if (!data.aircraft) {
      console.error('Backend response missing aircraft object:', data)
      throw new Error('Invalid response: missing aircraft data')
    }
    
    if (!data.aircraft.tail_number) {
      console.error('Backend aircraft missing tail_number field:', data.aircraft)
      throw new Error('Invalid aircraft data: missing tail number')
    }
    
    const mappedAircraft = mapBackendToFrontendAircraft(data.aircraft)
    
    return mappedAircraft
  } catch (error) {
    if (error instanceof Error && error.message.includes("API error (404)")) {
      return null
    }
    throw error
  }
}

================
File: frontend/app/services/fuel-order-service.ts
================
import { API_BASE_URL, getAuthHeaders, handleApiResponse } from "./api-config"
import { calculateFees, type FeeCalculationResult } from "./fee-service"

// ===================================================================
// TYPE DEFINITIONS - DUAL MODEL ARCHITECTURE
// ===================================================================

// Frontend Display Interface (optimized for UI interactions)
export interface FuelOrderDisplay {
  id: number
  aircraft_id: string
  aircraft_tail_number: string
  aircraft_registration: string
  quantity: string // String for form handling
  fuel_type: string // Added missing fuel_type field
  customer_name: string
  customer_id: number
  status: FuelOrderStatus
  priority: 'normal' | 'high' | 'urgent'
  csr_notes: string
  lst_notes: string
  additive_requested: boolean
  location_on_ramp: string
  assigned_lst_name: string
  assigned_truck_name: string
  created_at: string
  estimated_completion: string
  completed_at?: string
  reviewed_at?: string
  fees?: FeeCalculationResult
}

// Backend Communication Interface (aligned with API contracts)
export interface FuelOrderBackend {
  id?: number
  tail_number: string
  fuel_type?: string // Added missing fuel_type field
  requested_amount: number | string // Can be number or string depending on endpoint
  customer_id: number
  status: string
  priority?: string
  csr_notes?: string
  lst_notes?: string
  additive_requested?: boolean
  location_on_ramp?: string
  assigned_lst_user_id?: number // -1 for auto-assign
  assigned_truck_id?: number // -1 for auto-assign
  created_at?: string
  estimated_completion_time?: string
  completed_at?: string
  reviewed_at?: string
  assigned_lst_username?: string;
  assigned_lst_fullName?: string;
  assigned_truck_number?: string;
}

// Request interfaces for different operations
export interface FuelOrderCreateRequest {
  tail_number: string
  fuel_type: string  // Added missing fuel_type field required by backend
  requested_amount: number
  customer_id: number
  priority?: string
  csr_notes?: string
  additive_requested?: boolean
  location_on_ramp?: string
  assigned_lst_user_id?: number
  assigned_truck_id?: number
}

export interface FuelOrderUpdateStatusRequest {
  status: string
  lst_notes?: string
}

export interface FuelOrderSubmitDataRequest {
  actual_amount?: number
  lst_notes?: string
  completed_at?: string
}

export interface FuelOrderReviewRequest {
  approved: boolean
  review_notes?: string
}

// Filter options for querying fuel orders
export interface FuelOrderFilters {
  status?: string
  customer_id?: number
  priority?: string
  start_date?: string
  end_date?: string
  assigned_lst_user_id?: number
  assigned_truck_id?: number
}

// Statistics interface
export interface FuelOrderStats {
  active_count: number
  in_progress_count: number
  completed_today: number
  pending_count: number
  avg_completion_time: number
  total_orders: number
  status_distribution: Record<string, number>
}

// Status enumeration
export type FuelOrderStatus = 
  | 'PENDING'
  | 'ASSIGNED'
  | 'IN_PROGRESS'
  | 'COMPLETED'
  | 'REVIEWED'
  | 'CANCELLED'

// Lookup data interfaces for transformations
export interface Aircraft {
  id: string
  registration: string
  type: string
}

export interface User {
  id: number
  name: string
}

export interface FuelTruck {
  id: number
  name: string
  capacity: number
  status: string
}

// ===================================================================
// DATA TRANSFORMATION UTILITIES
// ===================================================================

// Simple cache for lookup data with TTL
interface CacheEntry<T> {
  data: T
  timestamp: number
  ttl: number
}

const cache = new Map<string, CacheEntry<any>>()

function getCachedData<T>(key: string, fetcher: () => Promise<T>, ttl: number = 300000): Promise<T> {
  const entry = cache.get(key)
  if (entry && (Date.now() - entry.timestamp) < entry.ttl) {
    return Promise.resolve(entry.data)
  }
  
  return fetcher().then(data => {
    cache.set(key, { data, timestamp: Date.now(), ttl })
    return data
  })
}

// Aircraft lookup function
async function getAircraftData(): Promise<Aircraft[]> {
  return getCachedData('aircraft', async () => {
    const response = await fetch(`${API_BASE_URL}/aircraft/`, {
      method: 'GET',
      headers: getAuthHeaders(),
    })
    const data = await handleApiResponse<{ aircraft: Aircraft[] }>(response)
    return data.aircraft
  })
}

// User lookup function
async function getUserData(): Promise<User[]> {
  return getCachedData('users', async () => {
    const response = await fetch(`${API_BASE_URL}/users?role=LST&is_active=true`, {
      method: 'GET',
      headers: getAuthHeaders(),
    })
    const data = await handleApiResponse<{ users: User[] }>(response)
    return data.users
  })
}

// Fuel truck lookup function
async function getFuelTruckData(): Promise<FuelTruck[]> {
  return getCachedData('fuel-trucks', async () => {
    const response = await fetch(`${API_BASE_URL}/fuel-trucks/`, {
      method: 'GET',
      headers: getAuthHeaders(),
    })
    const data = await handleApiResponse<{ fuel_trucks: FuelTruck[] }>(response)
    return data.fuel_trucks
  })
}

// Transform backend data to frontend display format
export async function transformToDisplay(
  backend: FuelOrderBackend,
  aircraftData?: Aircraft[],
  userData?: User[],
  truckData?: FuelTruck[]
): Promise<FuelOrderDisplay> {
  // Get lookup data if not provided (only for users and trucks)
  const users = userData || await getUserData()
  const trucks = truckData || await getFuelTruckData()

  // Helper functions for assignments
  const getLSTNameById = (id?: number): string => {
    if (!id || id === -1) return 'auto-assign'
    const user = users.find(u => u.id === id)
    return user ? user.name : `User ID: ${id}`
  }

  const getTruckNameById = (id?: number): string => {
    if (!id || id === -1) return 'auto-assign'
    const truck = trucks.find(t => t.id === id)
    return truck ? truck.name : `Truck ID: ${id}`
  }

  return {
    id: backend.id!,
    aircraft_id: backend.tail_number,  // Use tail_number directly as aircraft_id
    aircraft_tail_number: backend.tail_number,
    aircraft_registration: backend.tail_number,  // Use tail_number as registration
    quantity: backend.requested_amount ? (typeof backend.requested_amount === 'string' ? backend.requested_amount : backend.requested_amount.toString()) : '0',
    fuel_type: backend.fuel_type || 'Unknown', // Get fuel_type from backend
    customer_id: backend.customer_id,
    customer_name: `Customer ${backend.customer_id}`, // Will be enhanced when customer service is available
    status: backend.status as FuelOrderStatus,
    priority: (backend.priority as 'normal' | 'high' | 'urgent') || 'normal',
    csr_notes: backend.csr_notes || '',
    lst_notes: backend.lst_notes || '',
    additive_requested: backend.additive_requested || false,
    location_on_ramp: backend.location_on_ramp || '',
    assigned_lst_name: backend.assigned_lst_fullName || backend.assigned_lst_username || (backend.assigned_lst_user_id ? getLSTNameById(backend.assigned_lst_user_id) : 'N/A'),
    assigned_truck_name: backend.assigned_truck_number || (backend.assigned_truck_id ? getTruckNameById(backend.assigned_truck_id) : 'N/A'),
    created_at: backend.created_at || '',
    estimated_completion: backend.estimated_completion_time || '',
    completed_at: backend.completed_at,
    reviewed_at: backend.reviewed_at,
  }
}

// Transform frontend display data to backend format
export async function transformToBackend(
  display: Partial<FuelOrderDisplay>,
  aircraftData?: Aircraft[],
  userData?: User[],
  truckData?: FuelTruck[]
): Promise<Partial<FuelOrderBackend>> {
  // Get lookup data if not provided (only for users and trucks)
  const users = userData || await getUserData()
  const trucks = truckData || await getFuelTruckData()

  // Helper functions for reverse lookups
  const getLSTIdByName = (name: string): number => {
    if (name === 'auto-assign') return -1
    const user = users.find(u => u.name === name)
    if (!user) throw new Error(`LST user with name ${name} not found`)
    return user.id
  }

  const getTruckIdByName = (name: string): number => {
    if (name === 'auto-assign') return -1
    const truck = trucks.find(t => t.name === name)
    if (!truck) throw new Error(`Fuel truck with name ${name} not found`)
    return truck.id
  }

  const result: Partial<FuelOrderBackend> = {}

  // Handle aircraft_id - use it directly as tail_number
  if (display.aircraft_id) {
    result.tail_number = display.aircraft_id
  }

  // Transform other fields
  if (display.quantity) {
    const parsed = parseFloat(display.quantity)
    if (isNaN(parsed) || parsed <= 0) {
      throw new Error('Invalid quantity: must be a positive number')
    }
    result.requested_amount = parsed
  }

  if (display.customer_id) result.customer_id = display.customer_id
  if (display.status) result.status = display.status
  if (display.priority) result.priority = display.priority
  if (display.csr_notes) result.csr_notes = display.csr_notes
  if (display.lst_notes) result.lst_notes = display.lst_notes
  if (display.additive_requested !== undefined) result.additive_requested = display.additive_requested
  if (display.location_on_ramp) result.location_on_ramp = display.location_on_ramp

  // Handle assignments
  if (display.assigned_lst_name) {
    result.assigned_lst_user_id = getLSTIdByName(display.assigned_lst_name)
  }
  if (display.assigned_truck_name) {
    result.assigned_truck_id = getTruckIdByName(display.assigned_truck_name)
  }

  return result
}

// ===================================================================
// SPECIALIZED SERVICE FUNCTIONS
// ===================================================================

/**
 * CREATE OPERATIONS
 */

// Create a new fuel order
export async function createFuelOrder(data: FuelOrderCreateRequest): Promise<FuelOrderDisplay> {
  const response = await fetch(`${API_BASE_URL}/fuel-orders`, {
    method: 'POST',
    headers: getAuthHeaders(),
    body: JSON.stringify(data),
  })

  const responseData = await handleApiResponse<{ message: string; fuel_order: FuelOrderBackend }>(response)
  return transformToDisplay(responseData.fuel_order)
}

/**
 * READ OPERATIONS
 */

// Get all fuel orders with optional filtering
export async function getFuelOrders(filters?: FuelOrderFilters): Promise<{ items: FuelOrderDisplay[]; pagination: any; message?: string }> {
  let url = `${API_BASE_URL}/fuel-orders`
  
  if (filters) {
    const params = new URLSearchParams()
    if (filters.status) params.append('status', filters.status)
    if (filters.customer_id) params.append('customer_id', filters.customer_id.toString())
    if (filters.priority) params.append('priority', filters.priority)
    if (filters.start_date) params.append('start_date', filters.start_date)
    if (filters.end_date) params.append('end_date', filters.end_date)
    if (filters.assigned_lst_user_id) params.append('assigned_lst_user_id', filters.assigned_lst_user_id.toString())
    if (filters.assigned_truck_id) params.append('assigned_truck_id', filters.assigned_truck_id.toString())
    
    if (params.toString()) {
      url += `?${params.toString()}`
    }
  }

  const response = await fetch(url, {
    method: 'GET',
    headers: getAuthHeaders(),
  })

  const data = await handleApiResponse<{ orders?: FuelOrderBackend[], pagination?: any, message?: string }>(response)

  if (!data.orders || !Array.isArray(data.orders)) {
    console.warn('No fuel orders returned from API:', data)
    return { items: [], pagination: data.pagination || null, message: data.message || "No orders found" };
  }

  const transformPromises = data.orders.map(order => transformToDisplay(order));
  const displayOrders = await Promise.all(transformPromises);

  return {
    items: displayOrders,
    pagination: data.pagination,
    message: data.message
  };
}

// Get a specific fuel order by ID
export async function getFuelOrderById(id: number): Promise<FuelOrderDisplay> {
  const response = await fetch(`${API_BASE_URL}/fuel-orders/${id}`, {
    method: 'GET',
    headers: getAuthHeaders(),
  })

  const responseData = await handleApiResponse<{ message: string; fuel_order: FuelOrderBackend }>(response)
  return transformToDisplay(responseData.fuel_order)
}

// Backward compatibility alias
export const getFuelOrder = getFuelOrderById

// Get fuel order statistics
export async function getFuelOrderStats(): Promise<FuelOrderStats> {
  const response = await fetch(`${API_BASE_URL}/fuel-orders/stats/status-counts`, {
    method: 'GET',
    headers: getAuthHeaders(),
  })

  return handleApiResponse<FuelOrderStats>(response)
}

/**
 * UPDATE OPERATIONS (mapped to specific endpoints)
 */

// Update fuel order status (LST operations)
export async function updateFuelOrderStatus(id: number, statusData: FuelOrderUpdateStatusRequest): Promise<FuelOrderDisplay> {
  const response = await fetch(`${API_BASE_URL}/fuel-orders/${id}/status`, {
    method: 'PATCH',
    headers: getAuthHeaders(),
    body: JSON.stringify(statusData),
  })

  const backendOrder = await handleApiResponse<FuelOrderBackend>(response)
  return transformToDisplay(backendOrder)
}

// Submit fuel order completion data (LST completion)
export async function submitFuelOrderData(id: number, completionData: FuelOrderSubmitDataRequest): Promise<FuelOrderDisplay> {
  const response = await fetch(`${API_BASE_URL}/fuel-orders/${id}/submit-data`, {
    method: 'PUT',
    headers: getAuthHeaders(),
    body: JSON.stringify(completionData),
  })

  const responseData = await handleApiResponse<{ message: string; fuel_order: FuelOrderBackend }>(response)
  return transformToDisplay(responseData.fuel_order)
}

// Review fuel order (CSR review)
export async function reviewFuelOrder(id: number, reviewData: FuelOrderReviewRequest): Promise<FuelOrderDisplay> {
  const response = await fetch(`${API_BASE_URL}/fuel-orders/${id}/review`, {
    method: 'PATCH',
    headers: getAuthHeaders(),
    body: JSON.stringify(reviewData),
  })

  const responseData = await handleApiResponse<{ message: string; fuel_order: FuelOrderBackend }>(response)
  return transformToDisplay(responseData.fuel_order)
}

/**
 * CANCEL OPERATION (replaces delete)
 */

// Cancel a fuel order (status-based cancellation)
export async function cancelFuelOrder(id: number): Promise<FuelOrderDisplay> {
  return updateFuelOrderStatus(id, { status: 'CANCELLED' })
}

// ===================================================================
// UTILITY FUNCTIONS
// ===================================================================

// Filter fuel orders (client-side filtering for already fetched data)
export function filterFuelOrders(
  orders: FuelOrderDisplay[],
  startDate?: string,
  endDate?: string,
  status?: string,
): FuelOrderDisplay[] {
  return orders.filter((order) => {
    // Filter by start date
    if (startDate && new Date(order.created_at) < new Date(startDate)) {
      return false
    }

    // Filter by end date
    if (endDate) {
      const endDateTime = new Date(endDate)
      endDateTime.setHours(23, 59, 59, 999) // End of the day
      if (new Date(order.created_at) > endDateTime) {
        return false
      }
    }

    // Filter by status
    if (status && status !== "ALL" && order.status !== status) {
      return false
    }

    return true
  })
}

// Convert fuel orders to CSV
export function convertFuelOrdersToCSV(orders: FuelOrderDisplay[]): string {
  if (orders.length === 0) {
    return ""
  }

  // Define CSV headers
  const headers = [
    "ID",
    "Aircraft Registration", 
    "Customer",
    "Quantity (Gallons)",
    "Status",
    "Priority",
    "Additive Requested",
    "Location on Ramp",
    "Assigned LST",
    "Assigned Truck",
    "Created At",
    "Completed At",
    "CSR Notes",
    "LST Notes",
  ]

  // Create CSV content
  const csvContent = [
    headers.join(","),
    ...orders.map((order) =>
      [
        order.id,
        order.aircraft_registration,
        order.customer_name,
        order.quantity,
        order.status,
        order.priority,
        order.additive_requested ? 'Yes' : 'No',
        order.location_on_ramp ? `"${order.location_on_ramp.replace(/"/g, '""')}"` : '',
        order.assigned_lst_name,
        order.assigned_truck_name,
        order.created_at,
        order.completed_at || "",
        order.csr_notes ? `"${order.csr_notes.replace(/"/g, '""')}"` : "",
        order.lst_notes ? `"${order.lst_notes.replace(/"/g, '""')}"` : "",
      ].join(","),
    ),
  ].join("\n")

  return csvContent
}

// Download CSV
export function downloadCSV(csvContent: string, filename: string): void {
  const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" })
  const link = document.createElement("a")

  // Create a URL for the blob
  const url = URL.createObjectURL(blob)

  // Set link properties
  link.setAttribute("href", url)
  link.setAttribute("download", filename)
  link.style.visibility = "hidden"

  // Append to the document, click, and remove
  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
}

// Get export URL for server-side CSV generation
export function exportFuelOrdersUrl(startDate?: string, endDate?: string, status?: string): string {
  let url = `${API_BASE_URL}/fuel-orders/export`
  const params = new URLSearchParams()

  if (startDate) {
    params.append("startDate", startDate)
  }

  if (endDate) {
    params.append("endDate", endDate)
  }

  if (status && status !== "ALL") {
    params.append("status", status)
  }

  if (params.toString()) {
    url += `?${params.toString()}`
  }

  return url
}

// Clear cached lookup data (useful for refreshing data)
export function clearFuelOrderCache(): void {
  cache.clear()
}

================
File: frontend/app/services/permission-service.ts
================
// API-integrated permission service - replacing localStorage mock implementation
import { API_BASE_URL, getAuthHeaders, handleApiResponse } from "./api-config"

// TypeScript interfaces for API responses
export interface Permission {
  id: number
  name: string
  description: string
  category: string
  createdAt: string
}

export interface Role {
  id: number
  name: string
  description: string
  permissions: string[]
  isSystemRole: boolean
  createdAt: string
  updatedAt: string
}

export interface UserPermissions {
  roles: string[]
  permissions: string[]
}

export enum PermissionCategory {
  FUEL_ORDERS = "fuel_orders",
  AIRCRAFT = "aircraft",
  CUSTOMERS = "customers",
  USERS = "users",
  REPORTS = "reports",
  BILLING = "billing",
  SYSTEM = "system",
  FUEL_TRUCKS = "fuel_trucks",
  LST = "lst",
}

// API Functions for Permissions
export const getAllPermissions = async (): Promise<Permission[]> => {
  try {
    const response = await fetch(`${API_BASE_URL}/admin/permissions`, {
      method: "GET",
      headers: getAuthHeaders(),
    })

    const data = await handleApiResponse<{permissions: Permission[]}>(response)
    console.log("Permissions API response:", data)
    return data.permissions
  } catch (error) {
    console.error("Error fetching permissions:", error)
    throw new Error("Failed to fetch permissions")
  }
}

// API Functions for Roles
export const getAllRoles = async (): Promise<Role[]> => {
  try {
    const response = await fetch(`${API_BASE_URL}/admin/roles`, {
      method: "GET",
      headers: getAuthHeaders(),
    })

    const data = await handleApiResponse<{roles: Role[]}>(response)
    console.log("Roles API response:", data)
    
    // Roles now include permissions directly from the backend schema
    return data.roles.map(role => ({
      ...role,
      permissions: role.permissions || [] // Use permissions from backend or fallback to empty array
    }))
  } catch (error) {
    console.error("Error fetching roles:", error)
    throw new Error("Failed to fetch roles")
  }
}

export const getRoleById = async (roleId: number): Promise<Role | null> => {
  try {
    const response = await fetch(`${API_BASE_URL}/admin/roles/${roleId}`, {
      method: "GET",
      headers: getAuthHeaders(),
    })

    if (response.status === 404) {
      return null
    }

    return await handleApiResponse<Role>(response)
  } catch (error) {
    console.error("Error fetching role:", error)
    throw new Error("Failed to fetch role")
  }
}

export const createRole = async (roleData: Omit<Role, "id" | "createdAt" | "updatedAt">): Promise<Role> => {
  try {
    // First, create the role without permissions
    const roleCreateData = {
      name: roleData.name,
      description: roleData.description
    }
    
    const response = await fetch(`${API_BASE_URL}/admin/roles`, {
      method: "POST",
      headers: getAuthHeaders(),
      body: JSON.stringify(roleCreateData),
    })

    const createdRole = await handleApiResponse<Role>(response)
    console.log("Role created:", createdRole)
    
    // Then assign permissions individually if any were provided
    if (roleData.permissions && roleData.permissions.length > 0) {
      console.log("Assigning permissions to role:", roleData.permissions)
      
      for (const permissionId of roleData.permissions) {
        try {
          const permissionResponse = await fetch(`${API_BASE_URL}/admin/roles/${createdRole.id}/permissions`, {
            method: "POST",
            headers: getAuthHeaders(),
            body: JSON.stringify({ permission_id: permissionId }),
          })
          
          await handleApiResponse<void>(permissionResponse)
          console.log(`Permission ${permissionId} assigned to role ${createdRole.id}`)
        } catch (error) {
          console.error(`Error assigning permission ${permissionId} to role:`, error)
          // Continue with other permissions even if one fails
        }
      }
    }
    
    // Return the role with the permissions that were supposed to be assigned
    return {
      ...createdRole,
      permissions: roleData.permissions || []
    }
  } catch (error) {
    console.error("Error creating role:", error)
    throw new Error("Failed to create role")
  }
}

export const updateRole = async (
  roleId: number,
  updates: Partial<Omit<Role, "id" | "createdAt" | "updatedAt">>
): Promise<Role> => {
  try {
    const response = await fetch(`${API_BASE_URL}/admin/roles/${roleId}`, {
      method: "PATCH",
      headers: getAuthHeaders(),
      body: JSON.stringify(updates),
    })

    return await handleApiResponse<Role>(response)
  } catch (error) {
    console.error("Error updating role:", error)
    throw new Error("Failed to update role")
  }
}

export const deleteRole = async (roleId: number): Promise<boolean> => {
  try {
    const response = await fetch(`${API_BASE_URL}/admin/roles/${roleId}`, {
      method: "DELETE",
      headers: getAuthHeaders(),
    })

    if (response.status === 404) {
      return false
    }

    await handleApiResponse<void>(response)
    return true
  } catch (error) {
    console.error("Error deleting role:", error)
    throw new Error("Failed to delete role")
  }
}

// Role Permission Management Functions
export const getRolePermissions = async (roleId: number): Promise<Permission[]> => {
  try {
    const response = await fetch(`${API_BASE_URL}/admin/roles/${roleId}/permissions`, {
      method: "GET",
      headers: getAuthHeaders(),
    })

    return await handleApiResponse<Permission[]>(response)
  } catch (error) {
    console.error("Error fetching role permissions:", error)
    throw new Error("Failed to fetch role permissions")
  }
}

export const addPermissionToRole = async (roleId: number, permissionId: number): Promise<void> => {
  try {
    const response = await fetch(`${API_BASE_URL}/admin/roles/${roleId}/permissions`, {
      method: "POST",
      headers: getAuthHeaders(),
      body: JSON.stringify({ permission_id: permissionId }),
    })

    await handleApiResponse<void>(response)
  } catch (error) {
    console.error("Error adding permission to role:", error)
    throw new Error("Failed to add permission to role")
  }
}

export const removePermissionFromRole = async (roleId: number, permissionId: number): Promise<void> => {
  try {
    const response = await fetch(`${API_BASE_URL}/admin/roles/${roleId}/permissions/${permissionId}`, {
      method: "DELETE",
      headers: getAuthHeaders(),
    })

    await handleApiResponse<void>(response)
  } catch (error) {
    console.error("Error removing permission from role:", error)
    throw new Error("Failed to remove permission from role")
  }
}

// Helper Functions for UI Components
export const getPermissionsForRole = async (roleId: number): Promise<Permission[]> => {
  return await getRolePermissions(roleId)
}

// Legacy compatibility functions (these might be used by existing UI)
export const hasPermission = (userPermissions: string[], permissionId: string): boolean => {
  return userPermissions.includes(permissionId)
}

// Initialize permission system (no-op for API version)
export const initializePermissionSystem = (): void => {
  // No initialization needed for API-based service
  // This function exists for compatibility with the old localStorage version
}

================
File: frontend/app/layout.tsx
================
import type React from "react"
import "./globals.css"
import type { Metadata } from "next"
import { Montserrat } from "next/font/google"
import { ThemeProvider } from "@/components/theme-provider"
import { Toaster } from "@/components/ui/toaster"
import StagewiseToolbarWrapper from "@/components/stagewise-toolbar"
import { PermissionProvider } from "@/app/contexts/permission-context"

const montserrat = Montserrat({
  subsets: ['latin'],
  weight: ['400', '500', '600', '700'],
  display: 'swap',
})

export const metadata: Metadata = {
  title: "FBO LaunchPad",
  description: "Aviation fuel management platform",
    generator: 'v0.dev'
}

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body className={montserrat.className} suppressHydrationWarning={true}>
        <ThemeProvider attribute="class" defaultTheme="light" enableSystem>
          <PermissionProvider>
            {children}
          </PermissionProvider>
          <Toaster />
          <StagewiseToolbarWrapper />
        </ThemeProvider>
      </body>
    </html>
  )
}

================
File: frontend/next.config.mjs
================
/** @type {import('next').NextConfig} */
const nextConfig = {
  eslint: {
    ignoreDuringBuilds: true,
  },
  typescript: {
    ignoreBuildErrors: true,
  },
  images: {
    unoptimized: true,
  },
  async rewrites() {
    return [
      {
        source: '/api/:path*',
        destination: 'http://localhost:5001/api/:path*',
      },
    ]
  },
}

export default nextConfig

================
File: frontend/app/admin/fuel-trucks/page.tsx
================
"use client"

import React, { useState, useEffect } from "react"
import {
  Truck,
  Plus,
  Search,
  Filter,
  MoreHorizontal,
  Edit,
  Trash2,
  CheckCircle,
  AlertTriangle,
  Fuel,
  Loader2,
} from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Switch } from "@/components/ui/switch"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Progress } from "@/components/ui/progress"
import {
  getAllFuelTrucks,
  createFuelTruck,
  updateFuelTruck,
  deleteFuelTruck,
  type FuelTruck,
  type FuelTruckCreateRequest,
  type FuelTruckUpdateRequest,
} from "../../services/fuel-truck-service"
import { toast } from "sonner"

const FUEL_TYPES = ["Jet A", "Jet A-1", "Avgas 100LL", "Diesel"]

type EditTruckData = {
  id: number
  truck_number?: string
  fuel_type?: string
  capacity?: number
  current_meter_reading?: number
  is_active?: boolean
}

export default function FuelTruckManagementPage() {
  const [trucks, setTrucks] = useState<FuelTruck[]>([])
  const [filteredTrucks, setFilteredTrucks] = useState<FuelTruck[]>([])
  const [searchTerm, setSearchTerm] = useState("")
  const [statusFilter, setStatusFilter] = useState<"all" | "active" | "inactive">("all")
  const [fuelTypeFilter, setFuelTypeFilter] = useState("all")

  const [isLoadingPage, setIsLoadingPage] = useState(true)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [isDeleting, setIsDeleting] = useState(false)

  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false)

  const [selectedTruck, setSelectedTruck] = useState<FuelTruck | null>(null)
  const [formError, setFormError] = useState<string | null>(null) // Used for create/edit/delete dialog errors

  const [newTruckData, setNewTruckData] = useState<FuelTruckCreateRequest>({
    truck_number: "",
    fuel_type: FUEL_TYPES[0],
    capacity: 5000,
    current_meter_reading: 0,
  })

  const [editTruckData, setEditTruckData] = useState<Partial<EditTruckData>>({})

  const fetchTrucks = async () => {
    setIsLoadingPage(true)
    try {
      const data = await getAllFuelTrucks()
      setTrucks(data)
    } catch (error) {
      console.error("Failed to fetch fuel trucks:", error)
      toast.error("Failed to load fuel trucks.")
    } finally {
      setIsLoadingPage(false)
    }
  }

  useEffect(() => {
    fetchTrucks()
  }, [])

  useEffect(() => {
    let currentFilteredTrucks = trucks

    if (searchTerm) {
      currentFilteredTrucks = currentFilteredTrucks.filter((truck) =>
        truck.truck_number.toLowerCase().includes(searchTerm.toLowerCase()),
      )
    }

    if (statusFilter !== "all") {
      const isActive = statusFilter === "active"
      currentFilteredTrucks = currentFilteredTrucks.filter((truck) => truck.is_active === isActive)
    }

    if (fuelTypeFilter !== "all") {
      currentFilteredTrucks = currentFilteredTrucks.filter((truck) => truck.fuel_type === fuelTypeFilter)
    }

    setFilteredTrucks(currentFilteredTrucks)
  }, [trucks, searchTerm, statusFilter, fuelTypeFilter])

  const handleCreateSubmit = async () => {
    setFormError(null)
    if (!newTruckData.truck_number || !newTruckData.fuel_type || newTruckData.capacity <= 0) {
      setFormError("Truck Number, Fuel Type, and a valid Capacity are required.")
      return
    }
    setIsSubmitting(true)
    try {
      await createFuelTruck(newTruckData)
      toast.success("Fuel truck created successfully!")
      await fetchTrucks()
      setIsCreateDialogOpen(false)
    } catch (error: any) {
      console.error("Failed to create fuel truck:", error)
      setFormError(error.message || "Failed to create fuel truck.")
      toast.error(error.message || "Failed to create fuel truck.")
    } finally {
      setIsSubmitting(false)
    }
  }

  const handleEditSubmit = async () => {
    if (!selectedTruck || !editTruckData.id) {
      setFormError("No truck selected for editing.")
      return
    }
    setFormError(null)
    if (editTruckData.truck_number && !editTruckData.truck_number.trim()) {
      setFormError("Truck number cannot be empty.")
      return
    }
    if (editTruckData.capacity !== undefined && editTruckData.capacity <= 0) {
      setFormError("Capacity must be a positive number.")
      return
    }

    setIsSubmitting(true)
    try {
      const { id, ...payload } = editTruckData as EditTruckData
      await updateFuelTruck(selectedTruck.id, payload)
      toast.success("Fuel truck updated successfully!")
      await fetchTrucks()
      setIsEditDialogOpen(false)
    } catch (error: any) {
      console.error("Failed to update fuel truck:", error)
      setFormError(error.message || "Failed to update fuel truck.")
      toast.error(error.message || "Failed to update fuel truck.")
    } finally {
      setIsSubmitting(false)
    }
  }

  const handleDeleteConfirm = async () => {
    if (!selectedTruck) {
      setFormError("No truck selected for deletion.")
      return
    }
    setIsDeleting(true)
    setFormError(null)
    try {
      await deleteFuelTruck(selectedTruck.id)
      toast.success("Fuel truck deleted successfully!")
      await fetchTrucks()
      setIsDeleteDialogOpen(false)
    } catch (error: any) {
      console.error("Failed to delete fuel truck:", error)
      const defaultErrorMsg = "Failed to delete fuel truck."
      if (error.message && (error.message.includes("409") || error.message.toLowerCase().includes("conflict"))) {
        setFormError("Cannot delete truck. It may have associated records or operations.")
        toast.error("Cannot delete truck. It may have associated records or operations.")
      } else {
        setFormError(error.message || defaultErrorMsg)
        toast.error(error.message || defaultErrorMsg)
      }
    } finally {
      setIsDeleting(false)
    }
  }

  const getStatusBadgeStyle = (isActive: boolean) => {
    return isActive
      ? "bg-green-100 text-green-800 border-green-300"
      : "bg-red-100 text-red-800 border-red-300"
  }

  const getStatusIcon = (isActive: boolean) => {
    return isActive ? <CheckCircle className="h-4 w-4" /> : <AlertTriangle className="h-4 w-4" />
  }

  if (isLoadingPage) {
    return (
      <div className="flex justify-center items-center h-screen">
        <Loader2 className="h-12 w-12 animate-spin text-primary" />
        <p className="ml-3 text-lg">Loading fuel trucks...</p>
      </div>
    )
  }

  return (
    <div className="space-y-6 p-4 md:p-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">Fuel Truck Management</h1>
          <p className="text-muted-foreground">Monitor and manage fuel truck fleet operations</p>
        </div>
        <Dialog
          open={isCreateDialogOpen}
          onOpenChange={(isOpen) => {
            setIsCreateDialogOpen(isOpen)
            if (!isOpen) {
              setNewTruckData({ truck_number: "", fuel_type: FUEL_TYPES[0], capacity: 5000, current_meter_reading: 0 })
              setFormError(null)
            }
          }}
        >
          <DialogTrigger asChild>
            <Button className="gap-2" onClick={() => setIsCreateDialogOpen(true)}>
              <Plus className="h-4 w-4" /> Add Fuel Truck
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[425px]">
            <DialogHeader>
              <DialogTitle>Add New Fuel Truck</DialogTitle>
              <DialogDescription>Register a new fuel truck to the fleet management system.</DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="grid gap-2">
                <Label htmlFor="truck_number-create">Truck Number</Label>
                <Input
                  id="truck_number-create"
                  value={newTruckData.truck_number}
                  onChange={(e) => setNewTruckData({ ...newTruckData, truck_number: e.target.value })}
                  placeholder="e.g., T-101"
                  disabled={isSubmitting}
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="fuel_type-create">Fuel Type</Label>
                <Select
                  value={newTruckData.fuel_type}
                  onValueChange={(value) => setNewTruckData({ ...newTruckData, fuel_type: value })}
                  disabled={isSubmitting}
                >
                  <SelectTrigger id="fuel_type-create"><SelectValue placeholder="Select fuel type" /></SelectTrigger>
                  <SelectContent>
                    {FUEL_TYPES.map((type) => (<SelectItem key={type} value={type}>{type}</SelectItem>))}
                  </SelectContent>
                </Select>
              </div>
              <div className="grid gap-2">
                <Label htmlFor="capacity-create">Capacity (Gallons)</Label>
                <Input
                  id="capacity-create" type="number" value={newTruckData.capacity}
                  onChange={(e) => setNewTruckData({ ...newTruckData, capacity: Number.parseInt(e.target.value) || 0 })}
                  disabled={isSubmitting}
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="current_meter_reading-create">Current Meter Reading</Label>
                <Input
                  id="current_meter_reading-create" type="number" value={newTruckData.current_meter_reading}
                  onChange={(e) => setNewTruckData({ ...newTruckData, current_meter_reading: Number.parseInt(e.target.value) || 0})}
                  disabled={isSubmitting}
                />
              </div>
              {formError && (<div className="text-sm text-red-500 p-2 bg-red-50 border border-red-200 rounded-md">{formError}</div>)}
            </div>
            <DialogFooter>
              <Button type="button" variant="outline" onClick={() => setIsCreateDialogOpen(false)} disabled={isSubmitting}>Cancel</Button>
              <Button type="button" onClick={handleCreateSubmit} disabled={isSubmitting}>
                {isSubmitting ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
                {isSubmitting ? "Creating..." : "Create Truck"}
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>

      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <Card><CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2"><CardTitle className="text-sm font-medium">Total Trucks</CardTitle><Truck className="h-4 w-4 text-muted-foreground" /></CardHeader><CardContent><div className="text-2xl font-bold">{trucks.length}</div></CardContent></Card>
        <Card><CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2"><CardTitle className="text-sm font-medium">Active Trucks</CardTitle><CheckCircle className="h-4 w-4 text-green-600" /></CardHeader><CardContent><div className="text-2xl font-bold">{trucks.filter((t) => t.is_active).length}</div></CardContent></Card>
        <Card><CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2"><CardTitle className="text-sm font-medium">Inactive Trucks</CardTitle><AlertTriangle className="h-4 w-4 text-red-600" /></CardHeader><CardContent><div className="text-2xl font-bold">{trucks.filter((t) => !t.is_active).length}</div></CardContent></Card>
        <Card><CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2"><CardTitle className="text-sm font-medium">Avg. Fuel Level</CardTitle><Fuel className="h-4 w-4 text-blue-600" /></CardHeader><CardContent>
            <div className="text-2xl font-bold">
              {trucks.length > 0 ? Math.round(trucks.reduce((acc, truck) => acc + (truck.capacity > 0 ? (truck.current_meter_reading / truck.capacity) * 100 : 0), 0) / trucks.filter(t => t.capacity > 0).length) : 0}%
            </div>
        </CardContent></Card>
      </div>

      <Card>
        <CardHeader><CardTitle className="flex items-center gap-2"><Filter className="h-5 w-5" />Filters</CardTitle></CardHeader>
        <CardContent>
          <div className="flex flex-col gap-4 md:flex-row md:items-center">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
              <Input placeholder="Search by truck number..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="pl-10" />
            </div>
            <Select value={statusFilter} onValueChange={(value: "all" | "active" | "inactive") => setStatusFilter(value)}>
              <SelectTrigger className="w-full md:w-[180px]"><SelectValue placeholder="Filter by status" /></SelectTrigger>
              <SelectContent><SelectItem value="all">All Status</SelectItem><SelectItem value="active">Active</SelectItem><SelectItem value="inactive">Inactive</SelectItem></SelectContent>
            </Select>
            <Select value={fuelTypeFilter} onValueChange={setFuelTypeFilter}>
              <SelectTrigger className="w-full md:w-[180px]"><SelectValue placeholder="Filter by fuel type" /></SelectTrigger>
              <SelectContent><SelectItem value="all">All Fuel Types</SelectItem>{FUEL_TYPES.map((type) => (<SelectItem key={type} value={type}>{type}</SelectItem>))}</SelectContent>
            </Select>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader><CardTitle className="flex items-center gap-2"><Truck className="h-5 w-5" />Fuel Trucks ({filteredTrucks.length})</CardTitle><CardDescription>Monitor fuel truck status, capacity, and meter readings.</CardDescription></CardHeader>
        <CardContent>
          <Table>
            <TableHeader><TableRow><TableHead>Truck Number</TableHead><TableHead>Fuel Type</TableHead><TableHead>Fuel Level (Meter)</TableHead><TableHead>Status</TableHead><TableHead>Created At</TableHead><TableHead className="text-right">Actions</TableHead></TableRow></TableHeader>
            <TableBody>
              {filteredTrucks.map((truck) => {
                const fuelPercentage = truck.capacity > 0 ? (truck.current_meter_reading / truck.capacity) * 100 : 0
                return (
                  <TableRow key={truck.id}>
                    <TableCell><div><div className="font-medium">{truck.truck_number}</div><div className="text-sm text-muted-foreground">{truck.capacity.toLocaleString()} gal capacity</div></div></TableCell>
                    <TableCell><Badge variant="outline">{truck.fuel_type}</Badge></TableCell>
                    <TableCell><div className="space-y-1"><div className="flex items-center justify-between text-sm"><span>{truck.current_meter_reading.toLocaleString()} gal</span><span>{Math.round(fuelPercentage)}%</span></div><Progress value={fuelPercentage} className="h-2" /></div></TableCell>
                    <TableCell><Badge className={getStatusBadgeStyle(truck.is_active)}><div className="flex items-center gap-1">{getStatusIcon(truck.is_active)}{truck.is_active ? "Active" : "Inactive"}</div></Badge></TableCell>
                    <TableCell>{truck.created_at ? new Date(truck.created_at).toLocaleDateString() : "N/A"}</TableCell>
                    <TableCell className="text-right">
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild><Button variant="ghost" className="h-8 w-8 p-0"><MoreHorizontal className="h-4 w-4" /></Button></DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                          <DropdownMenuLabel>Actions</DropdownMenuLabel>
                          <DropdownMenuItem onClick={() => { 
                            setSelectedTruck(truck); 
                            setEditTruckData({ 
                              id: truck.id,
                              truck_number: truck.truck_number,
                              fuel_type: truck.fuel_type,
                              capacity: truck.capacity,
                              current_meter_reading: truck.current_meter_reading,
                              is_active: truck.is_active
                            }); 
                            setIsEditDialogOpen(true); 
                            setFormError(null);
                          }}>
                            <Edit className="mr-2 h-4 w-4" />Edit
                          </DropdownMenuItem>
                          <DropdownMenuItem className="text-destructive hover:!text-destructive-foreground hover:!bg-destructive" onClick={() => { setSelectedTruck(truck); setIsDeleteDialogOpen(true); setFormError(null);}}>
                            <Trash2 className="mr-2 h-4 w-4" />Delete
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </TableCell>
                  </TableRow>
                )
              })}
            </TableBody>
          </Table>
        </CardContent>
      </Card>

      <Dialog open={isEditDialogOpen} onOpenChange={(isOpen) => { setIsEditDialogOpen(isOpen); if (!isOpen) { setEditTruckData({}); setSelectedTruck(null); setFormError(null); }}}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader><DialogTitle>Edit Fuel Truck</DialogTitle><DialogDescription>Update fuel truck information and status.</DialogDescription></DialogHeader>
          {selectedTruck && editTruckData && (
            <div className="grid gap-4 py-4">
              <div className="grid gap-2"><Label htmlFor="truck_number-edit">Truck Number</Label><Input id="truck_number-edit" value={editTruckData.truck_number || ""} onChange={(e) => setEditTruckData({ ...editTruckData, truck_number: e.target.value })} disabled={isSubmitting} /></div>
              <div className="grid gap-2"><Label htmlFor="fuel_type-edit">Fuel Type</Label>
                <Select value={editTruckData.fuel_type || ""} onValueChange={(value) => setEditTruckData({ ...editTruckData, fuel_type: value })} disabled={isSubmitting}>
                  <SelectTrigger id="fuel_type-edit"><SelectValue placeholder="Select fuel type" /></SelectTrigger>
                  <SelectContent>{FUEL_TYPES.map((type) => (<SelectItem key={type} value={type}>{type}</SelectItem>))}</SelectContent>
                </Select>
              </div>
              <div className="grid gap-2"><Label htmlFor="capacity-edit">Capacity (Gallons)</Label><Input id="capacity-edit" type="number" value={editTruckData.capacity || 0} onChange={(e) => setEditTruckData({ ...editTruckData, capacity: Number.parseInt(e.target.value) || 0 })} disabled={isSubmitting} /></div>
              <div className="grid gap-2"><Label htmlFor="current_meter_reading-edit">Current Meter Reading</Label><Input id="current_meter_reading-edit" type="number" value={editTruckData.current_meter_reading || 0} onChange={(e) => setEditTruckData({ ...editTruckData, current_meter_reading: Number.parseInt(e.target.value) || 0})} disabled={isSubmitting} /></div>
              <div className="grid gap-2"><Label htmlFor="is_active-edit" className="flex items-center justify-between w-full"><span>Status</span><Switch id="is_active-edit" checked={editTruckData.is_active} onCheckedChange={(checked) => setEditTruckData({ ...editTruckData, is_active: checked })} disabled={isSubmitting} /></Label></div>
              {formError && (<div className="text-sm text-red-500 p-2 bg-red-50 border border-red-200 rounded-md">{formError}</div>)}
            </div>
          )}
          <DialogFooter>
            <Button type="button" variant="outline" onClick={() => setIsEditDialogOpen(false)} disabled={isSubmitting}>Cancel</Button>
            <Button type="button" onClick={handleEditSubmit} disabled={isSubmitting}>
              {isSubmitting ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
              {isSubmitting ? "Saving..." : "Save Changes"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <Dialog open={isDeleteDialogOpen} onOpenChange={(isOpen) => { setIsDeleteDialogOpen(isOpen); if (!isOpen) { setSelectedTruck(null); setFormError(null); }}}>
        <DialogContent>
          <DialogHeader><DialogTitle>Confirm Delete</DialogTitle><DialogDescription>Are you sure you want to delete truck {selectedTruck?.truck_number}? This action cannot be undone.</DialogDescription></DialogHeader>
          {formError && (<div className="text-sm text-red-500 p-2 bg-red-50 border border-red-200 rounded-md my-2">{formError}</div>)}
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsDeleteDialogOpen(false)} disabled={isDeleting}>Cancel</Button>
            <Button variant="destructive" onClick={handleDeleteConfirm} disabled={isDeleting}>
              {isDeleting ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
              {isDeleting ? "Deleting..." : "Delete"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}

================
File: frontend/app/admin/users/page.tsx
================
"use client"

import { useState, useEffect } from "react"
import { Users, UserPlus, Search, Filter, MoreHorizontal, Edit, Trash2, Shield, Eye, EyeOff } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { User as ServiceUser, getAllUsers, createUser, updateUser, deleteUser, UserCreateRequest, UserUpdateRequest, Role, getRoles, getAdminUserById } from "@/app/services/user-service" // Import service functions
import { toast } from "sonner" // For notifications

export default function UserManagement() {
  const [users, setUsers] = useState<ServiceUser[]>([]) // Use ServiceUser type
  const [filteredUsers, setFilteredUsers] = useState<ServiceUser[]>([]) // Use ServiceUser type
  const [searchTerm, setSearchTerm] = useState("")
  const [statusFilter, setStatusFilter] = useState<"all" | "active" | "inactive">("all") // Typed status filter
  const [roleFilter, setRoleFilter] = useState("all")
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)
  const [selectedUser, setSelectedUser] = useState<ServiceUser | null>(null) // Use ServiceUser type
  const [showPassword, setShowPassword] = useState(false)
  const [isLoadingUsers, setIsLoadingUsers] = useState(true)
  const [isSubmitting, setIsSubmitting] = useState(false) // For form submissions
  
  // Dynamic role management
  const [roles, setRoles] = useState<Role[]>([])
  const [isLoadingRoles, setIsLoadingRoles] = useState(true)
  const [roleStringToIdMap, setRoleStringToIdMap] = useState<Record<string, number>>({})

  const [newUser, setNewUser] = useState({
    username: "",
    fullName: "",
    email: "",
    password: "",
    role: "", // This will be a role name string, to be mapped to role_ids
    is_active: true, // Changed from status
  })

  // Fetch roles from API and create mapping
  const fetchRoles = async () => {
    setIsLoadingRoles(true)
    try {
      const fetchedRoles = await getRoles()
      setRoles(fetchedRoles)
      
      // Create mapping from role name to ID
      const mapping: Record<string, number> = {}
      fetchedRoles.forEach((role) => {
        mapping[role.name.toLowerCase()] = role.id
      })
      setRoleStringToIdMap(mapping)
    } catch (error) {
      console.error("Failed to fetch roles:", error)
      toast.error("Failed to load roles. Please try again.")
    } finally {
      setIsLoadingRoles(false)
    }
  }

  const fetchUsers = async () => {
    setIsLoadingUsers(true)
    try {
      const fetchedUsers = await getAllUsers()
      setUsers(fetchedUsers)
      setFilteredUsers(fetchedUsers) // Initialize filteredUsers
    } catch (error) {
      console.error("Failed to fetch users:", error)
      toast.error("Failed to load users. Please try again.")
    } finally {
      setIsLoadingUsers(false)
    }
  }

  useEffect(() => {
    fetchRoles()
    fetchUsers()
  }, [])

  useEffect(() => {
    let filtered = users

    if (searchTerm) {
      filtered = filtered.filter(
        (user) =>
          (user.fullName && user.fullName.toLowerCase().includes(searchTerm.toLowerCase())) ||
          user.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
          (user.username && user.username.toLowerCase().includes(searchTerm.toLowerCase())),
      )
    }

    if (statusFilter !== "all") {
      const isActiveFilter = statusFilter === "active"
      filtered = filtered.filter((user) => user.is_active === isActiveFilter)
    }

    if (roleFilter !== "all") {
      filtered = filtered.filter((user) => 
        user.roles.some(role => {
          // Handle both string roles and role objects
          const roleStr = typeof role === 'string' ? role : (role as any)?.name || String(role)
          return roleStr.toLowerCase() === roleFilter.toLowerCase()
        })
      )
    }

    setFilteredUsers(filtered)
  }, [users, searchTerm, statusFilter, roleFilter])

  const handleCreateUser = async () => {
    setIsSubmitting(true)
    const roleId = roleStringToIdMap[newUser.role.toLowerCase()]
    if (!roleId) {
      toast.error(`Invalid role selected: ${newUser.role}. Please select a valid role.`)
      setIsSubmitting(false)
      return
    }

    const payload: UserCreateRequest = {
      username: newUser.username,
      fullName: newUser.fullName,
      email: newUser.email,
      password: newUser.password,
      role_ids: [roleId], // Use dynamic mapping
      is_active: newUser.is_active,
    }

    try {
      await createUser(payload)
      toast.success("User created successfully!")
      fetchUsers() // Refresh user list
      setNewUser({ username: "", fullName: "", email: "", password: "", role: "", is_active: true })
      setIsCreateDialogOpen(false)
    } catch (error: any) {
      console.error("Failed to create user:", error)
      toast.error(`Failed to create user: ${error.message || "Unknown error"}`)
    } finally {
      setIsSubmitting(false)
    }
  }

  const handleEditUser = async () => {
    if (!selectedUser) return
    setIsSubmitting(true)

    // Extract role string from either string or object format
    const firstRole = selectedUser.roles[0]
    const roleString = typeof firstRole === 'string' ? firstRole : (firstRole as any)?.name || ""
    const roleId = roleStringToIdMap[roleString.toLowerCase()]
    
    if (!roleId && selectedUser.roles.length > 0) {
      // Check if the role string exists in our map
      toast.error(`Invalid role detected: ${roleString}. Please select a valid role.`)
      setIsSubmitting(false)
      return
    }

    const payload: UserUpdateRequest = {
      username: selectedUser.username,
      fullName: selectedUser.fullName,
      email: selectedUser.email,
      is_active: selectedUser.is_active,
      // Only include role_ids if a valid role was found/selected
      ...(roleId && { role_ids: [roleId] }),
    }

    try {
      await updateUser(selectedUser.id, payload)
      toast.success("User updated successfully!")
      fetchUsers() // Refresh user list
      setIsEditDialogOpen(false)
      setSelectedUser(null)
    } catch (error: any) {
      console.error("Failed to update user:", error)
      toast.error(`Failed to update user: ${error.message || "Unknown error"}`)
    } finally {
      setIsSubmitting(false)
    }
  }

  const handleDeleteUser = async (userId: number) => {
    // Add confirmation dialog before deleting
    const isConfirmed = window.confirm(
      "Are you sure you want to delete this user? The user will be deactivated for data integrity."
    )
    
    if (!isConfirmed) {
      return
    }

    try {
      await deleteUser(userId)
      toast.success("User has been deactivated successfully!")
      fetchUsers() // Refresh user list
    } catch (error: any) {
      console.error("Failed to delete user:", error)
      toast.error(`Failed to delete user: ${error.message || "Unknown error"}`)
    }
  }

  const getRoleDisplayName = (roleName: string) => {
    // Handle cases where roleName is null, undefined, or empty
    if (!roleName) {
      return 'No Role'
    }
    
    // Convert to string if it's not already (in case it's a number or other type)
    const roleString = String(roleName)
    
    // If we don't have roles loaded yet, just return the role string
    if (roles.length === 0) {
      return roleString
    }
    
    // Try to find the role in our loaded roles
    const role = roles.find((r) => r.name.toLowerCase() === roleString.toLowerCase())
    return role ? role.name : roleString
  }

  const getStatusColor = (isActive: boolean) => {
    return isActive ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800"
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">User Management</h1>
          <p className="text-muted-foreground">Manage user accounts, roles, and permissions</p>
        </div>
        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
          <DialogTrigger asChild>
            <Button className="gap-2" disabled={isLoadingRoles}>
              <UserPlus className="h-4 w-4" />
              Add User
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[425px]">
            <DialogHeader>
              <DialogTitle>Create New User</DialogTitle>
              <DialogDescription>Add a new user to the system with appropriate role and permissions.</DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="grid gap-2">
                <Label htmlFor="username">Username</Label>
                <Input
                  id="username"
                  value={newUser.username}
                  onChange={(e) => setNewUser({ ...newUser, username: e.target.value })}
                  placeholder="johndoe"
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="fullName">Full Name</Label>
                <Input
                  id="fullName"
                  value={newUser.fullName}
                  onChange={(e) => setNewUser({ ...newUser, fullName: e.target.value })}
                  placeholder="John Doe"
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="email">Email</Label>
                <Input
                  id="email"
                  type="email"
                  value={newUser.email}
                  onChange={(e) => setNewUser({ ...newUser, email: e.target.value })}
                  placeholder="john@example.com"
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="password">Password</Label>
                <div className="relative">
                  <Input
                    id="password"
                    type={showPassword ? "text" : "password"}
                    value={newUser.password}
                    onChange={(e) => setNewUser({ ...newUser, password: e.target.value })}
                    placeholder="••••••••"
                  />
                  <Button
                    type="button"
                    variant="ghost"
                    size="icon"
                    className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                    onClick={() => setShowPassword(!showPassword)}
                  >
                    {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                  </Button>
                </div>
              </div>
              <div className="grid gap-2">
                <Label htmlFor="role">Role</Label>
                <Select value={newUser.role} onValueChange={(value) => setNewUser({ ...newUser, role: value })} disabled={isLoadingRoles}>
                  <SelectTrigger>
                    <SelectValue placeholder={isLoadingRoles ? "Loading roles..." : "Select a role"} />
                  </SelectTrigger>
                  <SelectContent>
                    {roles.map((role) => (
                      <SelectItem key={role.id} value={role.name}>
                        {role.name}
                        {role.description && <span className="text-muted-foreground text-sm"> - {role.description}</span>}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              {/* Add is_active select for create dialog */}
              <div className="grid gap-2">
                <Label htmlFor="status-create">Status</Label>
                <Select
                  value={newUser.is_active ? "active" : "inactive"}
                  onValueChange={(value) => setNewUser({ ...newUser, is_active: value === "active" })}
                >
                  <SelectTrigger id="status-create">
                    <SelectValue placeholder="Select status" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="active">Active</SelectItem>
                    <SelectItem value="inactive">Inactive</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            <DialogFooter>
              <Button type="button" variant="outline" onClick={() => setIsCreateDialogOpen(false)} disabled={isSubmitting}>
                Cancel
              </Button>
              <Button type="button" onClick={handleCreateUser} disabled={isSubmitting || isLoadingRoles}>
                {isSubmitting ? "Creating..." : "Create User"}
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>

      {/* Filters and Search */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Filter className="h-5 w-5" />
            Filters
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col gap-4 md:flex-row md:items-center">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
              <Input
                placeholder="Search users by name or email..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10"
              />
            </div>
            <Select value={statusFilter} onValueChange={(value: "all" | "active" | "inactive") => setStatusFilter(value)}>
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="Filter by status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Status</SelectItem>
                <SelectItem value="active">Active</SelectItem>
                <SelectItem value="inactive">Inactive</SelectItem>
              </SelectContent>
            </Select>
            <Select value={roleFilter} onValueChange={setRoleFilter} disabled={isLoadingRoles}>
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder={isLoadingRoles ? "Loading..." : "Filter by role"} />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Roles</SelectItem>
                {roles.map((role) => (
                  <SelectItem key={role.id} value={role.name}>
                    {role.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </CardContent>
      </Card>

      {/* Users Table */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Users className="h-5 w-5" />
            Users ({filteredUsers.length})
          </CardTitle>
          <CardDescription>Manage user accounts and their access permissions</CardDescription>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>User</TableHead>
                <TableHead>Roles</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Created At</TableHead>
                <TableHead className="text-right">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {isLoadingUsers ? (
                <TableRow>
                  <TableCell colSpan={5} className="text-center">
                    Loading users...
                  </TableCell>
                </TableRow>
              ) : filteredUsers.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={5} className="text-center">
                    No users found.
                  </TableCell>
                </TableRow>
              ) : (
                filteredUsers.map((user) => (
                  <TableRow key={user.id}>
                    <TableCell>
                      <div>
                        <div className="font-medium">{user.fullName || user.username || "N/A"}</div>
                        <div className="text-sm text-muted-foreground">{user.email}</div>
                        {user.username && user.fullName && (
                          <div className="text-xs text-muted-foreground">Username: {user.username}</div>
                        )}
                      </div>
                    </TableCell>
                    <TableCell>
                      {user.roles.map((role, index) => {
                        // Handle both string roles and role objects
                        const roleStr = typeof role === 'string' ? role : (role as any)?.name || String(role)
                        return (
                          <Badge key={roleStr || index} variant="outline" className="mr-1 mb-1">
                            {getRoleDisplayName(roleStr)}
                          </Badge>
                        )
                      })}
                    </TableCell>
                    <TableCell>
                      <Badge className={getStatusColor(user.is_active)}>{user.is_active ? "Active" : "Inactive"}</Badge>
                    </TableCell>
                    <TableCell>{user.created_at ? new Date(user.created_at).toLocaleDateString() : "N/A"}</TableCell>
                    <TableCell className="text-right">
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button variant="ghost" className="h-8 w-8 p-0">
                            <MoreHorizontal className="h-4 w-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                          <DropdownMenuLabel>Actions</DropdownMenuLabel>
                          <DropdownMenuItem
                            onClick={async () => {
                              try {
                                // Use admin endpoint to get full user details
                                const fullUserData = await getAdminUserById(user.id)
                                setSelectedUser(fullUserData)
                                setIsEditDialogOpen(true)
                              } catch (error) {
                                console.error("Failed to fetch user details:", error)
                                toast.error("Failed to load user details for editing")
                              }
                            }}
                          >
                            <Edit className="mr-2 h-4 w-4" />
                            Edit
                          </DropdownMenuItem>
                          <DropdownMenuItem>
                            <Shield className="mr-2 h-4 w-4" />
                            Manage Roles (Future)
                          </DropdownMenuItem>
                          <DropdownMenuSeparator />
                          <DropdownMenuItem className="text-destructive hover:text-destructive-foreground hover:bg-destructive" onClick={() => handleDeleteUser(user.id)}>
                            <Trash2 className="mr-2 h-4 w-4" />
                            Delete
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </TableCell>
                  </TableRow>
                ))
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>

      {/* Edit User Dialog */}
      <Dialog open={isEditDialogOpen} onOpenChange={(isOpen) => {
        setIsEditDialogOpen(isOpen);
        if (!isOpen) setSelectedUser(null); // Clear selected user when dialog closes
      }}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Edit User</DialogTitle>
            <DialogDescription>Update user information and settings.</DialogDescription>
          </DialogHeader>
          {selectedUser && (
            <div className="grid gap-4 py-4">
              <div className="grid gap-2">
                <Label htmlFor="edit-username">Username</Label>
                <Input
                  id="edit-username"
                  value={selectedUser.username || ""}
                  onChange={(e) => setSelectedUser({ ...selectedUser, username: e.target.value })}
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="edit-fullName">Full Name</Label>
                <Input
                  id="edit-fullName"
                  value={selectedUser.fullName || ""}
                  onChange={(e) => setSelectedUser({ ...selectedUser, fullName: e.target.value })}
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="edit-email">Email</Label>
                <Input
                  id="edit-email"
                  type="email"
                  value={selectedUser.email}
                  onChange={(e) => setSelectedUser({ ...selectedUser, email: e.target.value })}
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="edit-role">Role</Label>
                <Select
                  value={(() => {
                    // Handle both string roles and role objects
                    const firstRole = selectedUser.roles[0]
                    return typeof firstRole === 'string' ? firstRole : (firstRole as any)?.name || ""
                  })()}
                  onValueChange={(value) => setSelectedUser({ ...selectedUser, roles: [{ id: roleStringToIdMap[value.toLowerCase()] || 0, name: value }] })}
                  disabled={isLoadingRoles}
                >
                  <SelectTrigger>
                    <SelectValue placeholder={isLoadingRoles ? "Loading roles..." : "Select a role"} />
                  </SelectTrigger>
                  <SelectContent>
                    {roles.map((role) => (
                      <SelectItem key={role.id} value={role.name}>
                        {role.name}
                        {role.description && <span className="text-muted-foreground text-sm"> - {role.description}</span>}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              <div className="grid gap-2">
                <Label htmlFor="edit-status">Status</Label>
                <Select
                  value={selectedUser.is_active ? "active" : "inactive"}
                  onValueChange={(value) => setSelectedUser({ ...selectedUser, is_active: value === "active" })}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select status" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="active">Active</SelectItem>
                    <SelectItem value="inactive">Inactive</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          )}
          <DialogFooter>
            <Button type="button" variant="outline" onClick={() => setIsEditDialogOpen(false)} disabled={isSubmitting}>
              Cancel
            </Button>
            <Button type="button" onClick={handleEditUser} disabled={isSubmitting || isLoadingRoles}>
              {isSubmitting ? "Saving..." : "Save Changes"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}

================
File: frontend/app/components/aircraft-lookup.tsx
================
"use client"

import { useState, useEffect } from "react"
import { Search, Loader2, AlertCircle, Info, Plus, X } from "lucide-react"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { getAircraftByTailNumber, createCSRAircraft, type Aircraft } from "../services/aircraft-service"

interface AircraftLookupProps {
  onAircraftFound?: (aircraft: Aircraft) => void
  onAircraftNotFound?: (tailNumber: string) => void
  initialTailNumber?: string
  className?: string
}

interface AircraftCreationData {
  tail_number: string
  aircraft_type: string
  fuel_type: string
}

// Common aircraft types for quick selection
const AIRCRAFT_TYPES = [
  "Citation CJ3",
  "Citation Mustang", 
  "Gulfstream G650",
  "King Air 350",
  "Pilatus PC-12",
  "Cessna 172",
  "Cessna 182",
  "Piper Archer",
  "Beechcraft Bonanza",
  "Other"
]

// Common fuel types
const FUEL_TYPES = [
  "Jet A",
  "100LL",
]

export default function AircraftLookup({
  onAircraftFound,
  onAircraftNotFound,
  initialTailNumber = "",
  className = "",
}: AircraftLookupProps) {
  const [tailNumber, setTailNumber] = useState(initialTailNumber)
  const [error, setError] = useState<string | null>(null)
  const [isLoading, setIsLoading] = useState(false)
  const [lookupResult, setLookupResult] = useState<Aircraft | null>(null)
  const [lookupAttempted, setLookupAttempted] = useState(false)
  
  // Aircraft creation state
  const [showCreateDialog, setShowCreateDialog] = useState(false)
  const [isCreating, setIsCreating] = useState(false)
  const [createError, setCreateError] = useState<string | null>(null)
  const [aircraftCreationData, setAircraftCreationData] = useState<AircraftCreationData>({
    tail_number: "",
    aircraft_type: "",
    fuel_type: ""
  })
  const [customAircraftType, setCustomAircraftType] = useState("")
  const [customFuelType, setCustomFuelType] = useState("")

  // Remove automatic lookup - only trigger on button click or Enter key
  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      e.preventDefault()
      handleLookup()
    }
  }

  const handleLookup = async () => {
    if (!tailNumber.trim()) {
      setError("Please enter a tail number")
      return
    }

    setError(null)
    setIsLoading(true)
    setLookupAttempted(true)

    try {
      const result = await getAircraftByTailNumber(tailNumber.trim())
      setLookupResult(result)

      if (result && onAircraftFound) {
        onAircraftFound(result)
      } else if (!result) {
        // Aircraft not found - don't set error immediately, let user choose to create
        setLookupResult(null)
        if (onAircraftNotFound) {
          onAircraftNotFound(tailNumber.trim())
        }
      }
    } catch (err) {
      console.error("Aircraft lookup error:", err)
      setError("Failed to find aircraft. Please verify the tail number or try again.")
      setLookupResult(null)
      if (onAircraftNotFound) {
        onAircraftNotFound(tailNumber.trim())
      }
    } finally {
      setIsLoading(false)
    }
  }

  const handleCreateAircraft = () => {
    setShowCreateDialog(true)
    setAircraftCreationData({
      tail_number: tailNumber.trim(),
      aircraft_type: "",
      fuel_type: ""
    })
    setCustomAircraftType("")
    setCustomFuelType("")
    setCreateError(null)
  }

  const handleCreateSubmit = async () => {
    setCreateError(null)
    setIsCreating(true)

    try {
      // Validate required fields
      if (!aircraftCreationData.tail_number) {
        throw new Error("Tail number is required")
      }
      if (!aircraftCreationData.aircraft_type) {
        throw new Error("Aircraft type is required")
      }
      if (!aircraftCreationData.fuel_type) {
        throw new Error("Fuel type is required")
      }

      // Use custom values if "Other" was selected
      const finalData = {
        tail_number: aircraftCreationData.tail_number,
        aircraft_type: aircraftCreationData.aircraft_type === "Other" 
          ? customAircraftType 
          : aircraftCreationData.aircraft_type,
        fuel_type: aircraftCreationData.fuel_type === "Other" 
          ? customFuelType 
          : aircraftCreationData.fuel_type,
      }

      const newAircraft = await createCSRAircraft(finalData)
      
      // Success - close dialog and update lookup result
      setShowCreateDialog(false)
      setLookupResult(newAircraft)
      
      if (onAircraftFound) {
        onAircraftFound(newAircraft)
      }
      
      setError(null) // Clear any previous errors
    } catch (err) {
      console.error("Aircraft creation error:", err)
      setCreateError(err instanceof Error ? err.message : "Failed to create aircraft")
    } finally {
      setIsCreating(false)
    }
  }

  return (
    <div className={className}>
      <div className="space-y-4">
        <div className="space-y-2">
          <Label htmlFor="tailNumber">Aircraft Tail Number</Label>
          <div className="flex gap-2">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
              <Input
                id="tailNumber"
                placeholder="Enter tail number (e.g., N12345)"
                value={tailNumber}
                onChange={(e) => {
                  setTailNumber(e.target.value)
                  setLookupResult(null) // Clear previous results when typing
                  setError(null) // Clear any previous errors when typing
                  setLookupAttempted(false) // Reset lookup attempted state when typing
                }}
                className="pl-10"
                disabled={isLoading}
                onKeyDown={handleKeyPress}
              />
              {isLoading && <Loader2 className="absolute right-3 top-3 h-4 w-4 animate-spin text-blue-500" />}
            </div>
            <Button onClick={handleLookup} disabled={isLoading || !tailNumber.trim()}>
              {isLoading ? "Searching..." : "Lookup"}
            </Button>
          </div>
          
          {/* Aircraft not found message with create option */}
          {!isLoading && tailNumber.trim() && !lookupResult && !error && lookupAttempted && (
            <div className="bg-amber-50 border border-amber-200 rounded-md p-4">
              <div className="flex items-start gap-3">
                <AlertCircle className="h-5 w-5 text-amber-600 mt-0.5" />
                <div className="flex-1">
                  <h4 className="text-sm font-medium text-amber-800">Aircraft Not Found</h4>
                  <p className="text-sm text-amber-700 mt-1">
                    Aircraft with tail number "{tailNumber.trim()}" was not found in the system.
                  </p>
                  <Button 
                    onClick={handleCreateAircraft}
                    size="sm" 
                    className="mt-3 bg-amber-600 hover:bg-amber-700 text-white"
                  >
                    <Plus className="h-4 w-4 mr-1" />
                    Create New Aircraft
                  </Button>
                </div>
              </div>
            </div>
          )}

          {error && (
            <div className="text-sm text-red-500 flex items-center gap-1 mt-1">
              <AlertCircle className="h-4 w-4" />
              {error}
            </div>
          )}
        </div>

        {lookupResult && (
          <Card className="bg-green-50 border border-green-200 shadow-sm">
            <CardHeader className="pb-2">
              <div className="flex justify-between items-start">
                <div>
                  <CardTitle className="text-lg flex items-center gap-2">
                    <span className="text-green-600">✓</span> Aircraft Selected
                  </CardTitle>
                  <CardDescription>This aircraft will be used for the fuel order</CardDescription>
                </div>
                <div className="flex gap-2">
                  <Badge className="bg-green-100 text-green-700 border-green-300">
                    Selected
                  </Badge>
                  <Badge
                    variant="outline"
                    className={
                      lookupResult.status === "active"
                        ? "bg-green-50 text-green-600 border-green-200"
                        : lookupResult.status === "maintenance"
                          ? "bg-amber-50 text-amber-600 border-amber-200"
                          : "bg-red-50 text-red-600 border-red-200"
                    }
                  >
                    {lookupResult.status.charAt(0).toUpperCase() + lookupResult.status.slice(1)}
                  </Badge>
                </div>
              </div>
            </CardHeader>
            <CardContent className="pb-2">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-3">
                  <div>
                    <div className="text-sm font-medium text-gray-500">Tail Number</div>
                    <div className="font-medium">{lookupResult.tailNumber}</div>
                  </div>
                  <div>
                    <div className="text-sm font-medium text-gray-500">Aircraft Type</div>
                    <div>{lookupResult.type}</div>
                  </div>
                  <div>
                    <div className="text-sm font-medium text-gray-500">Model</div>
                    <div>{lookupResult.model}</div>
                  </div>
                  <div>
                    <div className="text-sm font-medium text-gray-500">Home Base</div>
                    <div>{lookupResult.homeBase}</div>
                  </div>
                </div>
                <div className="space-y-3">
                  <div>
                    <div className="text-sm font-medium text-gray-500">Owner</div>
                    <div className="font-medium">{lookupResult.owner}</div>
                  </div>
                  <div>
                    <div className="text-sm font-medium text-gray-500">Max Takeoff Weight (MTOW)</div>
                    <div>{lookupResult.mtow?.toLocaleString() || "N/A"} lbs</div>
                  </div>
                  <div>
                    <div className="text-sm font-medium text-gray-500">Fuel Capacity</div>
                    <div>{lookupResult.fuelCapacity} gallons</div>
                  </div>
                  <div>
                    <div className="text-sm font-medium text-gray-500">Preferred Fuel Type</div>
                    <div>{lookupResult.preferredFuelType}</div>
                  </div>
                </div>
              </div>
            </CardContent>
            <CardFooter className="pt-2 text-xs text-gray-500 flex items-center gap-1">
              <Info className="h-3 w-3" />
              Last updated:{" "}
              {lookupResult.lastFaaSyncAt ? new Date(lookupResult.lastFaaSyncAt).toLocaleDateString() : "Unknown"}
            </CardFooter>
          </Card>
        )}

        {/* Aircraft Creation Dialog */}
        <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>
          <DialogContent className="sm:max-w-md">
            <DialogHeader>
              <DialogTitle>Create New Aircraft</DialogTitle>
              <DialogDescription>
                Add a new aircraft to the system with basic information.
              </DialogDescription>
            </DialogHeader>
            
            <div className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="create-tail-number">Tail Number</Label>
                <Input
                  id="create-tail-number"
                  value={aircraftCreationData.tail_number}
                  onChange={(e) => setAircraftCreationData(prev => ({
                    ...prev,
                    tail_number: e.target.value
                  }))}
                  placeholder="e.g., N12345"
                  disabled={isCreating}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="aircraft-type">Aircraft Type</Label>
                <Select
                  value={aircraftCreationData.aircraft_type}
                  onValueChange={(value) => setAircraftCreationData(prev => ({
                    ...prev,
                    aircraft_type: value
                  }))}
                  disabled={isCreating}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select aircraft type" />
                  </SelectTrigger>
                  <SelectContent>
                    {AIRCRAFT_TYPES.map((type) => (
                      <SelectItem key={type} value={type}>
                        {type}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                
                {aircraftCreationData.aircraft_type === "Other" && (
                  <Input
                    placeholder="Enter custom aircraft type"
                    value={customAircraftType}
                    onChange={(e) => setCustomAircraftType(e.target.value)}
                    disabled={isCreating}
                  />
                )}
              </div>

              <div className="space-y-2">
                <Label htmlFor="fuel-type">Fuel Type</Label>
                <Select
                  value={aircraftCreationData.fuel_type}
                  onValueChange={(value) => setAircraftCreationData(prev => ({
                    ...prev,
                    fuel_type: value
                  }))}
                  disabled={isCreating}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select fuel type" />
                  </SelectTrigger>
                  <SelectContent>
                    {FUEL_TYPES.map((type) => (
                      <SelectItem key={type} value={type}>
                        {type}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                
                {aircraftCreationData.fuel_type === "Other" && (
                  <Input
                    placeholder="Enter custom fuel type"
                    value={customFuelType}
                    onChange={(e) => setCustomFuelType(e.target.value)}
                    disabled={isCreating}
                  />
                )}
              </div>

              {createError && (
                <div className="text-sm text-red-500 flex items-center gap-1">
                  <AlertCircle className="h-4 w-4" />
                  {createError}
                </div>
              )}
            </div>

            <DialogFooter>
              <Button
                variant="outline"
                onClick={() => setShowCreateDialog(false)}
                disabled={isCreating}
              >
                Cancel
              </Button>
              <Button
                onClick={handleCreateSubmit}
                disabled={isCreating || !aircraftCreationData.tail_number || !aircraftCreationData.aircraft_type || !aircraftCreationData.fuel_type}
              >
                {isCreating ? (
                  <>
                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                    Creating...
                  </>
                ) : (
                  <>
                    <Plus className="h-4 w-4 mr-2" />
                    Create Aircraft
                  </>
                )}
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>
    </div>
  )
}

================
File: frontend/app/login/page.tsx
================
"use client"

import { useState } from "react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { AlertCircle, Loader2 } from "lucide-react"
import { login } from "@/app/services/auth-service"

export default function LoginPage() {
  const router = useRouter()
  const [email, setEmail] = useState("")
  const [password, setPassword] = useState("")
  const [error, setError] = useState("")
  const [isLoading, setIsLoading] = useState(false)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setError("")
    setIsLoading(true)

    try {
      console.log("Attempting login with:", { email })
      const response = await login({ email, password })
      console.log("Login response:", response)

      if (response?.user?.roles) {
        const roles = response.user.roles.map(role => role.toLowerCase())
        console.log("User roles:", roles)

        // Determine redirect based on roles
        let redirectPath = "/member/dashboard" // Default fallback

        if (roles.some(role => role.includes("administrator") || role.includes("admin"))) {
          redirectPath = "/admin/dashboard"
        } else if (roles.some(role => role.includes("customer service") || role.includes("csr"))) {
          redirectPath = "/csr/dashboard"
        } else if (roles.some(role => role.includes("line service") || role.includes("technician") || role.includes("fueler"))) {
          redirectPath = "/fueler/dashboard"
        }

        console.log("Redirecting to:", redirectPath)
        
        // Use window.location for more reliable redirect
        window.location.href = redirectPath
      } else if (response?.user && (!response.user.roles || response.user.roles.length === 0)) {
        // User with no roles - redirect to member dashboard
        console.log("User has no roles, redirecting to member dashboard")
        window.location.href = "/member/dashboard"
      } else {
        throw new Error("Invalid response format")
      }
    } catch (err) {
      console.error("Login error:", err)
      setError(err instanceof Error ? err.message : "Login failed. Please try again.")
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle className="text-2xl text-center">FBO LaunchPad Login</CardTitle>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-4">
            {error && (
              <div className="bg-red-50 border border-red-200 rounded-md p-3 flex items-start gap-2">
                <AlertCircle className="h-5 w-5 text-red-500 mt-0.5 flex-shrink-0" />
                <p className="text-red-700 text-sm">{error}</p>
              </div>
            )}
            
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="Enter your email"
                required
                disabled={isLoading}
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="password">Password</Label>
              <Input
                id="password"
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                placeholder="Enter your password"
                required
                disabled={isLoading}
              />
            </div>
            
            <Button 
              type="submit" 
              className="w-full" 
              disabled={isLoading}
            >
              {isLoading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Logging in...
                </>
              ) : (
                "Log In"
              )}
            </Button>
          </form>

          <div className="mt-6 p-4 bg-gray-50 rounded-md">
            <h3 className="text-sm font-medium mb-2">Test Credentials:</h3>
            <div className="text-xs space-y-1">
              <div><strong>Admin:</strong> admin@fbolaunchpad.com / Admin123!</div>
              <div><strong>CSR:</strong> csr@fbolaunchpad.com / CSR123!</div>
              <div><strong>Fueler:</strong> fueler@fbolaunchpad.com / Fueler123!</div>
              <div><strong>Member:</strong> member@fbolaunchpad.com / Member123!</div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

================
File: frontend/app/services/api-config.ts
================
// Base configuration for API calls
// Removed: import { isOfflineMode } from "./utils"

// API base URL - use Next.js proxy to avoid CORS issues
export const API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL || "/api"

// Helper function to handle API responses
export async function handleApiResponse<T>(response: Response): Promise<T> {
  // Handle authentication errors specially
  if (response.status === 401) {
    const errorText = await response.text()
    
    // Try to parse JSON error response
    try {
      const errorJson = JSON.parse(errorText)
      const userMessage = errorJson.error || errorJson.message || 'Authentication required'
      throw new Error(`Authentication required: ${userMessage}`)
    } catch (parseError) {
      // Fallback to raw text if JSON parsing fails
      throw new Error(`Authentication required: Please log in to access this resource`)
    }
  }
  
  if (!response.ok) {
    // Handle other HTTP error statuses
    const errorText = await response.text()
    
    // Try to parse JSON error response for better user-facing messages
    try {
      const errorJson = JSON.parse(errorText)
      
      // Check for common error message fields
      const userMessage = errorJson.error || errorJson.message || errorJson.details || errorText
      
      // If we have a structured error with details, use the main error message
      if (typeof userMessage === 'string') {
        throw new Error(userMessage)
      } else if (typeof userMessage === 'object' && userMessage.message) {
        throw new Error(userMessage.message)
      } else {
        throw new Error(`API error (${response.status}): ${errorText}`)
      }
    } catch (parseError) {
      // If JSON parsing fails, use the raw error text
      throw new Error(`API error (${response.status}): ${errorText}`)
    }
  }

  try {
    // Try to parse as JSON, but handle non-JSON responses gracefully
    const contentType = response.headers.get("content-type")
    if (contentType && contentType.includes("application/json")) {
      return await response.json()
    } else {
      throw new Error("API returned non-JSON response")
    }
  } catch (error) {
    console.error("Error parsing API response:", error)
    throw new Error("Failed to parse API response")
  }
}

// Helper to get auth headers
export function getAuthHeaders(): Record<string, string> {
  // Get token from localStorage
  const userData = localStorage.getItem("fboUser")
  if (!userData) {
    return { "Content-Type": "application/json" }
  }

  try {
    const user = JSON.parse(userData)
    if (user.access_token) {
      return {
        Authorization: `Bearer ${user.access_token}`,
        "Content-Type": "application/json",
      }
    }
  } catch (e) {
    console.error("Error parsing user data", e)
  }

  return { "Content-Type": "application/json" }
}

// Add a function to check API health
export async function checkApiHealth(): Promise<boolean> {
  try {
    // Use a simple approach: try to reach the API base URL
    // We'll do a HEAD request to minimize data transfer
    const response = await fetch(`${API_BASE_URL}/fuel-orders`, {
      method: "HEAD",
      signal: AbortSignal.timeout(3000), // 3 second timeout
    })

    // Any response (including 401, 403, 404) indicates the backend is running
    // Only network errors or timeouts indicate the backend is down
    return true
  } catch (error) {
    // Network error, timeout, or backend is down
    console.warn("API health check failed - backend may be down:", error)
    return false
  }
}

================
File: frontend/app/services/auth-service.ts
================
import { API_BASE_URL, handleApiResponse, getAuthHeaders } from "./api-config"

export interface LoginRequest {
  email: string
  password: string
}

export interface RegistrationRequest {
  email: string
  password: string
  name?: string
  username?: string
}

export interface LoginResponse {
  token: string
  user: {
    id: number
    email: string
    username: string
    name: string
    roles: Array<{ id: number; name: string }>
    is_active: boolean
    created_at: string
  }
}

export interface RegistrationResponse {
  message: string
  user: {
    id: number
    email: string
    name?: string
  }
}

// Enhanced permission interfaces for the new granular system
export interface EffectivePermission {
  permission: string
  resource_type?: string
  resource_id?: string
  scope?: string
  source: string
  granted_at?: string
  group_id?: number
  role_id?: number
}

export interface PermissionSummary {
  total_permissions: number
  by_source: {
    direct: EffectivePermission[]
    groups: EffectivePermission[]
    roles: EffectivePermission[]
  }
  by_category: Record<string, EffectivePermission[]>
  resource_specific: EffectivePermission[]
}

export interface UserPermissionsResponse {
  user_id: number
  username: string
  permissions: string[]
  effective_permissions: Record<string, EffectivePermission>
  summary: PermissionSummary
  total_permissions: number
}

// Enhanced user interface that includes permission data
export interface EnhancedUser {
  id: number
  email: string
  username: string
  name: string
  roles: Array<{ id: number; name: string }>
  is_active: boolean
  created_at: string
  access_token: string
  isLoggedIn: boolean
  // New permission fields
  permissions?: string[]
  effective_permissions?: Record<string, EffectivePermission>
  permission_summary?: PermissionSummary
  permissions_loaded_at?: string
}

export async function login(credentials: LoginRequest): Promise<LoginResponse> {
  try {
    const response = await fetch(`${API_BASE_URL}/auth/login`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(credentials),
    })

    const data: LoginResponse = await handleApiResponse(response)

    // Store user data in localStorage with enhanced structure
    const enhancedUser: EnhancedUser = {
      ...data.user,
      access_token: data.token,
      isLoggedIn: true,
      permissions: [], // Will be loaded separately
      effective_permissions: {},
      permission_summary: {
        total_permissions: 0,
        by_source: { direct: [], groups: [], roles: [] },
        by_category: {},
        resource_specific: []
      }
    }

    localStorage.setItem("fboUser", JSON.stringify(enhancedUser))

    // Immediately fetch permissions after successful login
    try {
      await fetchAndStoreUserPermissions()
    } catch (permError) {
      console.warn("Failed to fetch permissions immediately after login:", permError)
      // Don't fail the login if permission fetching fails
    }

    return data
  } catch (error) {
    console.error("Login error:", error)
    if (error instanceof Error) {
      throw new Error(`Login failed: ${error.message}`)
    }
    throw new Error("Login failed: An unknown error occurred")
  }
}

export function logout() {
  // Check if we're in a browser environment
  if (typeof window === 'undefined') {
    return
  }

  localStorage.removeItem("fboUser")
  // Could also clear other permission-related cache here
}

export function getCurrentUser(): EnhancedUser | null {
  // Check if we're in a browser environment
  if (typeof window === 'undefined') {
    return null
  }

  const userData = localStorage.getItem("fboUser")
  if (!userData) {
    return null
  }

  try {
    return JSON.parse(userData) as EnhancedUser
  } catch (e) {
    console.error("Error parsing user data", e)
    return null
  }
}

export function isAuthenticated(): boolean {
  // Check if we're in a browser environment
  if (typeof window === 'undefined') {
    return false
  }

  const user = getCurrentUser()
  return !!user && user.isLoggedIn
}

export async function register(userData: RegistrationRequest): Promise<RegistrationResponse> {
  const response = await fetch(`${API_BASE_URL}/auth/register`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(userData),
  });
  return handleApiResponse<RegistrationResponse>(response);
}

// Enhanced permission fetching with comprehensive data
export async function fetchUserPermissions(): Promise<string[]> {
  try {
    const response = await fetch(`${API_BASE_URL}/auth/me/permissions`, {
      method: "GET",
      headers: getAuthHeaders(),
    })

    const data: UserPermissionsResponse = await handleApiResponse(response)
    return data.permissions || []
  } catch (error) {
    console.error("Error fetching user permissions:", error)
    if (error instanceof Error) {
      throw new Error(`Failed to fetch permissions: ${error.message}`)
    }
    throw new Error("Failed to fetch permissions: An unknown error occurred")
  }
}

// New function to fetch and store comprehensive permission data
export async function fetchAndStoreUserPermissions(): Promise<UserPermissionsResponse> {
  try {
    const response = await fetch(`${API_BASE_URL}/auth/me/permissions`, {
      method: "GET",
      headers: getAuthHeaders(),
    })

    const data: UserPermissionsResponse = await handleApiResponse(response)
    
    // Update the stored user data with permission information
    const currentUser = getCurrentUser()
    if (currentUser) {
      const updatedUser: EnhancedUser = {
        ...currentUser,
        permissions: data.permissions || [],
        effective_permissions: data.effective_permissions || {},
        permission_summary: data.summary || {
          total_permissions: 0,
          by_source: { direct: [], groups: [], roles: [] },
          by_category: {},
          resource_specific: []
        },
        permissions_loaded_at: new Date().toISOString()
      }
      
      localStorage.setItem("fboUser", JSON.stringify(updatedUser))
    }
    
    return data
  } catch (error) {
    console.error("Error fetching comprehensive permissions:", error)
    throw error
  }
}

// New utility functions for permission checking
export function hasPermission(permissionName: string, user?: EnhancedUser | null): boolean {
  const currentUser = user || getCurrentUser()
  if (!currentUser || !currentUser.permissions) {
    return false
  }
  
  return currentUser.permissions.includes(permissionName)
}

export function hasAnyPermission(permissionNames: string[], user?: EnhancedUser | null): boolean {
  const currentUser = user || getCurrentUser()
  if (!currentUser || !currentUser.permissions) {
    return false
  }
  
  return permissionNames.some(permission => currentUser.permissions!.includes(permission))
}

export function hasAllPermissions(permissionNames: string[], user?: EnhancedUser | null): boolean {
  const currentUser = user || getCurrentUser()
  if (!currentUser || !currentUser.permissions) {
    return false
  }
  
  return permissionNames.every(permission => currentUser.permissions!.includes(permission))
}

export function hasResourcePermission(
  permissionName: string, 
  resourceType?: string, 
  resourceId?: string,
  user?: EnhancedUser | null
): boolean {
  const currentUser = user || getCurrentUser()
  if (!currentUser || !currentUser.effective_permissions) {
    return false
  }
  
  // Check for exact permission match
  if (currentUser.permissions?.includes(permissionName)) {
    return true
  }
  
  // Check for resource-specific permissions
  if (resourceType && resourceId) {
    const resourceKey = `${permissionName}:${resourceType}:${resourceId}`
    const wildcardKey = `${permissionName}:${resourceType}:any`
    
    return !!(currentUser.effective_permissions[resourceKey] || 
             currentUser.effective_permissions[wildcardKey])
  }
  
  return false
}

export function getPermissionSource(permissionName: string, user?: EnhancedUser | null): string | null {
  const currentUser = user || getCurrentUser()
  if (!currentUser?.effective_permissions) {
    return null
  }
  
  const permissionData = currentUser.effective_permissions[permissionName]
  return permissionData?.source || null
}

export function isPermissionFromGroup(permissionName: string, user?: EnhancedUser | null): boolean {
  const source = getPermissionSource(permissionName, user)
  return source ? source.startsWith('group:') : false
}

export function isPermissionFromRole(permissionName: string, user?: EnhancedUser | null): boolean {
  const source = getPermissionSource(permissionName, user)
  return source ? source.startsWith('role:') : false
}

export function isDirectPermission(permissionName: string, user?: EnhancedUser | null): boolean {
  const source = getPermissionSource(permissionName, user)
  return source === 'direct'
}

// Function to refresh permissions (useful for real-time updates)
export async function refreshUserPermissions(): Promise<boolean> {
  try {
    await fetchAndStoreUserPermissions()
    return true
  } catch (error) {
    console.error("Failed to refresh permissions:", error)
    return false
  }
}

================
File: frontend/app/services/fuel-truck-service.ts
================
import { API_BASE_URL, getAuthHeaders, handleApiResponse } from "./api-config"

// --- Core Interfaces ---

export interface FuelTruck {
  id: number
  truck_number: string
  fuel_type: string
  capacity: number
  current_meter_reading: number // Changed from current_fuel_level
  is_active: boolean
  created_at?: string
  updated_at?: string
}

export interface FuelTruckCreateRequest {
  truck_number: string
  fuel_type: string
  capacity: number
  current_meter_reading?: number // Optional, defaults to 0 on backend
}

export interface FuelTruckUpdateRequest {
  truck_number?: string
  fuel_type?: string
  capacity?: number
  current_meter_reading?: number
  is_active?: boolean
}

// Internal helper types for backend responses
interface BackendFuelTruckListResponse {
  message: string
  fuel_trucks: FuelTruck[]
}

interface BackendFuelTruckDetailResponse {
  message: string
  fuel_truck: FuelTruck
}

// --- Fuel Truck CRUD Functions ---

export async function getAllFuelTrucks(filters?: { is_active?: string }): Promise<FuelTruck[]> {
  let url = `${API_BASE_URL}/fuel-trucks/`
  if (filters?.is_active !== undefined) {
    url += `?is_active=${filters.is_active}`
  }
  const response = await fetch(url, {
    method: "GET",
    headers: getAuthHeaders(),
  })
  const data = await handleApiResponse<BackendFuelTruckListResponse>(response)
  return data.fuel_trucks
}

export async function getFuelTruckById(truckId: number): Promise<FuelTruck | null> {
  try {
    const response = await fetch(`${API_BASE_URL}/fuel-trucks/${truckId}`, {
      method: "GET",
      headers: getAuthHeaders(),
    })
    const data = await handleApiResponse<BackendFuelTruckDetailResponse>(response)
    return data.fuel_truck
  } catch (error) {
    if (error instanceof Error && error.message.includes("API error (404)")) {
      return null
    }
    throw error
  }
}

export async function createFuelTruck(truckData: FuelTruckCreateRequest): Promise<FuelTruck> {
  const response = await fetch(`${API_BASE_URL}/fuel-trucks/`, {
    method: "POST",
    headers: getAuthHeaders(),
    body: JSON.stringify(truckData),
  })
  const data = await handleApiResponse<BackendFuelTruckDetailResponse>(response)
  return data.fuel_truck
}

export async function updateFuelTruck(
  truckId: number,
  truckData: FuelTruckUpdateRequest,
): Promise<FuelTruck> {
  const response = await fetch(`${API_BASE_URL}/fuel-trucks/${truckId}`, {
    method: "PATCH",
    headers: getAuthHeaders(),
    body: JSON.stringify(truckData),
  })
  const data = await handleApiResponse<BackendFuelTruckDetailResponse>(response)
  return data.fuel_truck
}

export async function deleteFuelTruck(truckId: number): Promise<{ message: string }> {
  const response = await fetch(`${API_BASE_URL}/fuel-trucks/${truckId}`, {
    method: "DELETE",
    headers: getAuthHeaders(),
  })
  return handleApiResponse<{ message: string }>(response)
}

// Get only active fuel trucks
export async function getActiveFuelTrucks(): Promise<FuelTruck[]> {
  return getAllFuelTrucks({ is_active: 'true' })
}

================
File: frontend/app/services/user-service.ts
================
import { API_BASE_URL, getAuthHeaders, handleApiResponse } from "./api-config" // Removed checkApiHealth

// Updated User Interface
export interface User {
  id: number
  username: string // Login username
  fullName?: string // User's full/display name
  email: string
  roles: Array<{ id: number; name: string }> // Standardized to match backend RoleBriefSchema
  is_active: boolean
  created_at?: string // Optional: ISO timestamp
}

// Role Interface
export interface Role {
  id: number
  name: string
  description?: string
}

// Response type for roles endpoint
export interface RolesResponse {
  message?: string
  roles: Role[]
}

// Response type for endpoints returning a list of users (like /admin/users and /users)
export interface UsersResponse {
  message: string
  users: User[] // This will be UserDetailSchema[] or UserBriefSchema[] from backend
}

// Response type for endpoints returning a single user (like /admin/users/{id} or /users/{id})
export interface UserResponse {
  message: string
  user: User // This will be UserDetailSchema or UserResponseSchema from backend
}

// Request Payload Types
export interface UserCreateRequest {
  email: string
  password: string
  role_ids: number[] // IDs of roles to assign
  username?: string // Login username
  fullName?: string // User's full name
  is_active?: boolean // Defaults to true on backend
}

export interface UserUpdateRequest {
  username?: string // Login username
  fullName?: string // User's full name
  email?: string
  role_ids?: number[]
  is_active?: boolean
  password?: string // For password changes
}

// Interface for the brief user schema returned by /users?role=LST
interface UserBriefSchema {
  id: number
  username?: string
  email: string
  name?: string
  role: string // Single role string
  is_active: boolean
}

interface UserBriefResponse {
  message: string
  users: UserBriefSchema[]
}

export async function getActiveLSTs(): Promise<User[]> {
  try {
    // First, get all roles to find the LST role ID
    const roles = await getRoles()
    const lstRole = roles.find(role => role.name === "Line Service Technician")
    
    if (!lstRole) {
      throw new Error("Line Service Technician role not found")
    }

    // Use the role_ids parameter with the LST role ID
    const response = await fetch(`${API_BASE_URL}/admin/users?role_ids=${lstRole.id}&is_active=true`, {
      method: "GET",
      headers: getAuthHeaders(),
    })

    const data = await handleApiResponse<UsersResponse>(response)

    // Return the users directly since they already have the standardized roles structure
    return data.users
  } catch (error) {
    console.error("Error fetching LSTs:", error) 
    throw error
  }
}

// Admin User CRUD Functions

export async function getAllUsers(filters?: { role_ids?: number[]; is_active?: string }): Promise<User[]> {
  let url = `${API_BASE_URL}/admin/users`
  const queryParams = new URLSearchParams()

  if (filters?.is_active !== undefined) {
    queryParams.append("is_active", filters.is_active)
  }
  if (filters?.role_ids && filters.role_ids.length > 0) {
    filters.role_ids.forEach((id) => queryParams.append("role_ids", id.toString()))
  }

  if (queryParams.toString()) {
    url += `?${queryParams.toString()}`
  }

  const response = await fetch(url, {
    method: "GET",
    headers: getAuthHeaders(),
  })
  const data = await handleApiResponse<UsersResponse>(response) // Assuming UsersResponse has {users: User[]}
  return data.users
}

export async function createUser(userData: UserCreateRequest): Promise<User> {
  const response = await fetch(`${API_BASE_URL}/admin/users`, {
    method: "POST",
    headers: getAuthHeaders(),
    body: JSON.stringify(userData),
  })
  const data = await handleApiResponse<UserResponse>(response) // Assuming UserResponse has {user: User}
  return data.user
}

export async function updateUser(userId: number, userData: UserUpdateRequest): Promise<User> {
  const response = await fetch(`${API_BASE_URL}/admin/users/${userId}`, {
    method: "PATCH",
    headers: getAuthHeaders(),
    body: JSON.stringify(userData),
  })
  const data = await handleApiResponse<UserResponse>(response)
  return data.user
}

export async function deleteUser(userId: number): Promise<{ message: string }> {
  const response = await fetch(`${API_BASE_URL}/admin/users/${userId}`, {
    method: "DELETE",
    headers: getAuthHeaders(),
  })
  // Assuming the response for delete is just { message: string } and not wrapped in "user"
  return handleApiResponse<{ message: string }>(response)
}

export async function getUserById(userId: number): Promise<User> {
  const response = await fetch(`${API_BASE_URL}/users/${userId}`, {
    method: "GET",
    headers: getAuthHeaders(),
  })
  const data = await handleApiResponse<UserResponse>(response)
  return data.user
}

// Role Management Functions

export async function getRoles(): Promise<Role[]> {
  const response = await fetch(`${API_BASE_URL}/admin/roles`, {
    method: "GET",
    headers: getAuthHeaders(),
  })
  const data = await handleApiResponse<RolesResponse>(response)
  return data.roles
}

export async function getAdminUserById(userId: number): Promise<User> {
  const response = await fetch(`${API_BASE_URL}/admin/users/${userId}`, {
    method: "GET",
    headers: getAuthHeaders(),
  })
  const data = await handleApiResponse<UserResponse>(response)
  return data.user
}




================================================================
End of Codebase
================================================================
